/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/legacy/types/types.proto

package tfschema

import (
	context "context"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gravitational_teleport_api_constants "github.com/gravitational/teleport/api/constants"
	_ "github.com/gravitational/teleport/api/gen/proto/go/attestation/v1"
	github_com_gravitational_teleport_api_types "github.com/gravitational/teleport/api/types"
	github_com_hashicorp_terraform_plugin_framework_attr "github.com/hashicorp/terraform-plugin-framework/attr"
	github_com_hashicorp_terraform_plugin_framework_diag "github.com/hashicorp/terraform-plugin-framework/diag"
	github_com_hashicorp_terraform_plugin_framework_tfsdk "github.com/hashicorp/terraform-plugin-framework/tfsdk"
	github_com_hashicorp_terraform_plugin_framework_types "github.com/hashicorp/terraform-plugin-framework/types"
	github_com_hashicorp_terraform_plugin_go_tftypes "github.com/hashicorp/terraform-plugin-go/tftypes"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// GenSchemaDatabaseV3 returns tfsdk.Schema definition for DatabaseV3
func GenSchemaDatabaseV3(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is the database resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseMapKeysPresentValidator("teleport.dev/origin")},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is the database metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"ad": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"domain": {
							Description: "Domain is the Active Directory domain the database resides in.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"kdc_host_name": {
							Description: "KDCHostName is the host name for a KDC for x509 Authentication.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"keytab_file": {
							Description: "KeytabFile is the path to the Kerberos keytab file.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"krb5_file": {
							Description: "Krb5File is the path to the Kerberos configuration file. Defaults to /etc/krb5.conf.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"ldap_cert": {
							Description: "LDAPCert is a certificate from Windows LDAP/AD, optional; only for x509 Authentication.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"spn": {
							Description: "SPN is the service principal name for the database.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "AD is the Active Directory configuration for the database.",
					Optional:    true,
				},
				"aws": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"account_id": {
							Description: "AccountID is the AWS account ID this database belongs to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"assume_role_arn": {
							Description: "AssumeRoleARN is an optional AWS role ARN to assume when accessing a database. Set this field and ExternalID to enable access across AWS accounts.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"elasticache": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"endpoint_type": {
									Description: "EndpointType is the type of the endpoint.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"replication_group_id": {
									Description: "ReplicationGroupID is the Redis replication group ID.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"transit_encryption_enabled": {
									Description: "TransitEncryptionEnabled indicates whether in-transit encryption (TLS) is enabled.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
								},
								"user_group_ids": {
									Description: "UserGroupIDs is a list of user group IDs.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "ElastiCache contains AWS ElastiCache Redis specific metadata.",
							Optional:    true,
						},
						"external_id": {
							Description: "ExternalID is an optional AWS external ID used to enable assuming an AWS role across accounts.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"memorydb": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"acl_name": {
									Description: "ACLName is the name of the ACL associated with the cluster.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"cluster_name": {
									Description: "ClusterName is the name of the MemoryDB cluster.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"endpoint_type": {
									Description: "EndpointType is the type of the endpoint.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"tls_enabled": {
									Description: "TLSEnabled indicates whether in-transit encryption (TLS) is enabled.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
								},
							}),
							Description: "MemoryDB contains AWS MemoryDB specific metadata.",
							Optional:    true,
						},
						"rds": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"cluster_id": {
									Description: "ClusterID is the RDS cluster (Aurora) identifier.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"iam_auth": {
									Description: "IAMAuth indicates whether database IAM authentication is enabled.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
								},
								"instance_id": {
									Description: "InstanceID is the RDS instance identifier.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"resource_id": {
									Description: "ResourceID is the RDS instance resource identifier (db-xxx).",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RDS contains RDS specific metadata.",
							Optional:    true,
						},
						"rdsproxy": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"custom_endpoint_name": {
									Description: "CustomEndpointName is the identifier of an RDS Proxy custom endpoint.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"name": {
									Description: "Name is the identifier of an RDS Proxy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"resource_id": {
									Description: "ResourceID is the RDS instance resource identifier (prx-xxx).",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RDSProxy contains AWS Proxy specific metadata.",
							Optional:    true,
						},
						"redshift": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"cluster_id": {
								Description: "ClusterID is the Redshift cluster identifier.",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
							}}),
							Description: "Redshift contains Redshift specific metadata.",
							Optional:    true,
						},
						"redshift_serverless": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"endpoint_name": {
									Description: "EndpointName is the VPC endpoint name.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"workgroup_id": {
									Description: "WorkgroupID is the workgroup ID.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"workgroup_name": {
									Description: "WorkgroupName is the workgroup name.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RedshiftServerless contains AWS Redshift Serverless specific metadata.",
							Optional:    true,
						},
						"region": {
							Description: "Region is a AWS cloud region.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"secret_store": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"key_prefix": {
									Description: "KeyPrefix specifies the secret key prefix.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"kms_key_id": {
									Description: "KMSKeyID specifies the AWS KMS key for encryption.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "SecretStore contains secret store configurations.",
							Optional:    true,
						},
					}),
					Description: "AWS contains AWS specific settings for RDS/Aurora/Redshift databases.",
					Optional:    true,
				},
				"azure": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"is_flexi_server": {
							Description: "IsFlexiServer is true if the database is an Azure Flexible server.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"name": {
							Description: "Name is the Azure database server name.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"redis": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"clustering_policy": {
								Description: "ClusteringPolicy is the clustering policy for Redis Enterprise.",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
							}}),
							Description: "Redis contains Azure Cache for Redis specific database metadata.",
							Optional:    true,
						},
						"resource_id": {
							Description: "ResourceID is the Azure fully qualified ID for the resource.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "Azure contains Azure specific database metadata.",
					Optional:    true,
				},
				"ca_cert": {
					Description: "CACert is the PEM-encoded database CA certificate.  DEPRECATED: Moved to TLS.CACert. DELETE IN 10.0.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"dynamic_labels": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.MapNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"command": {
							Description: "Command is a command to run",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"period": {
							Description: "Period is a time between command runs",
							Optional:    true,
							Type:        DurationType{},
						},
						"result": {
							Description: "Result captures standard output",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "DynamicLabels is the database dynamic labels.",
					Optional:    true,
				},
				"gcp": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"instance_id": {
							Description: "InstanceID is the Cloud SQL instance ID.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"project_id": {
							Description: "ProjectID is the GCP project ID the Cloud SQL instance resides in.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "GCP contains parameters specific to GCP Cloud SQL databases.",
					Optional:    true,
				},
				"mysql": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"server_version": {
						Description: "ServerVersion is the server version reported by DB proxy if the runtime information is not available.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					}}),
					Description: "MySQL is an additional section with MySQL database options.",
					Optional:    true,
				},
				"protocol": {
					Description: "Protocol is the database protocol: postgres, mysql, mongodb, etc.",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"tls": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"ca_cert": {
							Description: "CACert is an optional user provided CA certificate used for verifying database TLS connection.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"mode": {
							Description: "Mode is a TLS connection mode. See DatabaseTLSMode for details.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
						},
						"server_name": {
							Description: "ServerName allows to provide custom hostname. This value will override the servername/hostname on a certificate during validation.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "TLS is the TLS configuration used when establishing connection to target database. Allows to provide custom CA cert or override server name.",
					Optional:    true,
				},
				"uri": {
					Description: "URI is the database connection endpoint.",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Spec is the database spec.",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource subkind.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is the resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(3, 3)},
		},
	}}, nil
}

// GenSchemaAppV3 returns tfsdk.Schema definition for AppV3
func GenSchemaAppV3(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is the app resource kind. Always \"app\".",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Computed:      true,
					Description:   "Labels is a set of labels",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is the app resource metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"aws": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"external_id": {
						Description: "ExternalID is the AWS External ID used when assuming roles in this app.",
						Optional:    true,
						Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
					}}),
					Description: "AWS contains additional options for AWS applications.",
					Optional:    true,
				},
				"cloud": {
					Description: "Cloud identifies the cloud instance the app represents.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"dynamic_labels": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.MapNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"command": {
							Description: "Command is a command to run",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"period": {
							Description: "Period is a time between command runs",
							Optional:    true,
							Type:        DurationType{},
						},
						"result": {
							Description: "Result captures standard output",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "DynamicLabels are the app's command labels.",
					Optional:    true,
				},
				"insecure_skip_verify": {
					Description: "InsecureSkipVerify disables app's TLS certificate verification.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
				},
				"public_addr": {
					Description: "PublicAddr is the public address the application is accessible at.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"rewrite": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"headers": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"name": {
									Description: "Name is the http header name.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"value": {
									Description: "Value is the http header value.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Headers is a list of headers to inject when passing the request over to the application.",
							Optional:    true,
						},
						"redirect": {
							Description: "Redirect defines a list of hosts which will be rewritten to the public address of the application if they occur in the \"Location\" header.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
					}),
					Description: "Rewrite is a list of rewriting rules to apply to requests and responses.",
					Optional:    true,
				},
				"uri": {
					Description: "URI is the web app endpoint.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Spec is the app resource spec.",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource subkind.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is the resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(3, 3)},
		},
	}}, nil
}

// GenSchemaProvisionTokenV2 returns tfsdk.Schema definition for ProvisionTokenV2
func GenSchemaProvisionTokenV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Required:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Computed:      true,
					Description:   "Name is an object name",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace(), github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Sensitive:     true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"allow": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"aws_account": {
							Description: "AWSAccount is the AWS account ID.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"aws_arn": {
							Description: "AWSARN is used for the IAM join method, the AWS identity of joining nodes must match this ARN. Supports wildcards \"*\" and \"?\".",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"aws_regions": {
							Description: "AWSRegions is used for the EC2 join method and is a list of AWS regions a node is allowed to join from.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"aws_role": {
							Description: "AWSRole is used for the EC2 join method and is the the ARN of the AWS role that the auth server will assume in order to call the ec2 API.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.",
					Optional:    true,
				},
				"aws_iid_ttl": {
					Computed:      true,
					Description:   "AWSIIDTTL is the TTL to use for AWS EC2 Instance Identity Documents used to join the cluster with this token.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          DurationType{},
				},
				"azure": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"allow": {
						Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							"resource_groups": {
								Description: "ResourceGroups is a list of Azure resource groups the node is allowed to join from.",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
							},
							"subscription": {
								Description: "Subscription is the Azure subscription.",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
							},
						}),
						Description: "Allow is a list of Rules, nodes using this token must match one allow rule to use this token.",
						Optional:    true,
					}}),
					Description: "Azure allows the configuration of options specific to the \"azure\" join method.",
					Optional:    true,
				},
				"bot_name": {
					Description: "BotName is the name of the bot this token grants access to, if any",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"circleci": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"allow": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"context_id": {
									Description: "",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"project_id": {
									Description: "",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.",
							Optional:    true,
						},
						"organization_id": {
							Description: "",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "CircleCI allows the configuration of options specific to the \"circleci\" join method.",
					Optional:    true,
				},
				"gcp": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"allow": {
						Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
							"locations": {
								Description: "Locations is a list of regions (e.g. \"us-west1\") and/or zones (e.g. \"us-west1-b\").",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
							},
							"project_ids": {
								Description: "ProjectIDs is a list of project IDs (e.g. \"<example-id-123456>\").",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
							},
							"service_accounts": {
								Description: "ServiceAccounts is a list of service account emails (e.g. \"<project-number>-compute@developer.gserviceaccount.com\").",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
							},
						}),
						Description: "Allow is a list of Rules, nodes using this token must match one allow rule to use this token.",
						Optional:    true,
					}}),
					Description: "GCP allows the configuration of options specific to the \"gcp\" join method.",
					Optional:    true,
				},
				"github": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"allow": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"actor": {
									Description: "The personal account that initiated the workflow run.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"environment": {
									Description: "The name of the environment used by the job.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"ref": {
									Description: "The git ref that triggered the workflow run.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"ref_type": {
									Description: "The type of ref, for example: \"branch\".",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"repository": {
									Description: "The repository from where the workflow is running. This includes the name of the owner e.g `gravitational/teleport`",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"repository_owner": {
									Description: "The name of the organization in which the repository is stored.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"sub": {
									Description: "Sub also known as Subject is a string that roughly uniquely identifies the workload. The format of this varies depending on the type of github action run.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"workflow": {
									Description: "The name of the workflow.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.",
							Optional:    true,
						},
						"enterprise_server_host": {
							Description: "EnterpriseServerHost allows joining from runners associated with a GitHub Enterprise Server instance. When unconfigured, tokens will be validated against github.com, but when configured to the host of a GHES instance, then the tokens will be validated against host.  This value should be the hostname of the GHES instance, and should not include the scheme or a path. The instance must be accessible over HTTPS at this hostname and the certificate must be trusted by the Auth Server.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "GitHub allows the configuration of options specific to the \"github\" join method.",
					Optional:    true,
				},
				"gitlab": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"allow": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"environment": {
									Description: "Environment limits access by the environment the job deploys to (if one is associated)",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"namespace_path": {
									Description: "NamespacePath is used to limit access to jobs in a group or user's projects. Example: `mygroup`",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"pipeline_source": {
									Description: "PipelineSource limits access by the job pipeline source type. https://docs.gitlab.com/ee/ci/jobs/job_control.html#common-if-clauses-for-rules Example: `web`",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"project_path": {
									Description: "ProjectPath is used to limit access to jobs belonging to an individual project. Example: `mygroup/myproject`",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"ref": {
									Description: "Ref allows access to be limited to jobs triggered by a specific git ref. Ensure this is used in combination with ref_type.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"ref_type": {
									Description: "RefType allows access to be limited to jobs triggered by a specific git ref type. Example: `branch` or `tag`",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"sub": {
									Description: "Sub roughly uniquely identifies the workload. Example: `project_path:mygroup/my-project:ref_type:branch:ref:main` project_path:{group}/{project}:ref_type:{type}:ref:{branch_name}",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Allow is a list of TokenRules, nodes using this token must match one allow rule to use this token.",
							Optional:    true,
						},
						"domain": {
							Description: "Domain is the domain of your GitLab instance. This will default to `gitlab.com` - but can be set to the domain of your self-hosted GitLab e.g `gitlab.example.com`.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "GitLab allows the configuration of options specific to the \"gitlab\" join method.",
					Optional:    true,
				},
				"join_method": {
					Description: "JoinMethod is the joining method required in order to use this token. Supported joining methods include \"token\", \"ec2\", and \"iam\".",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"kubernetes": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"allow": {
						Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"service_account": {
							Description: "ServiceAccount is the namespaced name of the Kubernetes service account. Its format is \"namespace:service-account\".",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						}}),
						Description: "Allow is a list of Rules, nodes using this token must match one allow rule to use this token.",
						Optional:    true,
					}}),
					Description: "Kubernetes allows the configuration of options specific to the \"kubernetes\" join method.",
					Optional:    true,
				},
				"roles": {
					Description: "Roles is a list of roles associated with the token, that will be converted to metadata in the SSH and X509 certificates issued to the user of the token",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"suggested_agent_matcher_labels": GenSchemaLabels(ctx),
				"suggested_labels":               GenSchemaLabels(ctx),
			}),
			Description: "Spec is a provisioning token V2 spec",
			Required:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaClusterNetworkingConfigV2 returns tfsdk.Schema definition for ClusterNetworkingConfigV2
func GenSchemaClusterNetworkingConfigV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseMapKeysPresentValidator("teleport.dev/origin")},
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"client_idle_timeout": {
					Description: "ClientIdleTimeout sets global cluster default setting for client idle timeouts.",
					Optional:    true,
					Type:        DurationType{},
				},
				"idle_timeout_message": {
					Description: "ClientIdleTimeoutMessage is the message sent to the user when a connection times out.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"keep_alive_count_max": {
					Computed:      true,
					Description:   "KeepAliveCountMax is the number of keep-alive messages that can be missed before the server disconnects the connection to the client.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
				"keep_alive_interval": {
					Computed:      true,
					Description:   "KeepAliveInterval is the interval at which the server sends keep-alive messages to the client.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          DurationType{},
				},
				"proxy_listener_mode": {
					Description: "ProxyListenerMode is proxy listener mode used by Teleport Proxies.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
				"proxy_ping_interval": {
					Description: "ProxyPingInterval defines in which interval the TLS routing ping message should be sent. This is applicable only when using ping-wrapped connections, regular TLS routing connections are not affected.",
					Optional:    true,
					Type:        DurationType{},
				},
				"routing_strategy": {
					Description: "RoutingStrategy determines the strategy used to route to nodes.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
				"session_control_timeout": {
					Description: "SessionControlTimeout is the session control lease expiry and defines the upper limit of how long a node may be out of contact with the auth server before it begins terminating controlled sessions.",
					Optional:    true,
					Type:        DurationType{},
				},
				"tunnel_strategy": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"agent_mesh": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"active": {
								Computed:    true,
								Description: "Automatically generated field preventing empty message errors",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
							}}),
							Description: "",
							Optional:    true,
						},
						"proxy_peering": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"agent_connection_count": {
								Description: "",
								Optional:    true,
								Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
							}}),
							Description: "",
							Optional:    true,
						},
					}),
					Description: "TunnelStrategyV1 determines the tunnel strategy used in the cluster.",
					Optional:    true,
				},
				"web_idle_timeout": {
					Description: "WebIdleTimeout sets global cluster default setting for the web UI idle timeouts.",
					Optional:    true,
					Type:        DurationType{},
				},
			}),
			Description: "Spec is a ClusterNetworkingConfig specification",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaSessionRecordingConfigV2 returns tfsdk.Schema definition for SessionRecordingConfigV2
func GenSchemaSessionRecordingConfigV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseMapKeysPresentValidator("teleport.dev/origin")},
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"mode": {
					Computed:      true,
					Description:   "Mode controls where (or if) the session is recorded.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"proxy_checks_host_keys": GenSchemaBoolOption(ctx),
			}),
			Description: "Spec is a SessionRecordingConfig specification",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaAuthPreferenceV2 returns tfsdk.Schema definition for AuthPreferenceV2
func GenSchemaAuthPreferenceV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Computed:      true,
					Description:   "Labels is a set of labels",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
					Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseMapKeysPresentValidator("teleport.dev/origin")},
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"allow_headless":     GenSchemaBoolOption(ctx),
				"allow_local_auth":   GenSchemaBoolOption(ctx),
				"allow_passwordless": GenSchemaBoolOption(ctx),
				"connector_name": {
					Description: "ConnectorName is the name of the OIDC or SAML connector. If this value is not set the first connector in the backend will be used.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"device_trust": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"auto_enroll": {
							Description: "Enable device auto-enroll. Auto-enroll lets any user issue a device enrollment token for a known device that is not already enrolled. `tsh` takes advantage of auto-enroll to automatically enroll devices on user login, when appropriate. The effective cluster Mode still applies: AutoEnroll=true is meaningless if Mode=\"off\".",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"mode": {
							Description: "Mode of verification for trusted devices.  The following modes are supported:  - \"off\": disables both device authentication and authorization. - \"optional\": allows both device authentication and authorization, but doesn't enforce the presence of device extensions for sensitive endpoints. - \"required\": enforces the presence of device extensions for sensitive endpoints.  Mode is always \"off\" for OSS. Defaults to \"optional\" for Enterprise.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "DeviceTrust holds settings related to trusted device verification. Requires Teleport Enterprise.",
					Optional:    true,
				},
				"disconnect_expired_cert": GenSchemaBoolOption(ctx),
				"idp": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"saml": {
						Attributes:  github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"enabled": GenSchemaBoolOption(ctx)}),
						Description: "SAML are options related to the Teleport SAML IdP.",
						Optional:    true,
					}}),
					Description: "IDP is a set of options related to accessing IdPs within Teleport. Requires Teleport Enterprise.",
					Optional:    true,
				},
				"locking_mode": {
					Computed:      true,
					Description:   "LockingMode is the cluster-wide locking mode default.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"message_of_the_day": {
					Description: "",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"require_session_mfa": {
					Description: "RequireMFAType is the type of MFA requirement enforced for this cluster.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
				},
				"second_factor": {
					Computed:      true,
					Description:   "SecondFactor is the type of second factor.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"type": {
					Computed:      true,
					Description:   "Type is the type of authentication.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"u2f": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"app_id": {
							Description: "AppID returns the application ID for universal second factor.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"device_attestation_cas": {
							Description: "DeviceAttestationCAs contains the trusted attestation CAs for U2F devices.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"facets": {
							Description: "Facets returns the facets for universal second factor. Deprecated: Kept for backwards compatibility reasons, but Facets have no effect since Teleport v10, when Webauthn replaced the U2F implementation.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
					}),
					Description: "U2F are the settings for the U2F device.",
					Optional:    true,
				},
				"webauthn": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"attestation_allowed_cas": {
							Description: "Allow list of device attestation CAs in PEM format. If present, only devices whose attestation certificates match the certificates specified here may be registered (existing registrations are unchanged). If supplied in conjunction with AttestationDeniedCAs, then both conditions need to be true for registration to be allowed (the device MUST match an allowed CA and MUST NOT match a denied CA). By default all devices are allowed.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"attestation_denied_cas": {
							Description: "Deny list of device attestation CAs in PEM format. If present, only devices whose attestation certificates don't match the certificates specified here may be registered (existing registrations are unchanged). If supplied in conjunction with AttestationAllowedCAs, then both conditions need to be true for registration to be allowed (the device MUST match an allowed CA and MUST NOT match a denied CA). By default no devices are denied.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"rp_id": {
							Description: "RPID is the ID of the Relying Party. It should be set to the domain name of the Teleport installation.  IMPORTANT: RPID must never change in the lifetime of the cluster, because it's recorded in the registration data on the WebAuthn device. If the RPID changes, all existing WebAuthn key registrations will become invalid and all users who use WebAuthn as the second factor will need to re-register.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "Webauthn are the settings for server-side Web Authentication support.",
					Optional:    true,
				},
			}),
			Description: "Spec is an AuthPreference specification",
			Required:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaRoleV6 returns tfsdk.Schema definition for RoleV6
func GenSchemaRoleV6(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"allow": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"app_labels": GenSchemaLabels(ctx),
						"aws_role_arns": {
							Description: "AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"azure_identities": {
							Description: "AzureIdentities is a list of Azure identities this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"cluster_labels": GenSchemaLabels(ctx),
						"db_labels":      GenSchemaLabels(ctx),
						"db_names": {
							Description: "DatabaseNames is a list of database names this role is allowed to connect to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"db_service_labels": GenSchemaLabels(ctx),
						"db_users": {
							Description: "DatabaseUsers is a list of databases users this role is allowed to connect as.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"desktop_groups": {
							Description: "DesktopGroups is a list of groups for created desktop users to be added to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"gcp_service_accounts": {
							Description: "GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"group_labels": GenSchemaLabels(ctx),
						"host_groups": {
							Description: "HostGroups is a list of groups for created users to be added to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"host_sudoers": {
							Description: "HostSudoers is a list of entries to include in a users sudoer file",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"impersonate": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"roles": {
									Description: "Roles is a list of resources this role is allowed to impersonate",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"users": {
									Description: "Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where specifies optional advanced matcher",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.",
							Optional:    true,
						},
						"join_sessions": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"kinds": {
									Description: "Kinds are the session kinds this policy applies to.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"modes": {
									Description: "Modes is a list of permitted participant modes for this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"name": {
									Description: "Name is the name of the policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"roles": {
									Description: "Roles is a list of roles that you can join the session of.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "JoinSessions specifies policies to allow users to join other sessions.",
							Optional:    true,
						},
						"kubernetes_groups": {
							Description: "KubeGroups is a list of kubernetes groups",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"kubernetes_labels": GenSchemaLabels(ctx),
						"kubernetes_resources": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"kind": {
									Description: "Kind specifies the Kubernetes Resource type. At the moment only \"pod\" is supported.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"name": {
									Description: "Name is the resource name. It supports wildcards.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"namespace": {
									Description: "Namespace is the resource namespace. It supports wildcards.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Computed:      true,
							Description:   "KubernetesResources is the Kubernetes Resources this Role grants access to.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
						},
						"kubernetes_users": {
							Description: "KubeUsers is an optional kubernetes users to impersonate",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"logins": {
							Description: "Logins is a list of *nix system logins.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"node_labels": GenSchemaLabels(ctx),
						"request": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"annotations": GenSchemaTraits(ctx),
								"claims_to_roles": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"claim": {
											Description: "Claim is a claim name.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"roles": {
											Description: "Roles is a list of static teleport roles to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
										},
										"value": {
											Description: "Value is a claim value to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.",
									Optional:    true,
								},
								"roles": {
									Description: "Roles is the name of roles which will match the request rule.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"search_as_roles": {
									Description: "SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"suggested_reviewers": {
									Description: "SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"thresholds": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"approve": {
											Description: "Approve is the number of matching approvals needed for state-transition.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
										},
										"deny": {
											Description: "Deny is the number of denials needed for state-transition.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
										},
										"filter": {
											Description: "Filter is an optional predicate used to determine which reviews count toward this threshold.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"name": {
											Description: "Name is the optional human-readable name of the threshold.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used.",
									Optional:    true,
								},
							}),
							Description: "",
							Optional:    true,
						},
						"require_session_join": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"count": {
									Description: "Count is the amount of people that need to be matched for this policy to be fulfilled.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
								"filter": {
									Description: "Filter is a predicate that determines what users count towards this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"kinds": {
									Description: "Kinds are the session kinds this policy applies to.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"modes": {
									Description: "Modes is the list of modes that may be used to fulfill this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"name": {
									Description: "Name is the name of the policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"on_leave": {
									Description: "OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RequireSessionJoin specifies policies for required users to start a session.",
							Optional:    true,
						},
						"review_requests": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"claims_to_roles": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"claim": {
											Description: "Claim is a claim name.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"roles": {
											Description: "Roles is a list of static teleport roles to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
										},
										"value": {
											Description: "Value is a claim value to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.",
									Optional:    true,
								},
								"preview_as_roles": {
									Description: "PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"roles": {
									Description: "Roles is the name of roles which may be reviewed.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where is an optional predicate which further limits which requests are reviewable.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "ReviewRequests defines conditions for submitting access reviews.",
							Optional:    true,
						},
						"rules": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"actions": {
									Description: "Actions specifies optional actions taken when this rule matches",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"resources": {
									Description: "Resources is a list of resources",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"verbs": {
									Description: "Verbs is a list of verbs",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where specifies optional advanced matcher",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Rules is a list of rules and their access levels. Rules are a high level construct used for access control.",
							Optional:    true,
						},
						"windows_desktop_labels": GenSchemaLabels(ctx),
						"windows_desktop_logins": {
							Description: "WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
					}),
					Description: "Allow is the set of conditions evaluated to grant access.",
					Optional:    true,
				},
				"deny": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"app_labels": GenSchemaLabels(ctx),
						"aws_role_arns": {
							Description: "AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"azure_identities": {
							Description: "AzureIdentities is a list of Azure identities this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"cluster_labels": GenSchemaLabels(ctx),
						"db_labels":      GenSchemaLabels(ctx),
						"db_names": {
							Description: "DatabaseNames is a list of database names this role is allowed to connect to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"db_service_labels": GenSchemaLabels(ctx),
						"db_users": {
							Description: "DatabaseUsers is a list of databases users this role is allowed to connect as.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"desktop_groups": {
							Description: "DesktopGroups is a list of groups for created desktop users to be added to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"gcp_service_accounts": {
							Description: "GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"group_labels": GenSchemaLabels(ctx),
						"host_groups": {
							Description: "HostGroups is a list of groups for created users to be added to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"host_sudoers": {
							Description: "HostSudoers is a list of entries to include in a users sudoer file",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"impersonate": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"roles": {
									Description: "Roles is a list of resources this role is allowed to impersonate",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"users": {
									Description: "Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where specifies optional advanced matcher",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means.",
							Optional:    true,
						},
						"join_sessions": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"kinds": {
									Description: "Kinds are the session kinds this policy applies to.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"modes": {
									Description: "Modes is a list of permitted participant modes for this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"name": {
									Description: "Name is the name of the policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"roles": {
									Description: "Roles is a list of roles that you can join the session of.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
							}),
							Description: "JoinSessions specifies policies to allow users to join other sessions.",
							Optional:    true,
						},
						"kubernetes_groups": {
							Description: "KubeGroups is a list of kubernetes groups",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"kubernetes_labels": GenSchemaLabels(ctx),
						"kubernetes_resources": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"kind": {
									Description: "Kind specifies the Kubernetes Resource type. At the moment only \"pod\" is supported.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"name": {
									Description: "Name is the resource name. It supports wildcards.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"namespace": {
									Description: "Namespace is the resource namespace. It supports wildcards.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "KubernetesResources is the Kubernetes Resources this Role grants access to.",
							Optional:    true,
						},
						"kubernetes_users": {
							Description: "KubeUsers is an optional kubernetes users to impersonate",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"logins": {
							Description: "Logins is a list of *nix system logins.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"node_labels": GenSchemaLabels(ctx),
						"request": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"annotations": GenSchemaTraits(ctx),
								"claims_to_roles": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"claim": {
											Description: "Claim is a claim name.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"roles": {
											Description: "Roles is a list of static teleport roles to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
										},
										"value": {
											Description: "Value is a claim value to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.",
									Optional:    true,
								},
								"roles": {
									Description: "Roles is the name of roles which will match the request rule.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"search_as_roles": {
									Description: "SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"suggested_reviewers": {
									Description: "SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"thresholds": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"approve": {
											Description: "Approve is the number of matching approvals needed for state-transition.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
										},
										"deny": {
											Description: "Deny is the number of denials needed for state-transition.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
										},
										"filter": {
											Description: "Filter is an optional predicate used to determine which reviews count toward this threshold.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"name": {
											Description: "Name is the optional human-readable name of the threshold.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used.",
									Optional:    true,
								},
							}),
							Description: "",
							Optional:    true,
						},
						"require_session_join": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"count": {
									Description: "Count is the amount of people that need to be matched for this policy to be fulfilled.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
								"filter": {
									Description: "Filter is a predicate that determines what users count towards this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"kinds": {
									Description: "Kinds are the session kinds this policy applies to.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"modes": {
									Description: "Modes is the list of modes that may be used to fulfill this policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"name": {
									Description: "Name is the name of the policy.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"on_leave": {
									Description: "OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RequireSessionJoin specifies policies for required users to start a session.",
							Optional:    true,
						},
						"review_requests": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"claims_to_roles": {
									Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
										"claim": {
											Description: "Claim is a claim name.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
										"roles": {
											Description: "Roles is a list of static teleport roles to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
										},
										"value": {
											Description: "Value is a claim value to match.",
											Optional:    true,
											Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
										},
									}),
									Description: "ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.",
									Optional:    true,
								},
								"preview_as_roles": {
									Description: "PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"roles": {
									Description: "Roles is the name of roles which may be reviewed.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where is an optional predicate which further limits which requests are reviewable.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "ReviewRequests defines conditions for submitting access reviews.",
							Optional:    true,
						},
						"rules": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"actions": {
									Description: "Actions specifies optional actions taken when this rule matches",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"resources": {
									Description: "Resources is a list of resources",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"verbs": {
									Description: "Verbs is a list of verbs",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
								},
								"where": {
									Description: "Where specifies optional advanced matcher",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "Rules is a list of rules and their access levels. Rules are a high level construct used for access control.",
							Optional:    true,
						},
						"windows_desktop_labels": GenSchemaLabels(ctx),
						"windows_desktop_logins": {
							Description: "WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
					}),
					Description: "Deny is the set of conditions evaluated to deny access. Deny takes priority over allow.",
					Optional:    true,
				},
				"options": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"cert_extensions": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"mode": {
									Description: "Mode is the type of extension to be used -- currently critical-option is not supported",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
								"name": {
									Description: "Name specifies the key to be used in the cert extension.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"type": {
									Description: "Type represents the certificate type being extended, only ssh is supported at this time.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
								},
								"value": {
									Description: "Value specifies the value to be used in the cert extension.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "CertExtensions specifies the key/values",
							Optional:    true,
						},
						"cert_format": {
							Computed:      true,
							Description:   "CertificateFormat defines the format of the user certificate to allow compatibility with older versions of OpenSSH.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"client_idle_timeout": {
							Description: "ClientIdleTimeout sets disconnect clients on idle timeout behavior, if set to 0 means do not disconnect, otherwise is set to the idle duration.",
							Optional:    true,
							Type:        DurationType{},
						},
						"create_desktop_user":       GenSchemaBoolOption(ctx),
						"create_host_user":          GenSchemaBoolOption(ctx),
						"desktop_clipboard":         GenSchemaBoolOption(ctx),
						"desktop_directory_sharing": GenSchemaBoolOption(ctx),
						"device_trust_mode": {
							Description: "DeviceTrustMode is the device authorization mode used for the resources associated with the role. See DeviceTrust.Mode. Reserved for future use, not yet used by Teleport.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"disconnect_expired_cert": {
							Description: "DisconnectExpiredCert sets disconnect clients on expired certificates.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"enhanced_recording": {
							Computed:      true,
							Description:   "BPF defines what events to record for the BPF-based session recorder.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"forward_agent": {
							Description: "ForwardAgent is SSH agent forwarding.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"idp": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"saml": {
								Attributes:  github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{"enabled": GenSchemaBoolOption(ctx)}),
								Description: "SAML are options related to the Teleport SAML IdP.",
								Optional:    true,
							}}),
							Description: "IDP is a set of options related to accessing IdPs within Teleport. Requires Teleport Enterprise.",
							Optional:    true,
						},
						"lock": {
							Description: "Lock specifies the locking mode (strict|best_effort) to be applied with the role.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"max_connections": {
							Description: "MaxConnections defines the maximum number of concurrent connections a user may hold.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
						},
						"max_kubernetes_connections": {
							Description: "MaxKubernetesConnections defines the maximum number of concurrent Kubernetes sessions a user may hold.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
						},
						"max_session_ttl": {
							Computed:      true,
							Description:   "MaxSessionTTL defines how long a SSH session can last for.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          DurationType{},
						},
						"max_sessions": {
							Description: "MaxSessions defines the maximum number of concurrent sessions per connection.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
						},
						"permit_x11_forwarding": {
							Description: "PermitX11Forwarding authorizes use of X11 forwarding.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"pin_source_ip": {
							Description: "PinSourceIP forces the same client IP for certificate generation and usage",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
						},
						"port_forwarding": GenSchemaBoolOption(ctx),
						"record_session": {
							Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
								"default": {
									Description: "Default indicates the default value for the services.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
								"desktop": GenSchemaBoolOption(ctx),
								"ssh": {
									Description: "SSH indicates the session mode used on SSH sessions.",
									Optional:    true,
									Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
								},
							}),
							Description: "RecordDesktopSession indicates whether desktop access sessions should be recorded. It defaults to true unless explicitly set to false.",
							Optional:    true,
						},
						"request_access": {
							Description: "RequestAccess defines the access request strategy (optional|note|always) where optional is the default.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"request_prompt": {
							Description: "RequestPrompt is an optional message which tells users what they aught to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"require_session_mfa": {
							Description: "RequireMFAType is the type of MFA requirement enforced for this user.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.Int64Type,
						},
						"ssh_file_copy": GenSchemaBoolOption(ctx),
					}),
					Description: "Options is for OpenSSH options like agent forwarding.",
					Optional:    true,
				},
			}),
			Description: "Spec is a role specification",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(3, 6)},
		},
	}}, nil
}

// GenSchemaUserV2 returns tfsdk.Schema definition for UserV2
func GenSchemaUserV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata is resource metadata",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"github_identities": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"connector_id": {
							Description: "ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"username": {
							Description: "Username is username supplied by external identity provider",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "GithubIdentities list associated Github OAuth2 identities that let user log in using externally verified identity",
					Optional:    true,
				},
				"oidc_identities": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"connector_id": {
							Description: "ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"username": {
							Description: "Username is username supplied by external identity provider",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "OIDCIdentities lists associated OpenID Connect identities that let user log in using externally verified identity",
					Optional:    true,
				},
				"roles": {
					Description: "Roles is a list of roles assigned to user",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"saml_identities": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"connector_id": {
							Description: "ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"username": {
							Description: "Username is username supplied by external identity provider",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "SAMLIdentities lists associated SAML identities that let user log in using externally verified identity",
					Optional:    true,
				},
				"traits": GenSchemaTraits(ctx),
			}),
			Description: "Spec is a user specification",
			Optional:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is version",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaOIDCConnectorV3 returns tfsdk.Schema definition for OIDCConnectorV3
func GenSchemaOIDCConnectorV3(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata holds resource metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"acr_values": {
					Description: "ACR is an Authentication Context Class Reference value. The meaning of the ACR value is context-specific and varies for identity providers.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"allow_unverified_email": {
					Description: "AllowUnverifiedEmail tells the connector to accept OIDC users with unverified emails.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
				},
				"claims_to_roles": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"claim": {
							Description: "Claim is a claim name.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"roles": {
							Description: "Roles is a list of static teleport roles to match.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"value": {
							Description: "Value is a claim value to match.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "ClaimsToRoles specifies a dynamic mapping from claims to roles.",
					Optional:    true,
				},
				"client_id": {
					Description: "ClientID is the id of the authentication client (Teleport Auth server).",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"client_secret": {
					Description: "ClientSecret is used to authenticate the client.",
					Optional:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"display": {
					Description: "Display is the friendly name for this provider.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"google_admin_email": {
					Description: "GoogleAdminEmail is the email of a google admin to impersonate.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"google_service_account": {
					Description: "GoogleServiceAccount is a string containing google service account credentials.",
					Optional:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"google_service_account_uri": {
					Description: "GoogleServiceAccountURI is a path to a google service account uri.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"issuer_url": {
					Description: "IssuerURL is the endpoint of the provider, e.g. https://accounts.google.com.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"prompt": {
					Description: "Prompt is an optional OIDC prompt. An empty string omits prompt. If not specified, it defaults to select_account for backwards compatibility.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"provider": {
					Description: "Provider is the external identity provider.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"redirect_url": GenSchemaStrings(ctx),
				"scope": {
					Description: "Scope specifies additional scopes set by provider.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"username_claim": {
					Description: "UsernameClaim specifies the name of the claim from the OIDC connector to be used as the user's username.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Spec is an OIDC connector specification.",
			Required:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(3, 3)},
		},
	}}, nil
}

// GenSchemaSAMLConnectorV2 returns tfsdk.Schema definition for SAMLConnectorV2
func GenSchemaSAMLConnectorV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata holds resource metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"acs": {
					Description: "AssertionConsumerService is a URL for assertion consumer service on the service provider (Teleport's side).",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"allow_idp_initiated": {
					Description: "AllowIDPInitiated is a flag that indicates if the connector can be used for IdP-initiated logins.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
				},
				"assertion_key_pair": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"cert": {
							Computed:      true,
							Description:   "Cert is a PEM-encoded x509 certificate.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"private_key": {
							Computed:      true,
							Description:   "PrivateKey is a PEM encoded x509 private key.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Sensitive:     true,
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "EncryptionKeyPair is a key pair used for decrypting SAML assertions.",
					Optional:    true,
				},
				"attributes_to_roles": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"name": {
							Description: "Name is an attribute statement name.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"roles": {
							Description: "Roles is a list of static teleport roles to map to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"value": {
							Description: "Value is an attribute statement value to match.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "AttributesToRoles is a list of mappings of attribute statements to roles.",
					Required:    true,
				},
				"audience": {
					Computed:      true,
					Description:   "Audience uniquely identifies our service provider.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"cert": {
					Description: "Cert is the identity provider certificate PEM. IDP signs <Response> responses using this certificate.",
					Optional:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"display": {
					Description: "Display controls how this connector is displayed.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"entity_descriptor": {
					Description: "EntityDescriptor is XML with descriptor. It can be used to supply configuration parameters in one XML file rather than supplying them in the individual elements.",
					Optional:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"entity_descriptor_url": {
					Description: "EntityDescriptorURL is a URL that supplies a configuration XML.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"issuer": {
					Computed:      true,
					Description:   "Issuer is the identity provider issuer.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"provider": {
					Description: "Provider is the external identity provider.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"service_provider_issuer": {
					Computed:      true,
					Description:   "ServiceProviderIssuer is the issuer of the service provider (Teleport).",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"signing_key_pair": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"cert": {
							Computed:      true,
							Description:   "Cert is a PEM-encoded x509 certificate.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"private_key": {
							Computed:      true,
							Description:   "PrivateKey is a PEM encoded x509 private key.",
							Optional:      true,
							PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
							Sensitive:     true,
							Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Computed:      true,
					Description:   "SigningKeyPair is an x509 key pair used to sign AuthnRequest.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
				},
				"sso": {
					Computed:      true,
					Description:   "SSO is the URL of the identity provider's SSO service.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Spec is an SAML connector specification.",
			Required:    true,
			Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseAnyOfValidator("entity_descriptor", "entity_descriptor_url")},
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(2, 2)},
		},
	}}, nil
}

// GenSchemaGithubConnectorV3 returns tfsdk.Schema definition for GithubConnectorV3
func GenSchemaGithubConnectorV3(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata holds resource metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"api_endpoint_url": {
					Description: "APIEndpointURL is the URL of the API endpoint of the Github instance this connector is for.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"client_id": {
					Description: "ClientID is the Github OAuth app client ID.",
					Required:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"client_secret": {
					Description: "ClientSecret is the Github OAuth app client secret.",
					Required:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"display": {
					Description: "Display is the connector display name.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"endpoint_url": {
					Description: "EndpointURL is the URL of the GitHub instance this connector is for.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"redirect_url": {
					Description: "RedirectURL is the authorization callback URL.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"teams_to_logins": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"kubernetes_groups": {
							Description: "KubeGroups is a list of allowed kubernetes groups for this org/team.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"kubernetes_users": {
							Description: "KubeUsers is a list of allowed kubernetes users to impersonate for this org/team.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"logins": {
							Description: "Logins is a list of allowed logins for this org/team.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"organization": {
							Description: "Organization is a Github organization a user belongs to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"team": {
							Description: "Team is a team within the organization a user belongs to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "TeamsToLogins maps Github team memberships onto allowed logins/roles.  DELETE IN 11.0.0 Deprecated: use GithubTeamsToRoles instead.",
					Optional:    true,
				},
				"teams_to_roles": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"organization": {
							Description: "Organization is a Github organization a user belongs to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
						"roles": {
							Description: "Roles is a list of allowed logins for this org/team.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"team": {
							Description: "Team is a team within the organization a user belongs to.",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "TeamsToRoles maps Github team memberships onto allowed roles.",
					Optional:    true,
				},
			}),
			Description: "Spec is an Github connector specification.",
			Required:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
			Validators:    []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{UseVersionBetween(3, 3)},
		},
	}}, nil
}

// GenSchemaTrustedClusterV2 returns tfsdk.Schema definition for TrustedClusterV2
func GenSchemaTrustedClusterV2(ctx context.Context) (github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema, github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics) {
	return github_com_hashicorp_terraform_plugin_framework_tfsdk.Schema{Attributes: map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
		"id": {
			Computed:      true,
			Optional:      false,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Required:      false,
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"kind": {
			Computed:      true,
			Description:   "Kind is a resource kind.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"metadata": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"description": {
					Description: "Description is object description",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"expires": {
					Description: "Expires is a global expiry time header can be set on any resource in the system.",
					Optional:    true,
					Type:        UseRFC3339Time(),
					Validators:  []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributeValidator{MustTimeBeInFuture()},
				},
				"labels": {
					Description: "Labels is a set of labels",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.MapType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"name": {
					Description:   "Name is an object name",
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.RequiresReplace()},
					Required:      true,
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"namespace": {
					Computed:      true,
					Description:   "Namespace is object namespace. The field should be called \"namespace\" when it returns in Teleport 2.4.",
					Optional:      true,
					PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
					Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Metadata holds resource metadata.",
			Optional:    true,
		},
		"spec": {
			Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.SingleNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
				"enabled": {
					Description: "Enabled is a bool that indicates if the TrustedCluster is enabled or disabled. Setting Enabled to false has a side effect of deleting the user and host certificate authority (CA).",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.BoolType,
				},
				"role_map": {
					Attributes: github_com_hashicorp_terraform_plugin_framework_tfsdk.ListNestedAttributes(map[string]github_com_hashicorp_terraform_plugin_framework_tfsdk.Attribute{
						"local": {
							Description: "Local specifies local roles to map to",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
						},
						"remote": {
							Description: "Remote specifies remote role name to map from",
							Optional:    true,
							Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
						},
					}),
					Description: "RoleMap specifies role mappings to remote roles.",
					Optional:    true,
				},
				"roles": {
					Description: "Roles is a list of roles that users will be assuming when connecting to this cluster.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.ListType{ElemType: github_com_hashicorp_terraform_plugin_framework_types.StringType},
				},
				"token": {
					Description: "Token is the authorization token provided by another cluster needed by this cluster to join.",
					Optional:    true,
					Sensitive:   true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"tunnel_addr": {
					Description: "ReverseTunnelAddress is the address of the SSH proxy server of the cluster to join. If not set, it is derived from <metadata.name>:<default reverse tunnel port>.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
				"web_proxy_addr": {
					Description: "ProxyAddress is the address of the web proxy server of the cluster to join. If not set, it is derived from <metadata.name>:<default web proxy server port>.",
					Optional:    true,
					Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
				},
			}),
			Description: "Spec is a Trusted Cluster specification.",
			Required:    true,
		},
		"sub_kind": {
			Description: "SubKind is an optional resource sub kind, used in some resources.",
			Optional:    true,
			Type:        github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
		"version": {
			Computed:      true,
			Description:   "Version is a resource version.",
			Optional:      true,
			PlanModifiers: []github_com_hashicorp_terraform_plugin_framework_tfsdk.AttributePlanModifier{github_com_hashicorp_terraform_plugin_framework_tfsdk.UseStateForUnknown()},
			Type:          github_com_hashicorp_terraform_plugin_framework_types.StringType,
		},
	}}, nil
}

// CopyDatabaseV3FromTerraform copies contents of the source Terraform object into a target struct
func CopyDatabaseV3FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.DatabaseV3) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"DatabaseV3.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"DatabaseV3.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"DatabaseV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"DatabaseV3.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"DatabaseV3.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.DatabaseSpecV3{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["protocol"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Protocol"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Protocol", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Protocol = t
							}
						}
					}
					{
						a, ok := tf.Attrs["uri"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.URI"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.URI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.URI = t
							}
						}
					}
					{
						a, ok := tf.Attrs["ca_cert"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.CACert"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.CACert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.CACert = t
							}
						}
					}
					{
						a, ok := tf.Attrs["dynamic_labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.DynamicLabels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.DynamicLabels = make(map[string]github_com_gravitational_teleport_api_types.CommandLabelV2, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.CommandLabelV2
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["period"]
													if !ok {
														diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.DynamicLabels.Period"})
													} else {
														v, ok := a.(DurationValue)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Period", "DurationValue"})
														} else {
															var t github_com_gravitational_teleport_api_types.Duration
															if !v.Null && !v.Unknown {
																t = github_com_gravitational_teleport_api_types.Duration(v.Value)
															}
															obj.Period = t
														}
													}
												}
												{
													a, ok := tf.Attrs["command"]
													if !ok {
														diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.DynamicLabels.Command"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Command = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Command", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Command[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["result"]
													if !ok {
														diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.DynamicLabels.Result"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Result", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Result = t
														}
													}
												}
											}
											obj.DynamicLabels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["aws"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.AWS = github_com_gravitational_teleport_api_types.AWS{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.AWS
									{
										a, ok := tf.Attrs["region"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.Region"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.Region", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Region = t
											}
										}
									}
									{
										a, ok := tf.Attrs["redshift"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.Redshift"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.Redshift", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Redshift = github_com_gravitational_teleport_api_types.Redshift{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.Redshift
													{
														a, ok := tf.Attrs["cluster_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.Redshift.ClusterID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.Redshift.ClusterID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ClusterID = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["rds"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDS"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.RDS = github_com_gravitational_teleport_api_types.RDS{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.RDS
													{
														a, ok := tf.Attrs["instance_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDS.InstanceID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.InstanceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.InstanceID = t
															}
														}
													}
													{
														a, ok := tf.Attrs["cluster_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDS.ClusterID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.ClusterID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ClusterID = t
															}
														}
													}
													{
														a, ok := tf.Attrs["resource_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDS.ResourceID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ResourceID = t
															}
														}
													}
													{
														a, ok := tf.Attrs["iam_auth"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDS.IAMAuth"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.IAMAuth", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
															} else {
																var t bool
																if !v.Null && !v.Unknown {
																	t = bool(v.Value)
																}
																obj.IAMAuth = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["account_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.AccountID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.AccountID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.AccountID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["elasticache"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.ElastiCache = github_com_gravitational_teleport_api_types.ElastiCache{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.ElastiCache
													{
														a, ok := tf.Attrs["replication_group_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.ReplicationGroupID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.ReplicationGroupID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ReplicationGroupID = t
															}
														}
													}
													{
														a, ok := tf.Attrs["user_group_ids"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.UserGroupIDs = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.UserGroupIDs[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["transit_encryption_enabled"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.TransitEncryptionEnabled"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.TransitEncryptionEnabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
															} else {
																var t bool
																if !v.Null && !v.Unknown {
																	t = bool(v.Value)
																}
																obj.TransitEncryptionEnabled = t
															}
														}
													}
													{
														a, ok := tf.Attrs["endpoint_type"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.EndpointType"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.EndpointType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.EndpointType = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["secret_store"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.SecretStore"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.SecretStore = github_com_gravitational_teleport_api_types.SecretStore{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.SecretStore
													{
														a, ok := tf.Attrs["key_prefix"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.SecretStore.KeyPrefix"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore.KeyPrefix", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.KeyPrefix = t
															}
														}
													}
													{
														a, ok := tf.Attrs["kms_key_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.SecretStore.KMSKeyID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore.KMSKeyID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.KMSKeyID = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["memorydb"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.MemoryDB = github_com_gravitational_teleport_api_types.MemoryDB{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.MemoryDB
													{
														a, ok := tf.Attrs["cluster_name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.ClusterName"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.ClusterName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ClusterName = t
															}
														}
													}
													{
														a, ok := tf.Attrs["acl_name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.ACLName"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.ACLName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ACLName = t
															}
														}
													}
													{
														a, ok := tf.Attrs["tls_enabled"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.TLSEnabled"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.TLSEnabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
															} else {
																var t bool
																if !v.Null && !v.Unknown {
																	t = bool(v.Value)
																}
																obj.TLSEnabled = t
															}
														}
													}
													{
														a, ok := tf.Attrs["endpoint_type"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.EndpointType"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.EndpointType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.EndpointType = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["rdsproxy"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.RDSProxy = github_com_gravitational_teleport_api_types.RDSProxy{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.RDSProxy
													{
														a, ok := tf.Attrs["name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.Name"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.Name = t
															}
														}
													}
													{
														a, ok := tf.Attrs["custom_endpoint_name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.CustomEndpointName"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.CustomEndpointName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.CustomEndpointName = t
															}
														}
													}
													{
														a, ok := tf.Attrs["resource_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.ResourceID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ResourceID = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["redshift_serverless"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.RedshiftServerless = github_com_gravitational_teleport_api_types.RedshiftServerless{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.RedshiftServerless
													{
														a, ok := tf.Attrs["workgroup_name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupName"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.WorkgroupName = t
															}
														}
													}
													{
														a, ok := tf.Attrs["endpoint_name"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.EndpointName"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.EndpointName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.EndpointName = t
															}
														}
													}
													{
														a, ok := tf.Attrs["workgroup_id"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupID"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.WorkgroupID = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["external_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.ExternalID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.ExternalID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ExternalID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["assume_role_arn"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AWS.AssumeRoleARN"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AWS.AssumeRoleARN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.AssumeRoleARN = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["gcp"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.GCP"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.GCP", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.GCP = github_com_gravitational_teleport_api_types.GCPCloudSQL{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.GCP
									{
										a, ok := tf.Attrs["project_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.GCP.ProjectID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.GCP.ProjectID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ProjectID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["instance_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.GCP.InstanceID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.GCP.InstanceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.InstanceID = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["azure"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Azure = github_com_gravitational_teleport_api_types.Azure{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.Azure
									{
										a, ok := tf.Attrs["name"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure.Name"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Name = t
											}
										}
									}
									{
										a, ok := tf.Attrs["resource_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure.ResourceID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ResourceID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["redis"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure.Redis"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure.Redis", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Redis = github_com_gravitational_teleport_api_types.AzureRedis{}
												if !v.Null && !v.Unknown {
													tf := v
													obj := &obj.Redis
													{
														a, ok := tf.Attrs["clustering_policy"]
														if !ok {
															diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure.Redis.ClusteringPolicy"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure.Redis.ClusteringPolicy", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.ClusteringPolicy = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["is_flexi_server"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.Azure.IsFlexiServer"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.Azure.IsFlexiServer", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t bool
												if !v.Null && !v.Unknown {
													t = bool(v.Value)
												}
												obj.IsFlexiServer = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["tls"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.TLS"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.TLS", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.TLS = github_com_gravitational_teleport_api_types.DatabaseTLS{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.TLS
									{
										a, ok := tf.Attrs["mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.TLS.Mode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.TLS.Mode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
											} else {
												var t github_com_gravitational_teleport_api_types.DatabaseTLSMode
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.DatabaseTLSMode(v.Value)
												}
												obj.Mode = t
											}
										}
									}
									{
										a, ok := tf.Attrs["ca_cert"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.TLS.CACert"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.TLS.CACert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.CACert = t
											}
										}
									}
									{
										a, ok := tf.Attrs["server_name"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.TLS.ServerName"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.TLS.ServerName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ServerName = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["ad"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.AD = github_com_gravitational_teleport_api_types.AD{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.AD
									{
										a, ok := tf.Attrs["keytab_file"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.KeytabFile"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.KeytabFile", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.KeytabFile = t
											}
										}
									}
									{
										a, ok := tf.Attrs["krb5_file"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.Krb5File"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.Krb5File", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Krb5File = t
											}
										}
									}
									{
										a, ok := tf.Attrs["domain"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.Domain"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.Domain", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Domain = t
											}
										}
									}
									{
										a, ok := tf.Attrs["spn"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.SPN"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.SPN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.SPN = t
											}
										}
									}
									{
										a, ok := tf.Attrs["ldap_cert"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.LDAPCert"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.LDAPCert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.LDAPCert = t
											}
										}
									}
									{
										a, ok := tf.Attrs["kdc_host_name"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.AD.KDCHostName"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.AD.KDCHostName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.KDCHostName = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["mysql"]
						if !ok {
							diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.MySQL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.MySQL", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.MySQL = github_com_gravitational_teleport_api_types.MySQLOptions{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.MySQL
									{
										a, ok := tf.Attrs["server_version"]
										if !ok {
											diags.Append(attrReadMissingDiag{"DatabaseV3.Spec.MySQL.ServerVersion"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"DatabaseV3.Spec.MySQL.ServerVersion", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ServerVersion = t
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyDatabaseV3ToTerraform copies contents of the source Terraform object into a target struct
func CopyDatabaseV3ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.DatabaseV3, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"DatabaseV3.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"DatabaseV3.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"DatabaseV3.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"DatabaseV3.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"DatabaseV3.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"DatabaseV3.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"DatabaseV3.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["protocol"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Protocol"})
						} else {
							v, ok := tf.Attrs["protocol"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.Protocol", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Protocol", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Protocol) == ""
							}
							v.Value = string(obj.Protocol)
							v.Unknown = false
							tf.Attrs["protocol"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["uri"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.URI"})
						} else {
							v, ok := tf.Attrs["uri"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.URI", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.URI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.URI) == ""
							}
							v.Value = string(obj.URI)
							v.Unknown = false
							tf.Attrs["uri"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["ca_cert"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.CACert"})
						} else {
							v, ok := tf.Attrs["ca_cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.CACert", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.CACert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.CACert) == ""
							}
							v.Value = string(obj.CACert)
							v.Unknown = false
							tf.Attrs["ca_cert"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["dynamic_labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.DynamicLabels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["dynamic_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DynamicLabels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DynamicLabels))
									}
								}
								if obj.DynamicLabels != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									for k, a := range obj.DynamicLabels {
										v, ok := tf.Attrs["dynamic_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["period"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.DynamicLabels.Period"})
												} else {
													v, ok := tf.Attrs["period"].(DurationValue)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.DynamicLabels.Period", err})
														}
														v, ok = i.(DurationValue)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Period", "DurationValue"})
														}
														v.Null = false
													}
													v.Value = time.Duration(obj.Period)
													v.Unknown = false
													tf.Attrs["period"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["command"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.DynamicLabels.Command"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["command"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command))
															}
														}
														if obj.Command != nil {
															t := o.ElemType
															if len(obj.Command) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command))
															}
															for k, a := range obj.Command {
																v, ok := tf.Attrs["command"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.DynamicLabels.Command", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Command) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["command"] = c
													}
												}
											}
											{
												t, ok := tf.AttrTypes["result"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.DynamicLabels.Result"})
												} else {
													v, ok := tf.Attrs["result"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.DynamicLabels.Result", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.DynamicLabels.Result", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Result) == ""
													}
													v.Value = string(obj.Result)
													v.Unknown = false
													tf.Attrs["result"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.DynamicLabels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["dynamic_labels"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["aws"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["aws"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.AWS
									tf := &v
									{
										t, ok := tf.AttrTypes["region"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.Region"})
										} else {
											v, ok := tf.Attrs["region"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.Region", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.Region", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Region) == ""
											}
											v.Value = string(obj.Region)
											v.Unknown = false
											tf.Attrs["region"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["redshift"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.Redshift"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.Redshift", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["redshift"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.Redshift
													tf := &v
													{
														t, ok := tf.AttrTypes["cluster_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.Redshift.ClusterID"})
														} else {
															v, ok := tf.Attrs["cluster_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.Redshift.ClusterID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.Redshift.ClusterID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ClusterID) == ""
															}
															v.Value = string(obj.ClusterID)
															v.Unknown = false
															tf.Attrs["cluster_id"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["redshift"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["rds"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDS"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["rds"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.RDS
													tf := &v
													{
														t, ok := tf.AttrTypes["instance_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDS.InstanceID"})
														} else {
															v, ok := tf.Attrs["instance_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDS.InstanceID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.InstanceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.InstanceID) == ""
															}
															v.Value = string(obj.InstanceID)
															v.Unknown = false
															tf.Attrs["instance_id"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["cluster_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDS.ClusterID"})
														} else {
															v, ok := tf.Attrs["cluster_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDS.ClusterID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.ClusterID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ClusterID) == ""
															}
															v.Value = string(obj.ClusterID)
															v.Unknown = false
															tf.Attrs["cluster_id"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["resource_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDS.ResourceID"})
														} else {
															v, ok := tf.Attrs["resource_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDS.ResourceID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ResourceID) == ""
															}
															v.Value = string(obj.ResourceID)
															v.Unknown = false
															tf.Attrs["resource_id"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["iam_auth"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDS.IAMAuth"})
														} else {
															v, ok := tf.Attrs["iam_auth"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDS.IAMAuth", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDS.IAMAuth", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
																}
																v.Null = bool(obj.IAMAuth) == false
															}
															v.Value = bool(obj.IAMAuth)
															v.Unknown = false
															tf.Attrs["iam_auth"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["rds"] = v
											}
										}
									}
									{
										t, ok := tf.AttrTypes["account_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.AccountID"})
										} else {
											v, ok := tf.Attrs["account_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.AccountID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.AccountID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.AccountID) == ""
											}
											v.Value = string(obj.AccountID)
											v.Unknown = false
											tf.Attrs["account_id"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["elasticache"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["elasticache"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.ElastiCache
													tf := &v
													{
														t, ok := tf.AttrTypes["replication_group_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.ReplicationGroupID"})
														} else {
															v, ok := tf.Attrs["replication_group_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.ElastiCache.ReplicationGroupID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.ReplicationGroupID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ReplicationGroupID) == ""
															}
															v.Value = string(obj.ReplicationGroupID)
															v.Unknown = false
															tf.Attrs["replication_group_id"] = v
														}
													}
													{
														a, ok := tf.AttrTypes["user_group_ids"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["user_group_ids"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.UserGroupIDs)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.UserGroupIDs))
																	}
																}
																if obj.UserGroupIDs != nil {
																	t := o.ElemType
																	if len(obj.UserGroupIDs) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.UserGroupIDs))
																	}
																	for k, a := range obj.UserGroupIDs {
																		v, ok := tf.Attrs["user_group_ids"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.UserGroupIDs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.UserGroupIDs) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["user_group_ids"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["transit_encryption_enabled"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.TransitEncryptionEnabled"})
														} else {
															v, ok := tf.Attrs["transit_encryption_enabled"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.ElastiCache.TransitEncryptionEnabled", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.TransitEncryptionEnabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
																}
																v.Null = bool(obj.TransitEncryptionEnabled) == false
															}
															v.Value = bool(obj.TransitEncryptionEnabled)
															v.Unknown = false
															tf.Attrs["transit_encryption_enabled"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["endpoint_type"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ElastiCache.EndpointType"})
														} else {
															v, ok := tf.Attrs["endpoint_type"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.ElastiCache.EndpointType", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ElastiCache.EndpointType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.EndpointType) == ""
															}
															v.Value = string(obj.EndpointType)
															v.Unknown = false
															tf.Attrs["endpoint_type"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["elasticache"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["secret_store"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.SecretStore"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["secret_store"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.SecretStore
													tf := &v
													{
														t, ok := tf.AttrTypes["key_prefix"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.SecretStore.KeyPrefix"})
														} else {
															v, ok := tf.Attrs["key_prefix"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.SecretStore.KeyPrefix", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore.KeyPrefix", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.KeyPrefix) == ""
															}
															v.Value = string(obj.KeyPrefix)
															v.Unknown = false
															tf.Attrs["key_prefix"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["kms_key_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.SecretStore.KMSKeyID"})
														} else {
															v, ok := tf.Attrs["kms_key_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.SecretStore.KMSKeyID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.SecretStore.KMSKeyID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.KMSKeyID) == ""
															}
															v.Value = string(obj.KMSKeyID)
															v.Unknown = false
															tf.Attrs["kms_key_id"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["secret_store"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["memorydb"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["memorydb"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.MemoryDB
													tf := &v
													{
														t, ok := tf.AttrTypes["cluster_name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.ClusterName"})
														} else {
															v, ok := tf.Attrs["cluster_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.MemoryDB.ClusterName", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.ClusterName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ClusterName) == ""
															}
															v.Value = string(obj.ClusterName)
															v.Unknown = false
															tf.Attrs["cluster_name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["acl_name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.ACLName"})
														} else {
															v, ok := tf.Attrs["acl_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.MemoryDB.ACLName", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.ACLName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ACLName) == ""
															}
															v.Value = string(obj.ACLName)
															v.Unknown = false
															tf.Attrs["acl_name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["tls_enabled"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.TLSEnabled"})
														} else {
															v, ok := tf.Attrs["tls_enabled"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.MemoryDB.TLSEnabled", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.TLSEnabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
																}
																v.Null = bool(obj.TLSEnabled) == false
															}
															v.Value = bool(obj.TLSEnabled)
															v.Unknown = false
															tf.Attrs["tls_enabled"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["endpoint_type"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.MemoryDB.EndpointType"})
														} else {
															v, ok := tf.Attrs["endpoint_type"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.MemoryDB.EndpointType", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.MemoryDB.EndpointType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.EndpointType) == ""
															}
															v.Value = string(obj.EndpointType)
															v.Unknown = false
															tf.Attrs["endpoint_type"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["memorydb"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["rdsproxy"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["rdsproxy"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.RDSProxy
													tf := &v
													{
														t, ok := tf.AttrTypes["name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.Name"})
														} else {
															v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDSProxy.Name", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Name) == ""
															}
															v.Value = string(obj.Name)
															v.Unknown = false
															tf.Attrs["name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["custom_endpoint_name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.CustomEndpointName"})
														} else {
															v, ok := tf.Attrs["custom_endpoint_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDSProxy.CustomEndpointName", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.CustomEndpointName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.CustomEndpointName) == ""
															}
															v.Value = string(obj.CustomEndpointName)
															v.Unknown = false
															tf.Attrs["custom_endpoint_name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["resource_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RDSProxy.ResourceID"})
														} else {
															v, ok := tf.Attrs["resource_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RDSProxy.ResourceID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RDSProxy.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ResourceID) == ""
															}
															v.Value = string(obj.ResourceID)
															v.Unknown = false
															tf.Attrs["resource_id"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["rdsproxy"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["redshift_serverless"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["redshift_serverless"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.RedshiftServerless
													tf := &v
													{
														t, ok := tf.AttrTypes["workgroup_name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupName"})
														} else {
															v, ok := tf.Attrs["workgroup_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupName", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.WorkgroupName) == ""
															}
															v.Value = string(obj.WorkgroupName)
															v.Unknown = false
															tf.Attrs["workgroup_name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["endpoint_name"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.EndpointName"})
														} else {
															v, ok := tf.Attrs["endpoint_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RedshiftServerless.EndpointName", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.EndpointName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.EndpointName) == ""
															}
															v.Value = string(obj.EndpointName)
															v.Unknown = false
															tf.Attrs["endpoint_name"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["workgroup_id"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupID"})
														} else {
															v, ok := tf.Attrs["workgroup_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupID", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.RedshiftServerless.WorkgroupID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.WorkgroupID) == ""
															}
															v.Value = string(obj.WorkgroupID)
															v.Unknown = false
															tf.Attrs["workgroup_id"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["redshift_serverless"] = v
											}
										}
									}
									{
										t, ok := tf.AttrTypes["external_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.ExternalID"})
										} else {
											v, ok := tf.Attrs["external_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.ExternalID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.ExternalID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ExternalID) == ""
											}
											v.Value = string(obj.ExternalID)
											v.Unknown = false
											tf.Attrs["external_id"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["assume_role_arn"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AWS.AssumeRoleARN"})
										} else {
											v, ok := tf.Attrs["assume_role_arn"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AWS.AssumeRoleARN", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AWS.AssumeRoleARN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.AssumeRoleARN) == ""
											}
											v.Value = string(obj.AssumeRoleARN)
											v.Unknown = false
											tf.Attrs["assume_role_arn"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["aws"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["gcp"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.GCP"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.GCP", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["gcp"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.GCP
									tf := &v
									{
										t, ok := tf.AttrTypes["project_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.GCP.ProjectID"})
										} else {
											v, ok := tf.Attrs["project_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.GCP.ProjectID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.GCP.ProjectID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ProjectID) == ""
											}
											v.Value = string(obj.ProjectID)
											v.Unknown = false
											tf.Attrs["project_id"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["instance_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.GCP.InstanceID"})
										} else {
											v, ok := tf.Attrs["instance_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.GCP.InstanceID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.GCP.InstanceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.InstanceID) == ""
											}
											v.Value = string(obj.InstanceID)
											v.Unknown = false
											tf.Attrs["instance_id"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["gcp"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["azure"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["azure"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.Azure
									tf := &v
									{
										t, ok := tf.AttrTypes["name"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure.Name"})
										} else {
											v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.Azure.Name", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Name) == ""
											}
											v.Value = string(obj.Name)
											v.Unknown = false
											tf.Attrs["name"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["resource_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure.ResourceID"})
										} else {
											v, ok := tf.Attrs["resource_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.Azure.ResourceID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure.ResourceID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ResourceID) == ""
											}
											v.Value = string(obj.ResourceID)
											v.Unknown = false
											tf.Attrs["resource_id"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["redis"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure.Redis"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure.Redis", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["redis"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												{
													obj := obj.Redis
													tf := &v
													{
														t, ok := tf.AttrTypes["clustering_policy"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure.Redis.ClusteringPolicy"})
														} else {
															v, ok := tf.Attrs["clustering_policy"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.Azure.Redis.ClusteringPolicy", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure.Redis.ClusteringPolicy", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.ClusteringPolicy) == ""
															}
															v.Value = string(obj.ClusteringPolicy)
															v.Unknown = false
															tf.Attrs["clustering_policy"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["redis"] = v
											}
										}
									}
									{
										t, ok := tf.AttrTypes["is_flexi_server"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.Azure.IsFlexiServer"})
										} else {
											v, ok := tf.Attrs["is_flexi_server"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.Azure.IsFlexiServer", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.Azure.IsFlexiServer", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.IsFlexiServer) == false
											}
											v.Value = bool(obj.IsFlexiServer)
											v.Unknown = false
											tf.Attrs["is_flexi_server"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["azure"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["tls"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.TLS"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.TLS", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["tls"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.TLS
									tf := &v
									{
										t, ok := tf.AttrTypes["mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.TLS.Mode"})
										} else {
											v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.TLS.Mode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.TLS.Mode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
												}
												v.Null = int64(obj.Mode) == 0
											}
											v.Value = int64(obj.Mode)
											v.Unknown = false
											tf.Attrs["mode"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["ca_cert"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.TLS.CACert"})
										} else {
											v, ok := tf.Attrs["ca_cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.TLS.CACert", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.TLS.CACert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.CACert) == ""
											}
											v.Value = string(obj.CACert)
											v.Unknown = false
											tf.Attrs["ca_cert"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["server_name"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.TLS.ServerName"})
										} else {
											v, ok := tf.Attrs["server_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.TLS.ServerName", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.TLS.ServerName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ServerName) == ""
											}
											v.Value = string(obj.ServerName)
											v.Unknown = false
											tf.Attrs["server_name"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["tls"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["ad"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["ad"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.AD
									tf := &v
									{
										t, ok := tf.AttrTypes["keytab_file"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.KeytabFile"})
										} else {
											v, ok := tf.Attrs["keytab_file"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.KeytabFile", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.KeytabFile", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.KeytabFile) == ""
											}
											v.Value = string(obj.KeytabFile)
											v.Unknown = false
											tf.Attrs["keytab_file"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["krb5_file"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.Krb5File"})
										} else {
											v, ok := tf.Attrs["krb5_file"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.Krb5File", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.Krb5File", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Krb5File) == ""
											}
											v.Value = string(obj.Krb5File)
											v.Unknown = false
											tf.Attrs["krb5_file"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["domain"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.Domain"})
										} else {
											v, ok := tf.Attrs["domain"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.Domain", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.Domain", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Domain) == ""
											}
											v.Value = string(obj.Domain)
											v.Unknown = false
											tf.Attrs["domain"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["spn"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.SPN"})
										} else {
											v, ok := tf.Attrs["spn"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.SPN", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.SPN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.SPN) == ""
											}
											v.Value = string(obj.SPN)
											v.Unknown = false
											tf.Attrs["spn"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["ldap_cert"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.LDAPCert"})
										} else {
											v, ok := tf.Attrs["ldap_cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.LDAPCert", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.LDAPCert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.LDAPCert) == ""
											}
											v.Value = string(obj.LDAPCert)
											v.Unknown = false
											tf.Attrs["ldap_cert"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["kdc_host_name"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.AD.KDCHostName"})
										} else {
											v, ok := tf.Attrs["kdc_host_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.AD.KDCHostName", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.AD.KDCHostName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.KDCHostName) == ""
											}
											v.Value = string(obj.KDCHostName)
											v.Unknown = false
											tf.Attrs["kdc_host_name"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["ad"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["mysql"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.MySQL"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.MySQL", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["mysql"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.MySQL
									tf := &v
									{
										t, ok := tf.AttrTypes["server_version"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"DatabaseV3.Spec.MySQL.ServerVersion"})
										} else {
											v, ok := tf.Attrs["server_version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"DatabaseV3.Spec.MySQL.ServerVersion", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"DatabaseV3.Spec.MySQL.ServerVersion", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ServerVersion) == ""
											}
											v.Value = string(obj.ServerVersion)
											v.Unknown = false
											tf.Attrs["server_version"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["mysql"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyAppV3FromTerraform copies contents of the source Terraform object into a target struct
func CopyAppV3FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.AppV3) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AppV3.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AppV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AppV3.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AppV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AppV3.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AppV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AppV3.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AppV3.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AppV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.AppSpecV3{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["uri"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.URI"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.URI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.URI = t
							}
						}
					}
					{
						a, ok := tf.Attrs["public_addr"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.PublicAddr"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.PublicAddr", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.PublicAddr = t
							}
						}
					}
					{
						a, ok := tf.Attrs["dynamic_labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.DynamicLabels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.DynamicLabels = make(map[string]github_com_gravitational_teleport_api_types.CommandLabelV2, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.CommandLabelV2
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["period"]
													if !ok {
														diags.Append(attrReadMissingDiag{"AppV3.Spec.DynamicLabels.Period"})
													} else {
														v, ok := a.(DurationValue)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels.Period", "DurationValue"})
														} else {
															var t github_com_gravitational_teleport_api_types.Duration
															if !v.Null && !v.Unknown {
																t = github_com_gravitational_teleport_api_types.Duration(v.Value)
															}
															obj.Period = t
														}
													}
												}
												{
													a, ok := tf.Attrs["command"]
													if !ok {
														diags.Append(attrReadMissingDiag{"AppV3.Spec.DynamicLabels.Command"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Command = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels.Command", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Command[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["result"]
													if !ok {
														diags.Append(attrReadMissingDiag{"AppV3.Spec.DynamicLabels.Result"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.DynamicLabels.Result", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Result = t
														}
													}
												}
											}
											obj.DynamicLabels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["insecure_skip_verify"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.InsecureSkipVerify"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.InsecureSkipVerify", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
							} else {
								var t bool
								if !v.Null && !v.Unknown {
									t = bool(v.Value)
								}
								obj.InsecureSkipVerify = t
							}
						}
					}
					{
						a, ok := tf.Attrs["rewrite"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.Rewrite"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Rewrite = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Rewrite = &github_com_gravitational_teleport_api_types.Rewrite{}
									obj := obj.Rewrite
									{
										a, ok := tf.Attrs["redirect"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AppV3.Spec.Rewrite.Redirect"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Redirect", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Redirect = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Redirect", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Redirect[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["headers"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AppV3.Spec.Rewrite.Headers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Headers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Headers = make([]*github_com_gravitational_teleport_api_types.Header, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Headers", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.Header
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.Header{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AppV3.Spec.Rewrite.Headers.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Headers.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["value"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"AppV3.Spec.Rewrite.Headers.Value"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Rewrite.Headers.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Value = t
																		}
																	}
																}
															}
															obj.Headers[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["aws"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.AWS"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.AWS", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.AWS = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.AWS = &github_com_gravitational_teleport_api_types.AppAWS{}
									obj := obj.AWS
									{
										a, ok := tf.Attrs["external_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AppV3.Spec.AWS.ExternalID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.AWS.ExternalID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.ExternalID = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["cloud"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AppV3.Spec.Cloud"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AppV3.Spec.Cloud", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Cloud = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyAppV3ToTerraform copies contents of the source Terraform object into a target struct
func CopyAppV3ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.AppV3, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AppV3.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AppV3.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AppV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AppV3.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AppV3.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AppV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AppV3.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AppV3.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AppV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AppV3.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AppV3.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AppV3.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["uri"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.URI"})
						} else {
							v, ok := tf.Attrs["uri"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Spec.URI", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.URI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.URI) == ""
							}
							v.Value = string(obj.URI)
							v.Unknown = false
							tf.Attrs["uri"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["public_addr"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.PublicAddr"})
						} else {
							v, ok := tf.Attrs["public_addr"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Spec.PublicAddr", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.PublicAddr", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.PublicAddr) == ""
							}
							v.Value = string(obj.PublicAddr)
							v.Unknown = false
							tf.Attrs["public_addr"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["dynamic_labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.DynamicLabels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.DynamicLabels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["dynamic_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DynamicLabels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DynamicLabels))
									}
								}
								if obj.DynamicLabels != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									for k, a := range obj.DynamicLabels {
										v, ok := tf.Attrs["dynamic_labels"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["period"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"AppV3.Spec.DynamicLabels.Period"})
												} else {
													v, ok := tf.Attrs["period"].(DurationValue)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"AppV3.Spec.DynamicLabels.Period", err})
														}
														v, ok = i.(DurationValue)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.DynamicLabels.Period", "DurationValue"})
														}
														v.Null = false
													}
													v.Value = time.Duration(obj.Period)
													v.Unknown = false
													tf.Attrs["period"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["command"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"AppV3.Spec.DynamicLabels.Command"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["command"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command))
															}
														}
														if obj.Command != nil {
															t := o.ElemType
															if len(obj.Command) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Command))
															}
															for k, a := range obj.Command {
																v, ok := tf.Attrs["command"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"AppV3.Spec.DynamicLabels.Command", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.DynamicLabels.Command", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Command) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["command"] = c
													}
												}
											}
											{
												t, ok := tf.AttrTypes["result"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"AppV3.Spec.DynamicLabels.Result"})
												} else {
													v, ok := tf.Attrs["result"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"AppV3.Spec.DynamicLabels.Result", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.DynamicLabels.Result", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Result) == ""
													}
													v.Value = string(obj.Result)
													v.Unknown = false
													tf.Attrs["result"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.DynamicLabels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["dynamic_labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["insecure_skip_verify"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.InsecureSkipVerify"})
						} else {
							v, ok := tf.Attrs["insecure_skip_verify"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Spec.InsecureSkipVerify", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.InsecureSkipVerify", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
								}
								v.Null = bool(obj.InsecureSkipVerify) == false
							}
							v.Value = bool(obj.InsecureSkipVerify)
							v.Unknown = false
							tf.Attrs["insecure_skip_verify"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["rewrite"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.Rewrite"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["rewrite"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Rewrite == nil {
									v.Null = true
								} else {
									obj := obj.Rewrite
									tf := &v
									{
										a, ok := tf.AttrTypes["redirect"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AppV3.Spec.Rewrite.Redirect"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite.Redirect", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["redirect"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Redirect)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Redirect))
													}
												}
												if obj.Redirect != nil {
													t := o.ElemType
													if len(obj.Redirect) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Redirect))
													}
													for k, a := range obj.Redirect {
														v, ok := tf.Attrs["redirect"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AppV3.Spec.Rewrite.Redirect", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite.Redirect", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Redirect) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["redirect"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["headers"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AppV3.Spec.Rewrite.Headers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite.Headers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["headers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Headers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Headers))
													}
												}
												if obj.Headers != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Headers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Headers))
													}
													for k, a := range obj.Headers {
														v, ok := tf.Attrs["headers"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AppV3.Spec.Rewrite.Headers.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AppV3.Spec.Rewrite.Headers.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite.Headers.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["value"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"AppV3.Spec.Rewrite.Headers.Value"})
																} else {
																	v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"AppV3.Spec.Rewrite.Headers.Value", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Rewrite.Headers.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Value) == ""
																	}
																	v.Value = string(obj.Value)
																	v.Unknown = false
																	tf.Attrs["value"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Headers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["headers"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["rewrite"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["aws"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.AWS"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.AWS", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["aws"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.AWS == nil {
									v.Null = true
								} else {
									obj := obj.AWS
									tf := &v
									{
										t, ok := tf.AttrTypes["external_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AppV3.Spec.AWS.ExternalID"})
										} else {
											v, ok := tf.Attrs["external_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AppV3.Spec.AWS.ExternalID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.AWS.ExternalID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.ExternalID) == ""
											}
											v.Value = string(obj.ExternalID)
											v.Unknown = false
											tf.Attrs["external_id"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["aws"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["cloud"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AppV3.Spec.Cloud"})
						} else {
							v, ok := tf.Attrs["cloud"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AppV3.Spec.Cloud", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AppV3.Spec.Cloud", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Cloud) == ""
							}
							v.Value = string(obj.Cloud)
							v.Unknown = false
							tf.Attrs["cloud"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyProvisionTokenV2FromTerraform copies contents of the source Terraform object into a target struct
func CopyProvisionTokenV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.ProvisionTokenV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ProvisionTokenV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Roles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Roles = make([]github_com_gravitational_teleport_api_types.SystemRole, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t github_com_gravitational_teleport_api_types.SystemRole
											if !v.Null && !v.Unknown {
												t = github_com_gravitational_teleport_api_types.SystemRole(v.Value)
											}
											obj.Roles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["allow"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Allow"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Allow = make([]*github_com_gravitational_teleport_api_types.TokenRule, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t *github_com_gravitational_teleport_api_types.TokenRule
											if !v.Null && !v.Unknown {
												tf := v
												t = &github_com_gravitational_teleport_api_types.TokenRule{}
												obj := t
												{
													a, ok := tf.Attrs["aws_account"]
													if !ok {
														diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSAccount"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AWSAccount = t
														}
													}
												}
												{
													a, ok := tf.Attrs["aws_regions"]
													if !ok {
														diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.AWSRegions = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.AWSRegions[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["aws_role"]
													if !ok {
														diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSRole"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRole", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AWSRole = t
														}
													}
												}
												{
													a, ok := tf.Attrs["aws_arn"]
													if !ok {
														diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSARN"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSARN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AWSARN = t
														}
													}
												}
											}
											obj.Allow[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["aws_iid_ttl"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.AWSIIDTTL"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.AWSIIDTTL", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.AWSIIDTTL = t
							}
						}
					}
					{
						a, ok := tf.Attrs["join_method"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.JoinMethod"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.JoinMethod", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t github_com_gravitational_teleport_api_types.JoinMethod
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.JoinMethod(v.Value)
								}
								obj.JoinMethod = t
							}
						}
					}
					{
						a, ok := tf.Attrs["bot_name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.BotName"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.BotName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.BotName = t
							}
						}
					}
					{
						a, ok := tf.Attrs["suggested_labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.SuggestedLabels"})
						}
						CopyFromLabels(diags, a, &obj.SuggestedLabels)
					}
					{
						a, ok := tf.Attrs["github"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.GitHub = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.GitHub = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitHub{}
									obj := obj.GitHub
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitHub_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitHub_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitHub_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["sub"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Sub"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Sub", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Sub = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["repository"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Repository"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Repository", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Repository = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["repository_owner"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RepositoryOwner"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RepositoryOwner", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.RepositoryOwner = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["workflow"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Workflow"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Workflow", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Workflow = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["environment"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Environment"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Environment", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Environment = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["actor"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Actor"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Actor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Actor = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["ref"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Ref"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Ref", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Ref = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["ref_type"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RefType"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RefType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.RefType = t
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["enterprise_server_host"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitHub.EnterpriseServerHost"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.EnterpriseServerHost", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.EnterpriseServerHost = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["circleci"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.CircleCI"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.CircleCI = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.CircleCI = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2CircleCI{}
									obj := obj.CircleCI
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2CircleCI_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2CircleCI_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2CircleCI_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["project_id"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ProjectID"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ProjectID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.ProjectID = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["context_id"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ContextID"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ContextID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.ContextID = t
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["organization_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.CircleCI.OrganizationID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.OrganizationID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.OrganizationID = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["suggested_agent_matcher_labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.SuggestedAgentMatcherLabels"})
						}
						CopyFromLabels(diags, a, &obj.SuggestedAgentMatcherLabels)
					}
					{
						a, ok := tf.Attrs["kubernetes"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Kubernetes"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Kubernetes = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Kubernetes = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Kubernetes{}
									obj := obj.Kubernetes
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Kubernetes_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Kubernetes_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Kubernetes_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["service_account"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow.ServiceAccount"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow.ServiceAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.ServiceAccount = t
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["azure"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Azure"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Azure = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Azure = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Azure{}
									obj := obj.Azure
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Azure_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Azure_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2Azure_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["subscription"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow.Subscription"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.Subscription", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Subscription = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["resource_groups"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.ResourceGroups = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.ResourceGroups[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["gitlab"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.GitLab = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.GitLab = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitLab{}
									obj := obj.GitLab
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitLab_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitLab_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GitLab_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["sub"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Sub"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Sub", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Sub = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["ref"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Ref"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Ref", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Ref = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["ref_type"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.RefType"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.RefType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.RefType = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["namespace_path"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.NamespacePath"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.NamespacePath", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.NamespacePath = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["project_path"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.ProjectPath"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.ProjectPath", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.ProjectPath = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["pipeline_source"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.PipelineSource"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.PipelineSource", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.PipelineSource = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["environment"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Environment"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Environment", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Environment = t
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["domain"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GitLab.Domain"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Domain", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Domain = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["gcp"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GCP"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.GCP = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.GCP = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GCP{}
									obj := obj.GCP
									{
										a, ok := tf.Attrs["allow"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Allow = make([]*github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GCP_Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GCP_Rule
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.ProvisionTokenSpecV2GCP_Rule{}
																obj := t
																{
																	a, ok := tf.Attrs["project_ids"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.ProjectIDs = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.ProjectIDs[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["locations"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Locations = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Locations[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["service_accounts"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.ServiceAccounts = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.ServiceAccounts[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Allow[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyProvisionTokenV2ToTerraform copies contents of the source Terraform object into a target struct
func CopyProvisionTokenV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.ProvisionTokenV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ProvisionTokenV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Roles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
								}
								if obj.Roles != nil {
									t := o.ElemType
									if len(obj.Roles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
									for k, a := range obj.Roles {
										v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Roles", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Roles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["roles"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["allow"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Allow"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
									}
								}
								if obj.Allow != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.Allow) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
									}
									for k, a := range obj.Allow {
										v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										if a == nil {
											v.Null = true
										} else {
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["aws_account"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSAccount"})
												} else {
													v, ok := tf.Attrs["aws_account"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Allow.AWSAccount", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.AWSAccount) == ""
													}
													v.Value = string(obj.AWSAccount)
													v.Unknown = false
													tf.Attrs["aws_account"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["aws_regions"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["aws_regions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRegions)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRegions))
															}
														}
														if obj.AWSRegions != nil {
															t := o.ElemType
															if len(obj.AWSRegions) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRegions))
															}
															for k, a := range obj.AWSRegions {
																v, ok := tf.Attrs["aws_regions"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Allow.AWSRegions", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRegions", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.AWSRegions) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["aws_regions"] = c
													}
												}
											}
											{
												t, ok := tf.AttrTypes["aws_role"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSRole"})
												} else {
													v, ok := tf.Attrs["aws_role"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Allow.AWSRole", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSRole", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.AWSRole) == ""
													}
													v.Value = string(obj.AWSRole)
													v.Unknown = false
													tf.Attrs["aws_role"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["aws_arn"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Allow.AWSARN"})
												} else {
													v, ok := tf.Attrs["aws_arn"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Allow.AWSARN", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Allow.AWSARN", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.AWSARN) == ""
													}
													v.Value = string(obj.AWSARN)
													v.Unknown = false
													tf.Attrs["aws_arn"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Allow) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["allow"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["aws_iid_ttl"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.AWSIIDTTL"})
						} else {
							v, ok := tf.Attrs["aws_iid_ttl"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.AWSIIDTTL", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.AWSIIDTTL", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.AWSIIDTTL)
							v.Unknown = false
							tf.Attrs["aws_iid_ttl"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["join_method"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.JoinMethod"})
						} else {
							v, ok := tf.Attrs["join_method"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.JoinMethod", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.JoinMethod", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.JoinMethod) == ""
							}
							v.Value = string(obj.JoinMethod)
							v.Unknown = false
							tf.Attrs["join_method"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["bot_name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.BotName"})
						} else {
							v, ok := tf.Attrs["bot_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.BotName", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.BotName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.BotName) == ""
							}
							v.Value = string(obj.BotName)
							v.Unknown = false
							tf.Attrs["bot_name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["suggested_labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.SuggestedLabels"})
						} else {
							v := CopyToLabels(diags, obj.SuggestedLabels, t, tf.Attrs["suggested_labels"])
							tf.Attrs["suggested_labels"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["github"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["github"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.GitHub == nil {
									v.Null = true
								} else {
									obj := obj.GitHub
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["sub"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Sub"})
																} else {
																	v, ok := tf.Attrs["sub"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Sub", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Sub", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Sub) == ""
																	}
																	v.Value = string(obj.Sub)
																	v.Unknown = false
																	tf.Attrs["sub"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["repository"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Repository"})
																} else {
																	v, ok := tf.Attrs["repository"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Repository", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Repository", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Repository) == ""
																	}
																	v.Value = string(obj.Repository)
																	v.Unknown = false
																	tf.Attrs["repository"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["repository_owner"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RepositoryOwner"})
																} else {
																	v, ok := tf.Attrs["repository_owner"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.RepositoryOwner", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RepositoryOwner", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.RepositoryOwner) == ""
																	}
																	v.Value = string(obj.RepositoryOwner)
																	v.Unknown = false
																	tf.Attrs["repository_owner"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["workflow"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Workflow"})
																} else {
																	v, ok := tf.Attrs["workflow"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Workflow", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Workflow", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Workflow) == ""
																	}
																	v.Value = string(obj.Workflow)
																	v.Unknown = false
																	tf.Attrs["workflow"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["environment"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Environment"})
																} else {
																	v, ok := tf.Attrs["environment"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Environment", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Environment", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Environment) == ""
																	}
																	v.Value = string(obj.Environment)
																	v.Unknown = false
																	tf.Attrs["environment"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["actor"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Actor"})
																} else {
																	v, ok := tf.Attrs["actor"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Actor", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Actor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Actor) == ""
																	}
																	v.Value = string(obj.Actor)
																	v.Unknown = false
																	tf.Attrs["actor"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["ref"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Ref"})
																} else {
																	v, ok := tf.Attrs["ref"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.Ref", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.Ref", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Ref) == ""
																	}
																	v.Value = string(obj.Ref)
																	v.Unknown = false
																	tf.Attrs["ref"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["ref_type"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RefType"})
																} else {
																	v, ok := tf.Attrs["ref_type"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.Allow.RefType", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.Allow.RefType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.RefType) == ""
																	}
																	v.Value = string(obj.RefType)
																	v.Unknown = false
																	tf.Attrs["ref_type"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["enterprise_server_host"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitHub.EnterpriseServerHost"})
										} else {
											v, ok := tf.Attrs["enterprise_server_host"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitHub.EnterpriseServerHost", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitHub.EnterpriseServerHost", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.EnterpriseServerHost) == ""
											}
											v.Value = string(obj.EnterpriseServerHost)
											v.Unknown = false
											tf.Attrs["enterprise_server_host"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["github"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["circleci"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.CircleCI"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["circleci"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.CircleCI == nil {
									v.Null = true
								} else {
									obj := obj.CircleCI
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["project_id"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ProjectID"})
																} else {
																	v, ok := tf.Attrs["project_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.CircleCI.Allow.ProjectID", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ProjectID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.ProjectID) == ""
																	}
																	v.Value = string(obj.ProjectID)
																	v.Unknown = false
																	tf.Attrs["project_id"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["context_id"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ContextID"})
																} else {
																	v, ok := tf.Attrs["context_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.CircleCI.Allow.ContextID", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.Allow.ContextID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.ContextID) == ""
																	}
																	v.Value = string(obj.ContextID)
																	v.Unknown = false
																	tf.Attrs["context_id"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["organization_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.CircleCI.OrganizationID"})
										} else {
											v, ok := tf.Attrs["organization_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.CircleCI.OrganizationID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.CircleCI.OrganizationID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.OrganizationID) == ""
											}
											v.Value = string(obj.OrganizationID)
											v.Unknown = false
											tf.Attrs["organization_id"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["circleci"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["suggested_agent_matcher_labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.SuggestedAgentMatcherLabels"})
						} else {
							v := CopyToLabels(diags, obj.SuggestedAgentMatcherLabels, t, tf.Attrs["suggested_agent_matcher_labels"])
							tf.Attrs["suggested_agent_matcher_labels"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["kubernetes"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Kubernetes"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["kubernetes"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Kubernetes == nil {
									v.Null = true
								} else {
									obj := obj.Kubernetes
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["service_account"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow.ServiceAccount"})
																} else {
																	v, ok := tf.Attrs["service_account"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Kubernetes.Allow.ServiceAccount", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Kubernetes.Allow.ServiceAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.ServiceAccount) == ""
																	}
																	v.Value = string(obj.ServiceAccount)
																	v.Unknown = false
																	tf.Attrs["service_account"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["kubernetes"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["azure"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Azure"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Azure", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["azure"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Azure == nil {
									v.Null = true
								} else {
									obj := obj.Azure
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["subscription"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow.Subscription"})
																} else {
																	v, ok := tf.Attrs["subscription"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Azure.Allow.Subscription", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.Subscription", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Subscription) == ""
																	}
																	v.Value = string(obj.Subscription)
																	v.Unknown = false
																	tf.Attrs["subscription"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["resource_groups"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["resource_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ResourceGroups)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ResourceGroups))
																			}
																		}
																		if obj.ResourceGroups != nil {
																			t := o.ElemType
																			if len(obj.ResourceGroups) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ResourceGroups))
																			}
																			for k, a := range obj.ResourceGroups {
																				v, ok := tf.Attrs["resource_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.Azure.Allow.ResourceGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.ResourceGroups) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["resource_groups"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["azure"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["gitlab"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["gitlab"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.GitLab == nil {
									v.Null = true
								} else {
									obj := obj.GitLab
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["sub"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Sub"})
																} else {
																	v, ok := tf.Attrs["sub"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.Sub", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Sub", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Sub) == ""
																	}
																	v.Value = string(obj.Sub)
																	v.Unknown = false
																	tf.Attrs["sub"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["ref"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Ref"})
																} else {
																	v, ok := tf.Attrs["ref"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.Ref", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Ref", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Ref) == ""
																	}
																	v.Value = string(obj.Ref)
																	v.Unknown = false
																	tf.Attrs["ref"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["ref_type"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.RefType"})
																} else {
																	v, ok := tf.Attrs["ref_type"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.RefType", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.RefType", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.RefType) == ""
																	}
																	v.Value = string(obj.RefType)
																	v.Unknown = false
																	tf.Attrs["ref_type"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["namespace_path"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.NamespacePath"})
																} else {
																	v, ok := tf.Attrs["namespace_path"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.NamespacePath", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.NamespacePath", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.NamespacePath) == ""
																	}
																	v.Value = string(obj.NamespacePath)
																	v.Unknown = false
																	tf.Attrs["namespace_path"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["project_path"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.ProjectPath"})
																} else {
																	v, ok := tf.Attrs["project_path"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.ProjectPath", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.ProjectPath", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.ProjectPath) == ""
																	}
																	v.Value = string(obj.ProjectPath)
																	v.Unknown = false
																	tf.Attrs["project_path"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["pipeline_source"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.PipelineSource"})
																} else {
																	v, ok := tf.Attrs["pipeline_source"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.PipelineSource", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.PipelineSource", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.PipelineSource) == ""
																	}
																	v.Value = string(obj.PipelineSource)
																	v.Unknown = false
																	tf.Attrs["pipeline_source"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["environment"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Environment"})
																} else {
																	v, ok := tf.Attrs["environment"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Allow.Environment", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Allow.Environment", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Environment) == ""
																	}
																	v.Value = string(obj.Environment)
																	v.Unknown = false
																	tf.Attrs["environment"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["domain"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GitLab.Domain"})
										} else {
											v, ok := tf.Attrs["domain"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GitLab.Domain", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GitLab.Domain", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Domain) == ""
											}
											v.Value = string(obj.Domain)
											v.Unknown = false
											tf.Attrs["domain"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["gitlab"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["gcp"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GCP"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["gcp"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.GCP == nil {
									v.Null = true
								} else {
									obj := obj.GCP
									tf := &v
									{
										a, ok := tf.AttrTypes["allow"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
												}
												if obj.Allow != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Allow) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Allow))
													}
													for k, a := range obj.Allow {
														v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																a, ok := tf.AttrTypes["project_ids"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["project_ids"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ProjectIDs)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ProjectIDs))
																			}
																		}
																		if obj.ProjectIDs != nil {
																			t := o.ElemType
																			if len(obj.ProjectIDs) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ProjectIDs))
																			}
																			for k, a := range obj.ProjectIDs {
																				v, ok := tf.Attrs["project_ids"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ProjectIDs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.ProjectIDs) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["project_ids"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["locations"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["locations"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Locations)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Locations))
																			}
																		}
																		if obj.Locations != nil {
																			t := o.ElemType
																			if len(obj.Locations) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Locations))
																			}
																			for k, a := range obj.Locations {
																				v, ok := tf.Attrs["locations"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GCP.Allow.Locations", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.Locations", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Locations) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["locations"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["service_accounts"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ServiceAccounts)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ServiceAccounts))
																			}
																		}
																		if obj.ServiceAccounts != nil {
																			t := o.ElemType
																			if len(obj.ServiceAccounts) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ServiceAccounts))
																			}
																			for k, a := range obj.ServiceAccounts {
																				v, ok := tf.Attrs["service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"ProvisionTokenV2.Spec.GCP.Allow.ServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.ServiceAccounts) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["service_accounts"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Allow) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["allow"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["gcp"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyClusterNetworkingConfigV2FromTerraform copies contents of the source Terraform object into a target struct
func CopyClusterNetworkingConfigV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.ClusterNetworkingConfigV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.ClusterNetworkingConfigSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["client_idle_timeout"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeout"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeout", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.ClientIdleTimeout = t
							}
						}
					}
					{
						a, ok := tf.Attrs["keep_alive_interval"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveInterval"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveInterval", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.KeepAliveInterval = t
							}
						}
					}
					{
						a, ok := tf.Attrs["keep_alive_count_max"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveCountMax"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveCountMax", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t int64
								if !v.Null && !v.Unknown {
									t = int64(v.Value)
								}
								obj.KeepAliveCountMax = t
							}
						}
					}
					{
						a, ok := tf.Attrs["session_control_timeout"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.SessionControlTimeout"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.SessionControlTimeout", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.SessionControlTimeout = t
							}
						}
					}
					{
						a, ok := tf.Attrs["idle_timeout_message"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeoutMessage"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeoutMessage", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ClientIdleTimeoutMessage = t
							}
						}
					}
					{
						a, ok := tf.Attrs["web_idle_timeout"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.WebIdleTimeout"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.WebIdleTimeout", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.WebIdleTimeout = t
							}
						}
					}
					{
						a, ok := tf.Attrs["proxy_listener_mode"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.ProxyListenerMode"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ProxyListenerMode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t github_com_gravitational_teleport_api_types.ProxyListenerMode
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.ProxyListenerMode(v.Value)
								}
								obj.ProxyListenerMode = t
							}
						}
					}
					{
						a, ok := tf.Attrs["routing_strategy"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.RoutingStrategy"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.RoutingStrategy", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t github_com_gravitational_teleport_api_types.RoutingStrategy
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.RoutingStrategy(v.Value)
								}
								obj.RoutingStrategy = t
							}
						}
					}
					{
						a, ok := tf.Attrs["tunnel_strategy"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.TunnelStrategy = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.TunnelStrategy = &github_com_gravitational_teleport_api_types.TunnelStrategyV1{}
									obj := obj.TunnelStrategy
									obj.Strategy = nil
									{
										a, ok := tf.Attrs["agent_mesh"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												if !v.Null && !v.Unknown {
													b := &github_com_gravitational_teleport_api_types.AgentMeshTunnelStrategy{}
													obj.Strategy = &github_com_gravitational_teleport_api_types.TunnelStrategyV1_AgentMesh{AgentMesh: b}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["proxy_peering"]
										if !ok {
											diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												if !v.Null && !v.Unknown {
													b := &github_com_gravitational_teleport_api_types.ProxyPeeringTunnelStrategy{}
													obj.Strategy = &github_com_gravitational_teleport_api_types.TunnelStrategyV1_ProxyPeering{ProxyPeering: b}
													obj := b
													tf := v
													{
														a, ok := tf.Attrs["agent_connection_count"]
														if !ok {
															diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering.AgentConnectionCount"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering.AgentConnectionCount", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
															} else {
																var t int64
																if !v.Null && !v.Unknown {
																	t = int64(v.Value)
																}
																obj.AgentConnectionCount = t
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["proxy_ping_interval"]
						if !ok {
							diags.Append(attrReadMissingDiag{"ClusterNetworkingConfigV2.Spec.ProxyPingInterval"})
						} else {
							v, ok := a.(DurationValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ProxyPingInterval", "DurationValue"})
							} else {
								var t github_com_gravitational_teleport_api_types.Duration
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.Duration(v.Value)
								}
								obj.ProxyPingInterval = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyClusterNetworkingConfigV2ToTerraform copies contents of the source Terraform object into a target struct
func CopyClusterNetworkingConfigV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.ClusterNetworkingConfigV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["client_idle_timeout"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeout"})
						} else {
							v, ok := tf.Attrs["client_idle_timeout"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeout", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeout", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.ClientIdleTimeout)
							v.Unknown = false
							tf.Attrs["client_idle_timeout"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["keep_alive_interval"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveInterval"})
						} else {
							v, ok := tf.Attrs["keep_alive_interval"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.KeepAliveInterval", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveInterval", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.KeepAliveInterval)
							v.Unknown = false
							tf.Attrs["keep_alive_interval"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["keep_alive_count_max"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveCountMax"})
						} else {
							v, ok := tf.Attrs["keep_alive_count_max"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.KeepAliveCountMax", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.KeepAliveCountMax", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.KeepAliveCountMax) == 0
							}
							v.Value = int64(obj.KeepAliveCountMax)
							v.Unknown = false
							tf.Attrs["keep_alive_count_max"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["session_control_timeout"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.SessionControlTimeout"})
						} else {
							v, ok := tf.Attrs["session_control_timeout"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.SessionControlTimeout", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.SessionControlTimeout", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.SessionControlTimeout)
							v.Unknown = false
							tf.Attrs["session_control_timeout"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["idle_timeout_message"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeoutMessage"})
						} else {
							v, ok := tf.Attrs["idle_timeout_message"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeoutMessage", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ClientIdleTimeoutMessage", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ClientIdleTimeoutMessage) == ""
							}
							v.Value = string(obj.ClientIdleTimeoutMessage)
							v.Unknown = false
							tf.Attrs["idle_timeout_message"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["web_idle_timeout"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.WebIdleTimeout"})
						} else {
							v, ok := tf.Attrs["web_idle_timeout"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.WebIdleTimeout", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.WebIdleTimeout", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.WebIdleTimeout)
							v.Unknown = false
							tf.Attrs["web_idle_timeout"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["proxy_listener_mode"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.ProxyListenerMode"})
						} else {
							v, ok := tf.Attrs["proxy_listener_mode"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.ProxyListenerMode", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ProxyListenerMode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.ProxyListenerMode) == 0
							}
							v.Value = int64(obj.ProxyListenerMode)
							v.Unknown = false
							tf.Attrs["proxy_listener_mode"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["routing_strategy"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.RoutingStrategy"})
						} else {
							v, ok := tf.Attrs["routing_strategy"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.RoutingStrategy", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.RoutingStrategy", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.RoutingStrategy) == 0
							}
							v.Value = int64(obj.RoutingStrategy)
							v.Unknown = false
							tf.Attrs["routing_strategy"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["tunnel_strategy"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["tunnel_strategy"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.TunnelStrategy == nil {
									v.Null = true
								} else {
									obj := obj.TunnelStrategy
									tf := &v
									{
										a, ok := tf.AttrTypes["agent_mesh"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh"})
										} else {
											obj, ok := obj.Strategy.(*github_com_gravitational_teleport_api_types.TunnelStrategyV1_AgentMesh)
											if !ok {
												obj = &github_com_gravitational_teleport_api_types.TunnelStrategyV1_AgentMesh{}
											}
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["agent_mesh"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.AgentMesh == nil {
													v.Null = true
												} else {
													tf := &v
													{
														t, ok := tf.AttrTypes["active"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh.active"})
														} else {
															v, ok := tf.Attrs["active"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh.active", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.AgentMesh.active", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
																}
																v.Null = true
															}
															v.Unknown = false
															tf.Attrs["active"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["agent_mesh"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["proxy_peering"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering"})
										} else {
											obj, ok := obj.Strategy.(*github_com_gravitational_teleport_api_types.TunnelStrategyV1_ProxyPeering)
											if !ok {
												obj = &github_com_gravitational_teleport_api_types.TunnelStrategyV1_ProxyPeering{}
											}
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["proxy_peering"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.ProxyPeering == nil {
													v.Null = true
												} else {
													obj := obj.ProxyPeering
													tf := &v
													{
														t, ok := tf.AttrTypes["agent_connection_count"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering.AgentConnectionCount"})
														} else {
															v, ok := tf.Attrs["agent_connection_count"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering.AgentConnectionCount", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.TunnelStrategy.ProxyPeering.AgentConnectionCount", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																}
																v.Null = int64(obj.AgentConnectionCount) == 0
															}
															v.Value = int64(obj.AgentConnectionCount)
															v.Unknown = false
															tf.Attrs["agent_connection_count"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["proxy_peering"] = v
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["tunnel_strategy"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["proxy_ping_interval"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"ClusterNetworkingConfigV2.Spec.ProxyPingInterval"})
						} else {
							v, ok := tf.Attrs["proxy_ping_interval"].(DurationValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"ClusterNetworkingConfigV2.Spec.ProxyPingInterval", err})
								}
								v, ok = i.(DurationValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"ClusterNetworkingConfigV2.Spec.ProxyPingInterval", "DurationValue"})
								}
								v.Null = false
							}
							v.Value = time.Duration(obj.ProxyPingInterval)
							v.Unknown = false
							tf.Attrs["proxy_ping_interval"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopySessionRecordingConfigV2FromTerraform copies contents of the source Terraform object into a target struct
func CopySessionRecordingConfigV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.SessionRecordingConfigV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.SessionRecordingConfigSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["mode"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Spec.Mode"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SessionRecordingConfigV2.Spec.Mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Mode = t
							}
						}
					}
					{
						a, ok := tf.Attrs["proxy_checks_host_keys"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SessionRecordingConfigV2.Spec.ProxyChecksHostKeys"})
						}
						CopyFromBoolOption(diags, a, &obj.ProxyChecksHostKeys)
					}
				}
			}
		}
	}
	return diags
}

// CopySessionRecordingConfigV2ToTerraform copies contents of the source Terraform object into a target struct
func CopySessionRecordingConfigV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.SessionRecordingConfigV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["mode"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Spec.Mode"})
						} else {
							v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SessionRecordingConfigV2.Spec.Mode", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SessionRecordingConfigV2.Spec.Mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Mode) == ""
							}
							v.Value = string(obj.Mode)
							v.Unknown = false
							tf.Attrs["mode"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["proxy_checks_host_keys"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SessionRecordingConfigV2.Spec.ProxyChecksHostKeys"})
						} else {
							v := CopyToBoolOption(diags, obj.ProxyChecksHostKeys, t, tf.Attrs["proxy_checks_host_keys"])
							tf.Attrs["proxy_checks_host_keys"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyAuthPreferenceV2FromTerraform copies contents of the source Terraform object into a target struct
func CopyAuthPreferenceV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.AuthPreferenceV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AuthPreferenceV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.AuthPreferenceSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["type"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.Type"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Type", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Type = t
							}
						}
					}
					{
						a, ok := tf.Attrs["second_factor"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.SecondFactor"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.SecondFactor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t github_com_gravitational_teleport_api_constants.SecondFactorType
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_constants.SecondFactorType(v.Value)
								}
								obj.SecondFactor = t
							}
						}
					}
					{
						a, ok := tf.Attrs["connector_name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.ConnectorName"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.ConnectorName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ConnectorName = t
							}
						}
					}
					{
						a, ok := tf.Attrs["u2f"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.U2F"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.U2F = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.U2F = &github_com_gravitational_teleport_api_types.U2F{}
									obj := obj.U2F
									{
										a, ok := tf.Attrs["app_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.U2F.AppID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.AppID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.AppID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["facets"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.U2F.Facets"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.Facets", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Facets = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.Facets", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Facets[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["device_attestation_cas"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DeviceAttestationCAs = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DeviceAttestationCAs[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["disconnect_expired_cert"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.DisconnectExpiredCert"})
						}
						CopyFromBoolOption(diags, a, &obj.DisconnectExpiredCert)
					}
					{
						a, ok := tf.Attrs["allow_local_auth"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.AllowLocalAuth"})
						}
						CopyFromBoolOption(diags, a, &obj.AllowLocalAuth)
					}
					{
						a, ok := tf.Attrs["message_of_the_day"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.MessageOfTheDay"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.MessageOfTheDay", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.MessageOfTheDay = t
							}
						}
					}
					{
						a, ok := tf.Attrs["locking_mode"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.LockingMode"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.LockingMode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t github_com_gravitational_teleport_api_constants.LockingMode
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_constants.LockingMode(v.Value)
								}
								obj.LockingMode = t
							}
						}
					}
					{
						a, ok := tf.Attrs["webauthn"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.Webauthn"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Webauthn = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.Webauthn = &github_com_gravitational_teleport_api_types.Webauthn{}
									obj := obj.Webauthn
									{
										a, ok := tf.Attrs["rp_id"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.Webauthn.RPID"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.RPID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.RPID = t
											}
										}
									}
									{
										a, ok := tf.Attrs["attestation_allowed_cas"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AttestationAllowedCAs = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AttestationAllowedCAs[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["attestation_denied_cas"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AttestationDeniedCAs = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AttestationDeniedCAs[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["allow_passwordless"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.AllowPasswordless"})
						}
						CopyFromBoolOption(diags, a, &obj.AllowPasswordless)
					}
					{
						a, ok := tf.Attrs["require_session_mfa"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.RequireMFAType"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.RequireMFAType", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
							} else {
								var t github_com_gravitational_teleport_api_types.RequireMFAType
								if !v.Null && !v.Unknown {
									t = github_com_gravitational_teleport_api_types.RequireMFAType(v.Value)
								}
								obj.RequireMFAType = t
							}
						}
					}
					{
						a, ok := tf.Attrs["device_trust"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.DeviceTrust = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.DeviceTrust = &github_com_gravitational_teleport_api_types.DeviceTrust{}
									obj := obj.DeviceTrust
									{
										a, ok := tf.Attrs["mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust.Mode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust.Mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Mode = t
											}
										}
									}
									{
										a, ok := tf.Attrs["auto_enroll"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust.AutoEnroll"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust.AutoEnroll", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t bool
												if !v.Null && !v.Unknown {
													t = bool(v.Value)
												}
												obj.AutoEnroll = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["idp"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.IDP"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.IDP", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.IDP = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.IDP = &github_com_gravitational_teleport_api_types.IdPOptions{}
									obj := obj.IDP
									{
										a, ok := tf.Attrs["saml"]
										if !ok {
											diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.IDP.SAML"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"AuthPreferenceV2.Spec.IDP.SAML", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.SAML = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.SAML = &github_com_gravitational_teleport_api_types.IdPSAMLOptions{}
													obj := obj.SAML
													{
														a, ok := tf.Attrs["enabled"]
														if !ok {
															diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.IDP.SAML.Enabled"})
														}
														CopyFromBoolOption(diags, a, &obj.Enabled)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["allow_headless"]
						if !ok {
							diags.Append(attrReadMissingDiag{"AuthPreferenceV2.Spec.AllowHeadless"})
						}
						CopyFromBoolOption(diags, a, &obj.AllowHeadless)
					}
				}
			}
		}
	}
	return diags
}

// CopyAuthPreferenceV2ToTerraform copies contents of the source Terraform object into a target struct
func CopyAuthPreferenceV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.AuthPreferenceV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AuthPreferenceV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["type"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.Type"})
						} else {
							v, ok := tf.Attrs["type"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.Type", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Type", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Type) == ""
							}
							v.Value = string(obj.Type)
							v.Unknown = false
							tf.Attrs["type"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["second_factor"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.SecondFactor"})
						} else {
							v, ok := tf.Attrs["second_factor"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.SecondFactor", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.SecondFactor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.SecondFactor) == ""
							}
							v.Value = string(obj.SecondFactor)
							v.Unknown = false
							tf.Attrs["second_factor"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["connector_name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.ConnectorName"})
						} else {
							v, ok := tf.Attrs["connector_name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.ConnectorName", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.ConnectorName", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ConnectorName) == ""
							}
							v.Value = string(obj.ConnectorName)
							v.Unknown = false
							tf.Attrs["connector_name"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["u2f"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.U2F"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["u2f"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.U2F == nil {
									v.Null = true
								} else {
									obj := obj.U2F
									tf := &v
									{
										t, ok := tf.AttrTypes["app_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.U2F.AppID"})
										} else {
											v, ok := tf.Attrs["app_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.U2F.AppID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.AppID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.AppID) == ""
											}
											v.Value = string(obj.AppID)
											v.Unknown = false
											tf.Attrs["app_id"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["facets"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.U2F.Facets"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.Facets", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["facets"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Facets)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Facets))
													}
												}
												if obj.Facets != nil {
													t := o.ElemType
													if len(obj.Facets) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Facets))
													}
													for k, a := range obj.Facets {
														v, ok := tf.Attrs["facets"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.U2F.Facets", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.Facets", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Facets) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["facets"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["device_attestation_cas"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["device_attestation_cas"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DeviceAttestationCAs)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DeviceAttestationCAs))
													}
												}
												if obj.DeviceAttestationCAs != nil {
													t := o.ElemType
													if len(obj.DeviceAttestationCAs) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DeviceAttestationCAs))
													}
													for k, a := range obj.DeviceAttestationCAs {
														v, ok := tf.Attrs["device_attestation_cas"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.U2F.DeviceAttestationCAs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DeviceAttestationCAs) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["device_attestation_cas"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["u2f"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["disconnect_expired_cert"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.DisconnectExpiredCert"})
						} else {
							v := CopyToBoolOption(diags, obj.DisconnectExpiredCert, t, tf.Attrs["disconnect_expired_cert"])
							tf.Attrs["disconnect_expired_cert"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["allow_local_auth"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.AllowLocalAuth"})
						} else {
							v := CopyToBoolOption(diags, obj.AllowLocalAuth, t, tf.Attrs["allow_local_auth"])
							tf.Attrs["allow_local_auth"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["message_of_the_day"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.MessageOfTheDay"})
						} else {
							v, ok := tf.Attrs["message_of_the_day"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.MessageOfTheDay", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.MessageOfTheDay", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.MessageOfTheDay) == ""
							}
							v.Value = string(obj.MessageOfTheDay)
							v.Unknown = false
							tf.Attrs["message_of_the_day"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["locking_mode"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.LockingMode"})
						} else {
							v, ok := tf.Attrs["locking_mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.LockingMode", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.LockingMode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.LockingMode) == ""
							}
							v.Value = string(obj.LockingMode)
							v.Unknown = false
							tf.Attrs["locking_mode"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["webauthn"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.Webauthn"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["webauthn"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.Webauthn == nil {
									v.Null = true
								} else {
									obj := obj.Webauthn
									tf := &v
									{
										t, ok := tf.AttrTypes["rp_id"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.Webauthn.RPID"})
										} else {
											v, ok := tf.Attrs["rp_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.Webauthn.RPID", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.RPID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.RPID) == ""
											}
											v.Value = string(obj.RPID)
											v.Unknown = false
											tf.Attrs["rp_id"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["attestation_allowed_cas"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["attestation_allowed_cas"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationAllowedCAs)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationAllowedCAs))
													}
												}
												if obj.AttestationAllowedCAs != nil {
													t := o.ElemType
													if len(obj.AttestationAllowedCAs) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationAllowedCAs))
													}
													for k, a := range obj.AttestationAllowedCAs {
														v, ok := tf.Attrs["attestation_allowed_cas"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationAllowedCAs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AttestationAllowedCAs) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["attestation_allowed_cas"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["attestation_denied_cas"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["attestation_denied_cas"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationDeniedCAs)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationDeniedCAs))
													}
												}
												if obj.AttestationDeniedCAs != nil {
													t := o.ElemType
													if len(obj.AttestationDeniedCAs) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttestationDeniedCAs))
													}
													for k, a := range obj.AttestationDeniedCAs {
														v, ok := tf.Attrs["attestation_denied_cas"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.Webauthn.AttestationDeniedCAs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AttestationDeniedCAs) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["attestation_denied_cas"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["webauthn"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["allow_passwordless"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.AllowPasswordless"})
						} else {
							v := CopyToBoolOption(diags, obj.AllowPasswordless, t, tf.Attrs["allow_passwordless"])
							tf.Attrs["allow_passwordless"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["require_session_mfa"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.RequireMFAType"})
						} else {
							v, ok := tf.Attrs["require_session_mfa"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.RequireMFAType", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.RequireMFAType", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
								}
								v.Null = int64(obj.RequireMFAType) == 0
							}
							v.Value = int64(obj.RequireMFAType)
							v.Unknown = false
							tf.Attrs["require_session_mfa"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["device_trust"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["device_trust"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.DeviceTrust == nil {
									v.Null = true
								} else {
									obj := obj.DeviceTrust
									tf := &v
									{
										t, ok := tf.AttrTypes["mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust.Mode"})
										} else {
											v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.DeviceTrust.Mode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust.Mode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Mode) == ""
											}
											v.Value = string(obj.Mode)
											v.Unknown = false
											tf.Attrs["mode"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["auto_enroll"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.DeviceTrust.AutoEnroll"})
										} else {
											v, ok := tf.Attrs["auto_enroll"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"AuthPreferenceV2.Spec.DeviceTrust.AutoEnroll", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.DeviceTrust.AutoEnroll", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.AutoEnroll) == false
											}
											v.Value = bool(obj.AutoEnroll)
											v.Unknown = false
											tf.Attrs["auto_enroll"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["device_trust"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["idp"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.IDP"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.IDP", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["idp"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.IDP == nil {
									v.Null = true
								} else {
									obj := obj.IDP
									tf := &v
									{
										a, ok := tf.AttrTypes["saml"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.IDP.SAML"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"AuthPreferenceV2.Spec.IDP.SAML", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["saml"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.SAML == nil {
													v.Null = true
												} else {
													obj := obj.SAML
													tf := &v
													{
														t, ok := tf.AttrTypes["enabled"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.IDP.SAML.Enabled"})
														} else {
															v := CopyToBoolOption(diags, obj.Enabled, t, tf.Attrs["enabled"])
															tf.Attrs["enabled"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["saml"] = v
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["idp"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["allow_headless"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"AuthPreferenceV2.Spec.AllowHeadless"})
						} else {
							v := CopyToBoolOption(diags, obj.AllowHeadless, t, tf.Attrs["allow_headless"])
							tf.Attrs["allow_headless"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyRoleV6FromTerraform copies contents of the source Terraform object into a target struct
func CopyRoleV6FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.RoleV6) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"RoleV6.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"RoleV6.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"RoleV6.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"RoleV6.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"RoleV6.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"RoleV6.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"RoleV6.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"RoleV6.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.RoleSpecV6{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["options"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Options = github_com_gravitational_teleport_api_types.RoleOptions{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.Options
									{
										a, ok := tf.Attrs["forward_agent"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.ForwardAgent"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.ForwardAgent", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t github_com_gravitational_teleport_api_types.Bool
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Bool(v.Value)
												}
												obj.ForwardAgent = t
											}
										}
									}
									{
										a, ok := tf.Attrs["max_session_ttl"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.MaxSessionTTL"})
										} else {
											v, ok := a.(DurationValue)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.MaxSessionTTL", "DurationValue"})
											} else {
												var t github_com_gravitational_teleport_api_types.Duration
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Duration(v.Value)
												}
												obj.MaxSessionTTL = t
											}
										}
									}
									{
										a, ok := tf.Attrs["port_forwarding"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.PortForwarding"})
										}
										CopyFromBoolOption(diags, a, &obj.PortForwarding)
									}
									{
										a, ok := tf.Attrs["cert_format"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertificateFormat"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertificateFormat", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.CertificateFormat = t
											}
										}
									}
									{
										a, ok := tf.Attrs["client_idle_timeout"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.ClientIdleTimeout"})
										} else {
											v, ok := a.(DurationValue)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.ClientIdleTimeout", "DurationValue"})
											} else {
												var t github_com_gravitational_teleport_api_types.Duration
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Duration(v.Value)
												}
												obj.ClientIdleTimeout = t
											}
										}
									}
									{
										a, ok := tf.Attrs["disconnect_expired_cert"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.DisconnectExpiredCert"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.DisconnectExpiredCert", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t github_com_gravitational_teleport_api_types.Bool
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Bool(v.Value)
												}
												obj.DisconnectExpiredCert = t
											}
										}
									}
									{
										a, ok := tf.Attrs["enhanced_recording"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.BPF"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.BPF", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.BPF = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.BPF", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.BPF[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["permit_x11_forwarding"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.PermitX11Forwarding"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.PermitX11Forwarding", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t github_com_gravitational_teleport_api_types.Bool
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Bool(v.Value)
												}
												obj.PermitX11Forwarding = t
											}
										}
									}
									{
										a, ok := tf.Attrs["max_connections"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.MaxConnections"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.MaxConnections", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
											} else {
												var t int64
												if !v.Null && !v.Unknown {
													t = int64(v.Value)
												}
												obj.MaxConnections = t
											}
										}
									}
									{
										a, ok := tf.Attrs["max_sessions"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.MaxSessions"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.MaxSessions", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
											} else {
												var t int64
												if !v.Null && !v.Unknown {
													t = int64(v.Value)
												}
												obj.MaxSessions = t
											}
										}
									}
									{
										a, ok := tf.Attrs["request_access"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RequestAccess"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RequestAccess", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t github_com_gravitational_teleport_api_types.RequestStrategy
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.RequestStrategy(v.Value)
												}
												obj.RequestAccess = t
											}
										}
									}
									{
										a, ok := tf.Attrs["request_prompt"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RequestPrompt"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RequestPrompt", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.RequestPrompt = t
											}
										}
									}
									{
										a, ok := tf.Attrs["lock"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.Lock"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.Lock", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t github_com_gravitational_teleport_api_constants.LockingMode
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_constants.LockingMode(v.Value)
												}
												obj.Lock = t
											}
										}
									}
									{
										a, ok := tf.Attrs["record_session"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RecordSession"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RecordSession", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.RecordSession = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.RecordSession = &github_com_gravitational_teleport_api_types.RecordSession{}
													obj := obj.RecordSession
													{
														a, ok := tf.Attrs["desktop"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RecordSession.Desktop"})
														}
														CopyFromBoolOption(diags, a, &obj.Desktop)
													}
													{
														a, ok := tf.Attrs["default"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RecordSession.Default"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RecordSession.Default", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t github_com_gravitational_teleport_api_constants.SessionRecordingMode
																if !v.Null && !v.Unknown {
																	t = github_com_gravitational_teleport_api_constants.SessionRecordingMode(v.Value)
																}
																obj.Default = t
															}
														}
													}
													{
														a, ok := tf.Attrs["ssh"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RecordSession.SSH"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RecordSession.SSH", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t github_com_gravitational_teleport_api_constants.SessionRecordingMode
																if !v.Null && !v.Unknown {
																	t = github_com_gravitational_teleport_api_constants.SessionRecordingMode(v.Value)
																}
																obj.SSH = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["desktop_clipboard"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.DesktopClipboard"})
										}
										CopyFromBoolOption(diags, a, &obj.DesktopClipboard)
									}
									{
										a, ok := tf.Attrs["cert_extensions"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertExtensions"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.CertExtensions = make([]*github_com_gravitational_teleport_api_types.CertExtension, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.CertExtension
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.CertExtension{}
																obj := t
																{
																	a, ok := tf.Attrs["type"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertExtensions.Type"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Type", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.CertExtensionType
																			if !v.Null && !v.Unknown {
																				t = github_com_gravitational_teleport_api_types.CertExtensionType(v.Value)
																			}
																			obj.Type = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["mode"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertExtensions.Mode"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Mode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.CertExtensionMode
																			if !v.Null && !v.Unknown {
																				t = github_com_gravitational_teleport_api_types.CertExtensionMode(v.Value)
																			}
																			obj.Mode = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertExtensions.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["value"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CertExtensions.Value"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Value = t
																		}
																	}
																}
															}
															obj.CertExtensions[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["max_kubernetes_connections"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.MaxKubernetesConnections"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.MaxKubernetesConnections", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
											} else {
												var t int64
												if !v.Null && !v.Unknown {
													t = int64(v.Value)
												}
												obj.MaxKubernetesConnections = t
											}
										}
									}
									{
										a, ok := tf.Attrs["desktop_directory_sharing"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.DesktopDirectorySharing"})
										}
										CopyFromBoolOption(diags, a, &obj.DesktopDirectorySharing)
									}
									{
										a, ok := tf.Attrs["create_host_user"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CreateHostUser"})
										}
										CopyFromBoolOption(diags, a, &obj.CreateHostUser)
									}
									{
										a, ok := tf.Attrs["pin_source_ip"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.PinSourceIP"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.PinSourceIP", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
											} else {
												var t github_com_gravitational_teleport_api_types.Bool
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.Bool(v.Value)
												}
												obj.PinSourceIP = t
											}
										}
									}
									{
										a, ok := tf.Attrs["ssh_file_copy"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.SSHFileCopy"})
										}
										CopyFromBoolOption(diags, a, &obj.SSHFileCopy)
									}
									{
										a, ok := tf.Attrs["require_session_mfa"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.RequireMFAType"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.RequireMFAType", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
											} else {
												var t github_com_gravitational_teleport_api_types.RequireMFAType
												if !v.Null && !v.Unknown {
													t = github_com_gravitational_teleport_api_types.RequireMFAType(v.Value)
												}
												obj.RequireMFAType = t
											}
										}
									}
									{
										a, ok := tf.Attrs["device_trust_mode"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.DeviceTrustMode"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.DeviceTrustMode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.DeviceTrustMode = t
											}
										}
									}
									{
										a, ok := tf.Attrs["idp"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.IDP"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.IDP", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.IDP = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.IDP = &github_com_gravitational_teleport_api_types.IdPOptions{}
													obj := obj.IDP
													{
														a, ok := tf.Attrs["saml"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.IDP.SAML"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Options.IDP.SAML", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
															} else {
																obj.SAML = nil
																if !v.Null && !v.Unknown {
																	tf := v
																	obj.SAML = &github_com_gravitational_teleport_api_types.IdPSAMLOptions{}
																	obj := obj.SAML
																	{
																		a, ok := tf.Attrs["enabled"]
																		if !ok {
																			diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.IDP.SAML.Enabled"})
																		}
																		CopyFromBoolOption(diags, a, &obj.Enabled)
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["create_desktop_user"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Options.CreateDesktopUser"})
										}
										CopyFromBoolOption(diags, a, &obj.CreateDesktopUser)
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["allow"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Allow = github_com_gravitational_teleport_api_types.RoleConditions{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.Allow
									{
										a, ok := tf.Attrs["logins"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Logins"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Logins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Logins = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Logins", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Logins[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["node_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.NodeLabels"})
										}
										CopyFromLabels(diags, a, &obj.NodeLabels)
									}
									{
										a, ok := tf.Attrs["rules"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Rules"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Rules = make([]github_com_gravitational_teleport_api_types.Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t github_com_gravitational_teleport_api_types.Rule
															if !v.Null && !v.Unknown {
																tf := v
																obj := &t
																{
																	a, ok := tf.Attrs["resources"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Rules.Resources"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Resources = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Resources", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Resources[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["verbs"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Rules.Verbs"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Verbs = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Verbs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Verbs[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["where"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Rules.Where"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Where = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["actions"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Rules.Actions"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Actions = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Actions", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Actions[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Rules[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubeGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubeGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubeGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.KubeGroups[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["request"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Request = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Request = &github_com_gravitational_teleport_api_types.AccessRequestConditions{}
													obj := obj.Request
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["claims_to_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.ClaimsToRoles = make([]github_com_gravitational_teleport_api_types.ClaimMapping, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.ClaimMapping
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["claim"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Claim"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Claim = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["value"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Value"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Value = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["roles"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																						} else {
																							obj.Roles = make([]string, len(v.Elems))
																							if !v.Null && !v.Unknown {
																								for k, a := range v.Elems {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Roles[k] = t
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			obj.ClaimsToRoles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["annotations"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Annotations"})
														}
														CopyFromTraits(diags, a, &obj.Annotations)
													}
													{
														a, ok := tf.Attrs["thresholds"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Thresholds = make([]github_com_gravitational_teleport_api_types.AccessReviewThreshold, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.AccessReviewThreshold
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["name"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Name"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Name = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["filter"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Filter"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Filter = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["approve"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Approve"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Approve", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t uint32
																							if !v.Null && !v.Unknown {
																								t = uint32(v.Value)
																							}
																							obj.Approve = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["deny"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Deny"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Deny", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t uint32
																							if !v.Null && !v.Unknown {
																								t = uint32(v.Value)
																							}
																							obj.Deny = t
																						}
																					}
																				}
																			}
																			obj.Thresholds[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["suggested_reviewers"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.SuggestedReviewers = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.SuggestedReviewers[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["search_as_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.SearchAsRoles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.SearchAsRoles[k] = t
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_users"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubeUsers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubeUsers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubeUsers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.KubeUsers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["app_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.AppLabels"})
										}
										CopyFromLabels(diags, a, &obj.AppLabels)
									}
									{
										a, ok := tf.Attrs["cluster_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ClusterLabels"})
										}
										CopyFromLabels(diags, a, &obj.ClusterLabels)
									}
									{
										a, ok := tf.Attrs["kubernetes_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubernetesLabels"})
										}
										CopyFromLabels(diags, a, &obj.KubernetesLabels)
									}
									{
										a, ok := tf.Attrs["db_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.DatabaseLabels"})
										}
										CopyFromLabels(diags, a, &obj.DatabaseLabels)
									}
									{
										a, ok := tf.Attrs["db_names"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.DatabaseNames"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DatabaseNames = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseNames", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DatabaseNames[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["db_users"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.DatabaseUsers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DatabaseUsers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseUsers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DatabaseUsers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["impersonate"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Impersonate"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Impersonate = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Impersonate = &github_com_gravitational_teleport_api_types.ImpersonateConditions{}
													obj := obj.Impersonate
													{
														a, ok := tf.Attrs["users"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Impersonate.Users"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Users = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Users", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Users[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Impersonate.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["where"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.Impersonate.Where"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.Where = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["review_requests"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.ReviewRequests = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.ReviewRequests = &github_com_gravitational_teleport_api_types.AccessReviewConditions{}
													obj := obj.ReviewRequests
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["claims_to_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.ClaimsToRoles = make([]github_com_gravitational_teleport_api_types.ClaimMapping, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.ClaimMapping
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["claim"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Claim"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Claim = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["value"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Value"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Value = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["roles"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																						} else {
																							obj.Roles = make([]string, len(v.Elems))
																							if !v.Null && !v.Unknown {
																								for k, a := range v.Elems {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Roles[k] = t
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			obj.ClaimsToRoles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["where"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.Where"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.Where = t
															}
														}
													}
													{
														a, ok := tf.Attrs["preview_as_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.PreviewAsRoles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.PreviewAsRoles[k] = t
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["aws_role_arns"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.AWSRoleARNs"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AWSRoleARNs = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.AWSRoleARNs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AWSRoleARNs[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["windows_desktop_logins"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.WindowsDesktopLogins = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.WindowsDesktopLogins[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["windows_desktop_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.WindowsDesktopLabels"})
										}
										CopyFromLabels(diags, a, &obj.WindowsDesktopLabels)
									}
									{
										a, ok := tf.Attrs["require_session_join"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.RequireSessionJoin = make([]*github_com_gravitational_teleport_api_types.SessionRequirePolicy, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.SessionRequirePolicy
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.SessionRequirePolicy{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["filter"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Filter"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Filter = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["kinds"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Kinds = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Kinds[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["count"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Count"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Count", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		} else {
																			var t int32
																			if !v.Null && !v.Unknown {
																				t = int32(v.Value)
																			}
																			obj.Count = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["modes"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Modes = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Modes[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["on_leave"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.OnLeave"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.OnLeave", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.OnLeave = t
																		}
																	}
																}
															}
															obj.RequireSessionJoin[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["join_sessions"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.JoinSessions"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.JoinSessions = make([]*github_com_gravitational_teleport_api_types.SessionJoinPolicy, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.SessionJoinPolicy
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.SessionJoinPolicy{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["roles"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Roles"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Roles = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Roles[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["kinds"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Kinds = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Kinds[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["modes"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Modes"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Modes = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Modes", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Modes[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.JoinSessions[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["host_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.HostGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.HostGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.HostGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.HostGroups[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["host_sudoers"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.HostSudoers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.HostSudoers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.HostSudoers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.HostSudoers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["azure_identities"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.AzureIdentities"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AzureIdentities = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.AzureIdentities", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AzureIdentities[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_resources"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubernetesResources"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubernetesResources = make([]github_com_gravitational_teleport_api_types.KubernetesResource, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t github_com_gravitational_teleport_api_types.KubernetesResource
															if !v.Null && !v.Unknown {
																tf := v
																obj := &t
																{
																	a, ok := tf.Attrs["kind"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Kind"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Kind = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["namespace"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Namespace"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Namespace = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
															}
															obj.KubernetesResources[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["gcp_service_accounts"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.GCPServiceAccounts"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.GCPServiceAccounts = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.GCPServiceAccounts", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.GCPServiceAccounts[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["db_service_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.DatabaseServiceLabels"})
										}
										CopyFromLabels(diags, a, &obj.DatabaseServiceLabels)
									}
									{
										a, ok := tf.Attrs["group_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.GroupLabels"})
										}
										CopyFromLabels(diags, a, &obj.GroupLabels)
									}
									{
										a, ok := tf.Attrs["desktop_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Allow.DesktopGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DesktopGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Allow.DesktopGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DesktopGroups[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["deny"]
						if !ok {
							diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.Deny = github_com_gravitational_teleport_api_types.RoleConditions{}
								if !v.Null && !v.Unknown {
									tf := v
									obj := &obj.Deny
									{
										a, ok := tf.Attrs["logins"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Logins"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Logins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Logins = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Logins", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Logins[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["node_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.NodeLabels"})
										}
										CopyFromLabels(diags, a, &obj.NodeLabels)
									}
									{
										a, ok := tf.Attrs["rules"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Rules"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.Rules = make([]github_com_gravitational_teleport_api_types.Rule, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t github_com_gravitational_teleport_api_types.Rule
															if !v.Null && !v.Unknown {
																tf := v
																obj := &t
																{
																	a, ok := tf.Attrs["resources"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Rules.Resources"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Resources = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Resources", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Resources[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["verbs"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Rules.Verbs"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Verbs = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Verbs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Verbs[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["where"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Rules.Where"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Where = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["actions"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Rules.Actions"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Actions = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Actions", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Actions[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.Rules[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubeGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubeGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubeGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.KubeGroups[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["request"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Request = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Request = &github_com_gravitational_teleport_api_types.AccessRequestConditions{}
													obj := obj.Request
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["claims_to_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.ClaimsToRoles = make([]github_com_gravitational_teleport_api_types.ClaimMapping, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.ClaimMapping
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["claim"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Claim"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Claim = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["value"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Value"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Value = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["roles"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																						} else {
																							obj.Roles = make([]string, len(v.Elems))
																							if !v.Null && !v.Unknown {
																								for k, a := range v.Elems {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Roles[k] = t
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			obj.ClaimsToRoles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["annotations"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Annotations"})
														}
														CopyFromTraits(diags, a, &obj.Annotations)
													}
													{
														a, ok := tf.Attrs["thresholds"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Thresholds = make([]github_com_gravitational_teleport_api_types.AccessReviewThreshold, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.AccessReviewThreshold
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["name"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Name"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Name = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["filter"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Filter"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Filter = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["approve"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Approve"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Approve", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t uint32
																							if !v.Null && !v.Unknown {
																								t = uint32(v.Value)
																							}
																							obj.Approve = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["deny"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Deny"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Deny", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						} else {
																							var t uint32
																							if !v.Null && !v.Unknown {
																								t = uint32(v.Value)
																							}
																							obj.Deny = t
																						}
																					}
																				}
																			}
																			obj.Thresholds[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["suggested_reviewers"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.SuggestedReviewers = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.SuggestedReviewers[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["search_as_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.SearchAsRoles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.SearchAsRoles[k] = t
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_users"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubeUsers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubeUsers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubeUsers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.KubeUsers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["app_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.AppLabels"})
										}
										CopyFromLabels(diags, a, &obj.AppLabels)
									}
									{
										a, ok := tf.Attrs["cluster_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ClusterLabels"})
										}
										CopyFromLabels(diags, a, &obj.ClusterLabels)
									}
									{
										a, ok := tf.Attrs["kubernetes_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubernetesLabels"})
										}
										CopyFromLabels(diags, a, &obj.KubernetesLabels)
									}
									{
										a, ok := tf.Attrs["db_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.DatabaseLabels"})
										}
										CopyFromLabels(diags, a, &obj.DatabaseLabels)
									}
									{
										a, ok := tf.Attrs["db_names"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.DatabaseNames"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DatabaseNames = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseNames", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DatabaseNames[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["db_users"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.DatabaseUsers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DatabaseUsers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseUsers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DatabaseUsers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["impersonate"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Impersonate"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.Impersonate = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.Impersonate = &github_com_gravitational_teleport_api_types.ImpersonateConditions{}
													obj := obj.Impersonate
													{
														a, ok := tf.Attrs["users"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Impersonate.Users"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Users = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Users", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Users[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Impersonate.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["where"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.Impersonate.Where"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.Where = t
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["review_requests"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
											} else {
												obj.ReviewRequests = nil
												if !v.Null && !v.Unknown {
													tf := v
													obj.ReviewRequests = &github_com_gravitational_teleport_api_types.AccessReviewConditions{}
													obj := obj.ReviewRequests
													{
														a, ok := tf.Attrs["roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.Roles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Roles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["claims_to_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.ClaimsToRoles = make([]github_com_gravitational_teleport_api_types.ClaimMapping, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
																		} else {
																			var t github_com_gravitational_teleport_api_types.ClaimMapping
																			if !v.Null && !v.Unknown {
																				tf := v
																				obj := &t
																				{
																					a, ok := tf.Attrs["claim"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Claim"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Claim = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["value"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Value"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						} else {
																							var t string
																							if !v.Null && !v.Unknown {
																								t = string(v.Value)
																							}
																							obj.Value = t
																						}
																					}
																				}
																				{
																					a, ok := tf.Attrs["roles"]
																					if !ok {
																						diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles"})
																					} else {
																						v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																						} else {
																							obj.Roles = make([]string, len(v.Elems))
																							if !v.Null && !v.Unknown {
																								for k, a := range v.Elems {
																									v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																									} else {
																										var t string
																										if !v.Null && !v.Unknown {
																											t = string(v.Value)
																										}
																										obj.Roles[k] = t
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																			obj.ClaimsToRoles[k] = t
																		}
																	}
																}
															}
														}
													}
													{
														a, ok := tf.Attrs["where"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.Where"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															} else {
																var t string
																if !v.Null && !v.Unknown {
																	t = string(v.Value)
																}
																obj.Where = t
															}
														}
													}
													{
														a, ok := tf.Attrs["preview_as_roles"]
														if !ok {
															diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles"})
														} else {
															v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
															if !ok {
																diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
															} else {
																obj.PreviewAsRoles = make([]string, len(v.Elems))
																if !v.Null && !v.Unknown {
																	for k, a := range v.Elems {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.PreviewAsRoles[k] = t
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["aws_role_arns"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.AWSRoleARNs"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AWSRoleARNs = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.AWSRoleARNs", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AWSRoleARNs[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["windows_desktop_logins"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.WindowsDesktopLogins = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.WindowsDesktopLogins[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["windows_desktop_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.WindowsDesktopLabels"})
										}
										CopyFromLabels(diags, a, &obj.WindowsDesktopLabels)
									}
									{
										a, ok := tf.Attrs["require_session_join"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.RequireSessionJoin = make([]*github_com_gravitational_teleport_api_types.SessionRequirePolicy, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.SessionRequirePolicy
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.SessionRequirePolicy{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["filter"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Filter"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Filter = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["kinds"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Kinds = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Kinds[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["count"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Count"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Count", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		} else {
																			var t int32
																			if !v.Null && !v.Unknown {
																				t = int32(v.Value)
																			}
																			obj.Count = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["modes"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Modes = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Modes[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["on_leave"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.OnLeave"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.OnLeave", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.OnLeave = t
																		}
																	}
																}
															}
															obj.RequireSessionJoin[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["join_sessions"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.JoinSessions"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.JoinSessions = make([]*github_com_gravitational_teleport_api_types.SessionJoinPolicy, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t *github_com_gravitational_teleport_api_types.SessionJoinPolicy
															if !v.Null && !v.Unknown {
																tf := v
																t = &github_com_gravitational_teleport_api_types.SessionJoinPolicy{}
																obj := t
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["roles"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Roles"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Roles = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Roles[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["kinds"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Kinds = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Kinds[k] = t
																					}
																				}
																			}
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["modes"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Modes"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.List"})
																		} else {
																			obj.Modes = make([]string, len(v.Elems))
																			if !v.Null && !v.Unknown {
																				for k, a := range v.Elems {
																					v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Modes", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																					} else {
																						var t string
																						if !v.Null && !v.Unknown {
																							t = string(v.Value)
																						}
																						obj.Modes[k] = t
																					}
																				}
																			}
																		}
																	}
																}
															}
															obj.JoinSessions[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["host_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.HostGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.HostGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.HostGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.HostGroups[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["host_sudoers"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.HostSudoers"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.HostSudoers = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.HostSudoers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.HostSudoers[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["azure_identities"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.AzureIdentities"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.AzureIdentities = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.AzureIdentities", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.AzureIdentities[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["kubernetes_resources"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubernetesResources"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.KubernetesResources = make([]github_com_gravitational_teleport_api_types.KubernetesResource, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
														} else {
															var t github_com_gravitational_teleport_api_types.KubernetesResource
															if !v.Null && !v.Unknown {
																tf := v
																obj := &t
																{
																	a, ok := tf.Attrs["kind"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Kind"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Kind = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["namespace"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Namespace"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Namespace = t
																		}
																	}
																}
																{
																	a, ok := tf.Attrs["name"]
																	if !ok {
																		diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Name"})
																	} else {
																		v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		} else {
																			var t string
																			if !v.Null && !v.Unknown {
																				t = string(v.Value)
																			}
																			obj.Name = t
																		}
																	}
																}
															}
															obj.KubernetesResources[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["gcp_service_accounts"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.GCPServiceAccounts"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.GCPServiceAccounts = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.GCPServiceAccounts", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.GCPServiceAccounts[k] = t
														}
													}
												}
											}
										}
									}
									{
										a, ok := tf.Attrs["db_service_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.DatabaseServiceLabels"})
										}
										CopyFromLabels(diags, a, &obj.DatabaseServiceLabels)
									}
									{
										a, ok := tf.Attrs["group_labels"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.GroupLabels"})
										}
										CopyFromLabels(diags, a, &obj.GroupLabels)
									}
									{
										a, ok := tf.Attrs["desktop_groups"]
										if !ok {
											diags.Append(attrReadMissingDiag{"RoleV6.Spec.Deny.DesktopGroups"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
											} else {
												obj.DesktopGroups = make([]string, len(v.Elems))
												if !v.Null && !v.Unknown {
													for k, a := range v.Elems {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"RoleV6.Spec.Deny.DesktopGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.DesktopGroups[k] = t
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyRoleV6ToTerraform copies contents of the source Terraform object into a target struct
func CopyRoleV6ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.RoleV6, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"RoleV6.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"RoleV6.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"RoleV6.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"RoleV6.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"RoleV6.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"RoleV6.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"RoleV6.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"RoleV6.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"RoleV6.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"RoleV6.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"RoleV6.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"RoleV6.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"RoleV6.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"RoleV6.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"RoleV6.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"RoleV6.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"RoleV6.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["options"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["options"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.Options
									tf := &v
									{
										t, ok := tf.AttrTypes["forward_agent"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.ForwardAgent"})
										} else {
											v, ok := tf.Attrs["forward_agent"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.ForwardAgent", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.ForwardAgent", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.ForwardAgent) == false
											}
											v.Value = bool(obj.ForwardAgent)
											v.Unknown = false
											tf.Attrs["forward_agent"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["max_session_ttl"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.MaxSessionTTL"})
										} else {
											v, ok := tf.Attrs["max_session_ttl"].(DurationValue)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.MaxSessionTTL", err})
												}
												v, ok = i.(DurationValue)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.MaxSessionTTL", "DurationValue"})
												}
												v.Null = false
											}
											v.Value = time.Duration(obj.MaxSessionTTL)
											v.Unknown = false
											tf.Attrs["max_session_ttl"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["port_forwarding"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.PortForwarding"})
										} else {
											v := CopyToBoolOption(diags, obj.PortForwarding, t, tf.Attrs["port_forwarding"])
											tf.Attrs["port_forwarding"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["cert_format"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertificateFormat"})
										} else {
											v, ok := tf.Attrs["cert_format"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.CertificateFormat", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertificateFormat", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.CertificateFormat) == ""
											}
											v.Value = string(obj.CertificateFormat)
											v.Unknown = false
											tf.Attrs["cert_format"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["client_idle_timeout"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.ClientIdleTimeout"})
										} else {
											v, ok := tf.Attrs["client_idle_timeout"].(DurationValue)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.ClientIdleTimeout", err})
												}
												v, ok = i.(DurationValue)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.ClientIdleTimeout", "DurationValue"})
												}
												v.Null = false
											}
											v.Value = time.Duration(obj.ClientIdleTimeout)
											v.Unknown = false
											tf.Attrs["client_idle_timeout"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["disconnect_expired_cert"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.DisconnectExpiredCert"})
										} else {
											v, ok := tf.Attrs["disconnect_expired_cert"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.DisconnectExpiredCert", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.DisconnectExpiredCert", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.DisconnectExpiredCert) == false
											}
											v.Value = bool(obj.DisconnectExpiredCert)
											v.Unknown = false
											tf.Attrs["disconnect_expired_cert"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["enhanced_recording"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.BPF"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.BPF", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["enhanced_recording"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.BPF)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.BPF))
													}
												}
												if obj.BPF != nil {
													t := o.ElemType
													if len(obj.BPF) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.BPF))
													}
													for k, a := range obj.BPF {
														v, ok := tf.Attrs["enhanced_recording"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.BPF", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.BPF", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.BPF) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["enhanced_recording"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["permit_x11_forwarding"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.PermitX11Forwarding"})
										} else {
											v, ok := tf.Attrs["permit_x11_forwarding"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.PermitX11Forwarding", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.PermitX11Forwarding", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.PermitX11Forwarding) == false
											}
											v.Value = bool(obj.PermitX11Forwarding)
											v.Unknown = false
											tf.Attrs["permit_x11_forwarding"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["max_connections"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.MaxConnections"})
										} else {
											v, ok := tf.Attrs["max_connections"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.MaxConnections", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.MaxConnections", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
												}
												v.Null = int64(obj.MaxConnections) == 0
											}
											v.Value = int64(obj.MaxConnections)
											v.Unknown = false
											tf.Attrs["max_connections"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["max_sessions"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.MaxSessions"})
										} else {
											v, ok := tf.Attrs["max_sessions"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.MaxSessions", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.MaxSessions", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
												}
												v.Null = int64(obj.MaxSessions) == 0
											}
											v.Value = int64(obj.MaxSessions)
											v.Unknown = false
											tf.Attrs["max_sessions"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["request_access"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RequestAccess"})
										} else {
											v, ok := tf.Attrs["request_access"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.RequestAccess", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RequestAccess", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.RequestAccess) == ""
											}
											v.Value = string(obj.RequestAccess)
											v.Unknown = false
											tf.Attrs["request_access"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["request_prompt"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RequestPrompt"})
										} else {
											v, ok := tf.Attrs["request_prompt"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.RequestPrompt", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RequestPrompt", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.RequestPrompt) == ""
											}
											v.Value = string(obj.RequestPrompt)
											v.Unknown = false
											tf.Attrs["request_prompt"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["lock"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.Lock"})
										} else {
											v, ok := tf.Attrs["lock"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.Lock", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.Lock", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Lock) == ""
											}
											v.Value = string(obj.Lock)
											v.Unknown = false
											tf.Attrs["lock"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["record_session"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RecordSession"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RecordSession", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["record_session"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.RecordSession == nil {
													v.Null = true
												} else {
													obj := obj.RecordSession
													tf := &v
													{
														t, ok := tf.AttrTypes["desktop"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RecordSession.Desktop"})
														} else {
															v := CopyToBoolOption(diags, obj.Desktop, t, tf.Attrs["desktop"])
															tf.Attrs["desktop"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["default"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RecordSession.Default"})
														} else {
															v, ok := tf.Attrs["default"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.RecordSession.Default", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RecordSession.Default", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Default) == ""
															}
															v.Value = string(obj.Default)
															v.Unknown = false
															tf.Attrs["default"] = v
														}
													}
													{
														t, ok := tf.AttrTypes["ssh"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RecordSession.SSH"})
														} else {
															v, ok := tf.Attrs["ssh"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.RecordSession.SSH", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RecordSession.SSH", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.SSH) == ""
															}
															v.Value = string(obj.SSH)
															v.Unknown = false
															tf.Attrs["ssh"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["record_session"] = v
											}
										}
									}
									{
										t, ok := tf.AttrTypes["desktop_clipboard"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.DesktopClipboard"})
										} else {
											v := CopyToBoolOption(diags, obj.DesktopClipboard, t, tf.Attrs["desktop_clipboard"])
											tf.Attrs["desktop_clipboard"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["cert_extensions"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertExtensions"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["cert_extensions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.CertExtensions)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.CertExtensions))
													}
												}
												if obj.CertExtensions != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.CertExtensions) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.CertExtensions))
													}
													for k, a := range obj.CertExtensions {
														v, ok := tf.Attrs["cert_extensions"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["type"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertExtensions.Type"})
																} else {
																	v, ok := tf.Attrs["type"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.CertExtensions.Type", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Type", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		}
																		v.Null = int64(obj.Type) == 0
																	}
																	v.Value = int64(obj.Type)
																	v.Unknown = false
																	tf.Attrs["type"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["mode"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertExtensions.Mode"})
																} else {
																	v, ok := tf.Attrs["mode"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.CertExtensions.Mode", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Mode", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		}
																		v.Null = int64(obj.Mode) == 0
																	}
																	v.Value = int64(obj.Mode)
																	v.Unknown = false
																	tf.Attrs["mode"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertExtensions.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.CertExtensions.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["value"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CertExtensions.Value"})
																} else {
																	v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.CertExtensions.Value", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.CertExtensions.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Value) == ""
																	}
																	v.Value = string(obj.Value)
																	v.Unknown = false
																	tf.Attrs["value"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.CertExtensions) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["cert_extensions"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["max_kubernetes_connections"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.MaxKubernetesConnections"})
										} else {
											v, ok := tf.Attrs["max_kubernetes_connections"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.MaxKubernetesConnections", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.MaxKubernetesConnections", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
												}
												v.Null = int64(obj.MaxKubernetesConnections) == 0
											}
											v.Value = int64(obj.MaxKubernetesConnections)
											v.Unknown = false
											tf.Attrs["max_kubernetes_connections"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["desktop_directory_sharing"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.DesktopDirectorySharing"})
										} else {
											v := CopyToBoolOption(diags, obj.DesktopDirectorySharing, t, tf.Attrs["desktop_directory_sharing"])
											tf.Attrs["desktop_directory_sharing"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["create_host_user"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CreateHostUser"})
										} else {
											v := CopyToBoolOption(diags, obj.CreateHostUser, t, tf.Attrs["create_host_user"])
											tf.Attrs["create_host_user"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["pin_source_ip"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.PinSourceIP"})
										} else {
											v, ok := tf.Attrs["pin_source_ip"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.PinSourceIP", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.PinSourceIP", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
												}
												v.Null = bool(obj.PinSourceIP) == false
											}
											v.Value = bool(obj.PinSourceIP)
											v.Unknown = false
											tf.Attrs["pin_source_ip"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["ssh_file_copy"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.SSHFileCopy"})
										} else {
											v := CopyToBoolOption(diags, obj.SSHFileCopy, t, tf.Attrs["ssh_file_copy"])
											tf.Attrs["ssh_file_copy"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["require_session_mfa"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.RequireMFAType"})
										} else {
											v, ok := tf.Attrs["require_session_mfa"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.RequireMFAType", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.RequireMFAType", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
												}
												v.Null = int64(obj.RequireMFAType) == 0
											}
											v.Value = int64(obj.RequireMFAType)
											v.Unknown = false
											tf.Attrs["require_session_mfa"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["device_trust_mode"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.DeviceTrustMode"})
										} else {
											v, ok := tf.Attrs["device_trust_mode"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"RoleV6.Spec.Options.DeviceTrustMode", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.DeviceTrustMode", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.DeviceTrustMode) == ""
											}
											v.Value = string(obj.DeviceTrustMode)
											v.Unknown = false
											tf.Attrs["device_trust_mode"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["idp"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.IDP"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.IDP", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["idp"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.IDP == nil {
													v.Null = true
												} else {
													obj := obj.IDP
													tf := &v
													{
														a, ok := tf.AttrTypes["saml"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.IDP.SAML"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Options.IDP.SAML", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
															} else {
																v, ok := tf.Attrs["saml"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																if !ok {
																	v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																		AttrTypes: o.AttrTypes,
																		Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																	}
																} else {
																	if v.Attrs == nil {
																		v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																	}
																}
																if obj.SAML == nil {
																	v.Null = true
																} else {
																	obj := obj.SAML
																	tf := &v
																	{
																		t, ok := tf.AttrTypes["enabled"]
																		if !ok {
																			diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.IDP.SAML.Enabled"})
																		} else {
																			v := CopyToBoolOption(diags, obj.Enabled, t, tf.Attrs["enabled"])
																			tf.Attrs["enabled"] = v
																		}
																	}
																}
																v.Unknown = false
																tf.Attrs["saml"] = v
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["idp"] = v
											}
										}
									}
									{
										t, ok := tf.AttrTypes["create_desktop_user"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Options.CreateDesktopUser"})
										} else {
											v := CopyToBoolOption(diags, obj.CreateDesktopUser, t, tf.Attrs["create_desktop_user"])
											tf.Attrs["create_desktop_user"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["options"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["allow"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["allow"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.Allow
									tf := &v
									{
										a, ok := tf.AttrTypes["logins"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Logins"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Logins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
													}
												}
												if obj.Logins != nil {
													t := o.ElemType
													if len(obj.Logins) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
													}
													for k, a := range obj.Logins {
														v, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Logins", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Logins", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Logins) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["logins"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["node_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.NodeLabels"})
										} else {
											v := CopyToLabels(diags, obj.NodeLabels, t, tf.Attrs["node_labels"])
											tf.Attrs["node_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["rules"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Rules"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["rules"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules))
													}
												}
												if obj.Rules != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Rules) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules))
													}
													for k, a := range obj.Rules {
														v, ok := tf.Attrs["rules"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														{
															obj := a
															tf := &v
															{
																a, ok := tf.AttrTypes["resources"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Rules.Resources"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["resources"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources))
																			}
																		}
																		if obj.Resources != nil {
																			t := o.ElemType
																			if len(obj.Resources) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources))
																			}
																			for k, a := range obj.Resources {
																				v, ok := tf.Attrs["resources"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Rules.Resources", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Resources) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["resources"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["verbs"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Rules.Verbs"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["verbs"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs))
																			}
																		}
																		if obj.Verbs != nil {
																			t := o.ElemType
																			if len(obj.Verbs) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs))
																			}
																			for k, a := range obj.Verbs {
																				v, ok := tf.Attrs["verbs"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Rules.Verbs", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Verbs) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["verbs"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["where"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Rules.Where"})
																} else {
																	v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Rules.Where", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Where) == ""
																	}
																	v.Value = string(obj.Where)
																	v.Unknown = false
																	tf.Attrs["where"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["actions"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Rules.Actions"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["actions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions))
																			}
																		}
																		if obj.Actions != nil {
																			t := o.ElemType
																			if len(obj.Actions) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions))
																			}
																			for k, a := range obj.Actions {
																				v, ok := tf.Attrs["actions"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Rules.Actions", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Actions) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["actions"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Rules) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["rules"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubeGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
													}
												}
												if obj.KubeGroups != nil {
													t := o.ElemType
													if len(obj.KubeGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
													}
													for k, a := range obj.KubeGroups {
														v, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.KubeGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubeGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_groups"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["request"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["request"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Request == nil {
													v.Null = true
												} else {
													obj := obj.Request
													tf := &v
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["claims_to_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																}
																if obj.ClaimsToRoles != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.ClaimsToRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																	for k, a := range obj.ClaimsToRoles {
																		v, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["claim"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Claim"})
																				} else {
																					v, ok := tf.Attrs["claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Claim", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Claim) == ""
																					}
																					v.Value = string(obj.Claim)
																					v.Unknown = false
																					tf.Attrs["claim"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["value"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Value"})
																				} else {
																					v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Value", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Value) == ""
																					}
																					v.Value = string(obj.Value)
																					v.Unknown = false
																					tf.Attrs["value"] = v
																				}
																			}
																			{
																				a, ok := tf.AttrTypes["roles"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles"})
																				} else {
																					o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																					} else {
																						c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							c = github_com_hashicorp_terraform_plugin_framework_types.List{

																								ElemType: o.ElemType,
																								Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																								Null:     true,
																							}
																						} else {
																							if c.Elems == nil {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																						}
																						if obj.Roles != nil {
																							t := o.ElemType
																							if len(obj.Roles) != len(c.Elems) {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																							for k, a := range obj.Roles {
																								v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																									if err != nil {
																										diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles", err})
																									}
																									v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									}
																									v.Null = string(a) == ""
																								}
																								v.Value = string(a)
																								v.Unknown = false
																								c.Elems[k] = v
																							}
																							if len(obj.Roles) > 0 {
																								c.Null = false
																							}
																						}
																						c.Unknown = false
																						tf.Attrs["roles"] = c
																					}
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.ClaimsToRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["claims_to_roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["annotations"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Annotations"})
														} else {
															v := CopyToTraits(diags, obj.Annotations, t, tf.Attrs["annotations"])
															tf.Attrs["annotations"] = v
														}
													}
													{
														a, ok := tf.AttrTypes["thresholds"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["thresholds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds))
																	}
																}
																if obj.Thresholds != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.Thresholds) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds))
																	}
																	for k, a := range obj.Thresholds {
																		v, ok := tf.Attrs["thresholds"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["name"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Name"})
																				} else {
																					v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.Thresholds.Name", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Name) == ""
																					}
																					v.Value = string(obj.Name)
																					v.Unknown = false
																					tf.Attrs["name"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["filter"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Filter"})
																				} else {
																					v, ok := tf.Attrs["filter"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.Thresholds.Filter", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Filter) == ""
																					}
																					v.Value = string(obj.Filter)
																					v.Unknown = false
																					tf.Attrs["filter"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["approve"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Approve"})
																				} else {
																					v, ok := tf.Attrs["approve"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.Thresholds.Approve", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Approve", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.Approve) == 0
																					}
																					v.Value = int64(obj.Approve)
																					v.Unknown = false
																					tf.Attrs["approve"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["deny"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.Thresholds.Deny"})
																				} else {
																					v, ok := tf.Attrs["deny"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.Thresholds.Deny", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.Thresholds.Deny", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.Deny) == 0
																					}
																					v.Value = int64(obj.Deny)
																					v.Unknown = false
																					tf.Attrs["deny"] = v
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Thresholds) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["thresholds"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["suggested_reviewers"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["suggested_reviewers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers))
																	}
																}
																if obj.SuggestedReviewers != nil {
																	t := o.ElemType
																	if len(obj.SuggestedReviewers) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers))
																	}
																	for k, a := range obj.SuggestedReviewers {
																		v, ok := tf.Attrs["suggested_reviewers"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.SuggestedReviewers", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.SuggestedReviewers) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["suggested_reviewers"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["search_as_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["search_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles))
																	}
																}
																if obj.SearchAsRoles != nil {
																	t := o.ElemType
																	if len(obj.SearchAsRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles))
																	}
																	for k, a := range obj.SearchAsRoles {
																		v, ok := tf.Attrs["search_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Request.SearchAsRoles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.SearchAsRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["search_as_roles"] = c
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["request"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_users"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubeUsers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
													}
												}
												if obj.KubeUsers != nil {
													t := o.ElemType
													if len(obj.KubeUsers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
													}
													for k, a := range obj.KubeUsers {
														v, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.KubeUsers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubeUsers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_users"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["app_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.AppLabels"})
										} else {
											v := CopyToLabels(diags, obj.AppLabels, t, tf.Attrs["app_labels"])
											tf.Attrs["app_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["cluster_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ClusterLabels"})
										} else {
											v := CopyToLabels(diags, obj.ClusterLabels, t, tf.Attrs["cluster_labels"])
											tf.Attrs["cluster_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["kubernetes_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubernetesLabels"})
										} else {
											v := CopyToLabels(diags, obj.KubernetesLabels, t, tf.Attrs["kubernetes_labels"])
											tf.Attrs["kubernetes_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["db_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.DatabaseLabels"})
										} else {
											v := CopyToLabels(diags, obj.DatabaseLabels, t, tf.Attrs["db_labels"])
											tf.Attrs["db_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["db_names"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.DatabaseNames"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["db_names"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames))
													}
												}
												if obj.DatabaseNames != nil {
													t := o.ElemType
													if len(obj.DatabaseNames) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames))
													}
													for k, a := range obj.DatabaseNames {
														v, ok := tf.Attrs["db_names"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.DatabaseNames", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DatabaseNames) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["db_names"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["db_users"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.DatabaseUsers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["db_users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers))
													}
												}
												if obj.DatabaseUsers != nil {
													t := o.ElemType
													if len(obj.DatabaseUsers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers))
													}
													for k, a := range obj.DatabaseUsers {
														v, ok := tf.Attrs["db_users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.DatabaseUsers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DatabaseUsers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["db_users"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["impersonate"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Impersonate"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["impersonate"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Impersonate == nil {
													v.Null = true
												} else {
													obj := obj.Impersonate
													tf := &v
													{
														a, ok := tf.AttrTypes["users"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Impersonate.Users"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users))
																	}
																}
																if obj.Users != nil {
																	t := o.ElemType
																	if len(obj.Users) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users))
																	}
																	for k, a := range obj.Users {
																		v, ok := tf.Attrs["users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Impersonate.Users", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Users) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["users"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Impersonate.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Impersonate.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["where"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.Impersonate.Where"})
														} else {
															v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.Impersonate.Where", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.Impersonate.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Where) == ""
															}
															v.Value = string(obj.Where)
															v.Unknown = false
															tf.Attrs["where"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["impersonate"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["review_requests"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["review_requests"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.ReviewRequests == nil {
													v.Null = true
												} else {
													obj := obj.ReviewRequests
													tf := &v
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["claims_to_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																}
																if obj.ClaimsToRoles != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.ClaimsToRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																	for k, a := range obj.ClaimsToRoles {
																		v, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["claim"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Claim"})
																				} else {
																					v, ok := tf.Attrs["claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Claim", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Claim) == ""
																					}
																					v.Value = string(obj.Claim)
																					v.Unknown = false
																					tf.Attrs["claim"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["value"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Value"})
																				} else {
																					v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Value", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Value) == ""
																					}
																					v.Value = string(obj.Value)
																					v.Unknown = false
																					tf.Attrs["value"] = v
																				}
																			}
																			{
																				a, ok := tf.AttrTypes["roles"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles"})
																				} else {
																					o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																					} else {
																						c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							c = github_com_hashicorp_terraform_plugin_framework_types.List{

																								ElemType: o.ElemType,
																								Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																								Null:     true,
																							}
																						} else {
																							if c.Elems == nil {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																						}
																						if obj.Roles != nil {
																							t := o.ElemType
																							if len(obj.Roles) != len(c.Elems) {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																							for k, a := range obj.Roles {
																								v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																									if err != nil {
																										diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles", err})
																									}
																									v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									}
																									v.Null = string(a) == ""
																								}
																								v.Value = string(a)
																								v.Unknown = false
																								c.Elems[k] = v
																							}
																							if len(obj.Roles) > 0 {
																								c.Null = false
																							}
																						}
																						c.Unknown = false
																						tf.Attrs["roles"] = c
																					}
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.ClaimsToRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["claims_to_roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["where"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.Where"})
														} else {
															v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.Where", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Where) == ""
															}
															v.Value = string(obj.Where)
															v.Unknown = false
															tf.Attrs["where"] = v
														}
													}
													{
														a, ok := tf.AttrTypes["preview_as_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["preview_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles))
																	}
																}
																if obj.PreviewAsRoles != nil {
																	t := o.ElemType
																	if len(obj.PreviewAsRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles))
																	}
																	for k, a := range obj.PreviewAsRoles {
																		v, ok := tf.Attrs["preview_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.PreviewAsRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["preview_as_roles"] = c
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["review_requests"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["aws_role_arns"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.AWSRoleARNs"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["aws_role_arns"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs))
													}
												}
												if obj.AWSRoleARNs != nil {
													t := o.ElemType
													if len(obj.AWSRoleARNs) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs))
													}
													for k, a := range obj.AWSRoleARNs {
														v, ok := tf.Attrs["aws_role_arns"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.AWSRoleARNs", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AWSRoleARNs) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["aws_role_arns"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["windows_desktop_logins"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["windows_desktop_logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins))
													}
												}
												if obj.WindowsDesktopLogins != nil {
													t := o.ElemType
													if len(obj.WindowsDesktopLogins) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins))
													}
													for k, a := range obj.WindowsDesktopLogins {
														v, ok := tf.Attrs["windows_desktop_logins"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.WindowsDesktopLogins", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.WindowsDesktopLogins) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["windows_desktop_logins"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["windows_desktop_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.WindowsDesktopLabels"})
										} else {
											v := CopyToLabels(diags, obj.WindowsDesktopLabels, t, tf.Attrs["windows_desktop_labels"])
											tf.Attrs["windows_desktop_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["require_session_join"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["require_session_join"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin))
													}
												}
												if obj.RequireSessionJoin != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.RequireSessionJoin) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin))
													}
													for k, a := range obj.RequireSessionJoin {
														v, ok := tf.Attrs["require_session_join"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["filter"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Filter"})
																} else {
																	v, ok := tf.Attrs["filter"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.Filter", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Filter) == ""
																	}
																	v.Value = string(obj.Filter)
																	v.Unknown = false
																	tf.Attrs["filter"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["kinds"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																		}
																		if obj.Kinds != nil {
																			t := o.ElemType
																			if len(obj.Kinds) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																			for k, a := range obj.Kinds {
																				v, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Kinds) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["kinds"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["count"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Count"})
																} else {
																	v, ok := tf.Attrs["count"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.Count", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Count", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		}
																		v.Null = int64(obj.Count) == 0
																	}
																	v.Value = int64(obj.Count)
																	v.Unknown = false
																	tf.Attrs["count"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["modes"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																		}
																		if obj.Modes != nil {
																			t := o.ElemType
																			if len(obj.Modes) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																			for k, a := range obj.Modes {
																				v, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.Modes", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Modes) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["modes"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["on_leave"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.RequireSessionJoin.OnLeave"})
																} else {
																	v, ok := tf.Attrs["on_leave"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.RequireSessionJoin.OnLeave", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.RequireSessionJoin.OnLeave", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.OnLeave) == ""
																	}
																	v.Value = string(obj.OnLeave)
																	v.Unknown = false
																	tf.Attrs["on_leave"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.RequireSessionJoin) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["require_session_join"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["join_sessions"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.JoinSessions"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["join_sessions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions))
													}
												}
												if obj.JoinSessions != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.JoinSessions) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions))
													}
													for k, a := range obj.JoinSessions {
														v, ok := tf.Attrs["join_sessions"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.JoinSessions.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["roles"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Roles"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																			}
																		}
																		if obj.Roles != nil {
																			t := o.ElemType
																			if len(obj.Roles) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																			}
																			for k, a := range obj.Roles {
																				v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.JoinSessions.Roles", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Roles) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["roles"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["kinds"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																		}
																		if obj.Kinds != nil {
																			t := o.ElemType
																			if len(obj.Kinds) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																			for k, a := range obj.Kinds {
																				v, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.JoinSessions.Kinds", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Kinds) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["kinds"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["modes"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.JoinSessions.Modes"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																		}
																		if obj.Modes != nil {
																			t := o.ElemType
																			if len(obj.Modes) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																			for k, a := range obj.Modes {
																				v, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.JoinSessions.Modes", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Modes) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["modes"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.JoinSessions) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["join_sessions"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["host_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.HostGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["host_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups))
													}
												}
												if obj.HostGroups != nil {
													t := o.ElemType
													if len(obj.HostGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups))
													}
													for k, a := range obj.HostGroups {
														v, ok := tf.Attrs["host_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.HostGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.HostGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["host_groups"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["host_sudoers"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.HostSudoers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["host_sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers))
													}
												}
												if obj.HostSudoers != nil {
													t := o.ElemType
													if len(obj.HostSudoers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers))
													}
													for k, a := range obj.HostSudoers {
														v, ok := tf.Attrs["host_sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.HostSudoers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.HostSudoers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["host_sudoers"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["azure_identities"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.AzureIdentities"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["azure_identities"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities))
													}
												}
												if obj.AzureIdentities != nil {
													t := o.ElemType
													if len(obj.AzureIdentities) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities))
													}
													for k, a := range obj.AzureIdentities {
														v, ok := tf.Attrs["azure_identities"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.AzureIdentities", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AzureIdentities) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["azure_identities"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_resources"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubernetesResources"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_resources"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources))
													}
												}
												if obj.KubernetesResources != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.KubernetesResources) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources))
													}
													for k, a := range obj.KubernetesResources {
														v, ok := tf.Attrs["kubernetes_resources"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														{
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["kind"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Kind"})
																} else {
																	v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.KubernetesResources.Kind", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Kind) == ""
																	}
																	v.Value = string(obj.Kind)
																	v.Unknown = false
																	tf.Attrs["kind"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["namespace"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Namespace"})
																} else {
																	v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.KubernetesResources.Namespace", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Namespace) == ""
																	}
																	v.Value = string(obj.Namespace)
																	v.Unknown = false
																	tf.Attrs["namespace"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.KubernetesResources.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.KubernetesResources.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.KubernetesResources.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubernetesResources) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_resources"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["gcp_service_accounts"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.GCPServiceAccounts"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["gcp_service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts))
													}
												}
												if obj.GCPServiceAccounts != nil {
													t := o.ElemType
													if len(obj.GCPServiceAccounts) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts))
													}
													for k, a := range obj.GCPServiceAccounts {
														v, ok := tf.Attrs["gcp_service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.GCPServiceAccounts", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.GCPServiceAccounts) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["gcp_service_accounts"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["db_service_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.DatabaseServiceLabels"})
										} else {
											v := CopyToLabels(diags, obj.DatabaseServiceLabels, t, tf.Attrs["db_service_labels"])
											tf.Attrs["db_service_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["group_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.GroupLabels"})
										} else {
											v := CopyToLabels(diags, obj.GroupLabels, t, tf.Attrs["group_labels"])
											tf.Attrs["group_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["desktop_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Allow.DesktopGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["desktop_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups))
													}
												}
												if obj.DesktopGroups != nil {
													t := o.ElemType
													if len(obj.DesktopGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups))
													}
													for k, a := range obj.DesktopGroups {
														v, ok := tf.Attrs["desktop_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Allow.DesktopGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Allow.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DesktopGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["desktop_groups"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["allow"] = v
							}
						}
					}
					{
						a, ok := tf.AttrTypes["deny"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["deny"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								{
									obj := obj.Deny
									tf := &v
									{
										a, ok := tf.AttrTypes["logins"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Logins"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Logins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
													}
												}
												if obj.Logins != nil {
													t := o.ElemType
													if len(obj.Logins) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
													}
													for k, a := range obj.Logins {
														v, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Logins", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Logins", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Logins) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["logins"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["node_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.NodeLabels"})
										} else {
											v := CopyToLabels(diags, obj.NodeLabels, t, tf.Attrs["node_labels"])
											tf.Attrs["node_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["rules"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Rules"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["rules"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules))
													}
												}
												if obj.Rules != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.Rules) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Rules))
													}
													for k, a := range obj.Rules {
														v, ok := tf.Attrs["rules"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														{
															obj := a
															tf := &v
															{
																a, ok := tf.AttrTypes["resources"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Rules.Resources"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["resources"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources))
																			}
																		}
																		if obj.Resources != nil {
																			t := o.ElemType
																			if len(obj.Resources) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Resources))
																			}
																			for k, a := range obj.Resources {
																				v, ok := tf.Attrs["resources"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Rules.Resources", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Resources", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Resources) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["resources"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["verbs"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Rules.Verbs"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["verbs"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs))
																			}
																		}
																		if obj.Verbs != nil {
																			t := o.ElemType
																			if len(obj.Verbs) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Verbs))
																			}
																			for k, a := range obj.Verbs {
																				v, ok := tf.Attrs["verbs"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Rules.Verbs", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Verbs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Verbs) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["verbs"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["where"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Rules.Where"})
																} else {
																	v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Rules.Where", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Where) == ""
																	}
																	v.Value = string(obj.Where)
																	v.Unknown = false
																	tf.Attrs["where"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["actions"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Rules.Actions"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["actions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions))
																			}
																		}
																		if obj.Actions != nil {
																			t := o.ElemType
																			if len(obj.Actions) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Actions))
																			}
																			for k, a := range obj.Actions {
																				v, ok := tf.Attrs["actions"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Rules.Actions", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Rules.Actions", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Actions) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["actions"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.Rules) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["rules"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubeGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
													}
												}
												if obj.KubeGroups != nil {
													t := o.ElemType
													if len(obj.KubeGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
													}
													for k, a := range obj.KubeGroups {
														v, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.KubeGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubeGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_groups"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["request"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["request"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Request == nil {
													v.Null = true
												} else {
													obj := obj.Request
													tf := &v
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["claims_to_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																}
																if obj.ClaimsToRoles != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.ClaimsToRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																	for k, a := range obj.ClaimsToRoles {
																		v, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["claim"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Claim"})
																				} else {
																					v, ok := tf.Attrs["claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Claim", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Claim) == ""
																					}
																					v.Value = string(obj.Claim)
																					v.Unknown = false
																					tf.Attrs["claim"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["value"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Value"})
																				} else {
																					v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Value", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Value) == ""
																					}
																					v.Value = string(obj.Value)
																					v.Unknown = false
																					tf.Attrs["value"] = v
																				}
																			}
																			{
																				a, ok := tf.AttrTypes["roles"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles"})
																				} else {
																					o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																					} else {
																						c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							c = github_com_hashicorp_terraform_plugin_framework_types.List{

																								ElemType: o.ElemType,
																								Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																								Null:     true,
																							}
																						} else {
																							if c.Elems == nil {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																						}
																						if obj.Roles != nil {
																							t := o.ElemType
																							if len(obj.Roles) != len(c.Elems) {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																							for k, a := range obj.Roles {
																								v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																									if err != nil {
																										diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles", err})
																									}
																									v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									}
																									v.Null = string(a) == ""
																								}
																								v.Value = string(a)
																								v.Unknown = false
																								c.Elems[k] = v
																							}
																							if len(obj.Roles) > 0 {
																								c.Null = false
																							}
																						}
																						c.Unknown = false
																						tf.Attrs["roles"] = c
																					}
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.ClaimsToRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["claims_to_roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["annotations"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Annotations"})
														} else {
															v := CopyToTraits(diags, obj.Annotations, t, tf.Attrs["annotations"])
															tf.Attrs["annotations"] = v
														}
													}
													{
														a, ok := tf.AttrTypes["thresholds"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["thresholds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds))
																	}
																}
																if obj.Thresholds != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.Thresholds) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Thresholds))
																	}
																	for k, a := range obj.Thresholds {
																		v, ok := tf.Attrs["thresholds"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["name"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Name"})
																				} else {
																					v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.Thresholds.Name", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Name) == ""
																					}
																					v.Value = string(obj.Name)
																					v.Unknown = false
																					tf.Attrs["name"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["filter"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Filter"})
																				} else {
																					v, ok := tf.Attrs["filter"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.Thresholds.Filter", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Filter) == ""
																					}
																					v.Value = string(obj.Filter)
																					v.Unknown = false
																					tf.Attrs["filter"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["approve"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Approve"})
																				} else {
																					v, ok := tf.Attrs["approve"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.Thresholds.Approve", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Approve", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.Approve) == 0
																					}
																					v.Value = int64(obj.Approve)
																					v.Unknown = false
																					tf.Attrs["approve"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["deny"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.Thresholds.Deny"})
																				} else {
																					v, ok := tf.Attrs["deny"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.Thresholds.Deny", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.Thresholds.Deny", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																						}
																						v.Null = int64(obj.Deny) == 0
																					}
																					v.Value = int64(obj.Deny)
																					v.Unknown = false
																					tf.Attrs["deny"] = v
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Thresholds) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["thresholds"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["suggested_reviewers"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["suggested_reviewers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers))
																	}
																}
																if obj.SuggestedReviewers != nil {
																	t := o.ElemType
																	if len(obj.SuggestedReviewers) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SuggestedReviewers))
																	}
																	for k, a := range obj.SuggestedReviewers {
																		v, ok := tf.Attrs["suggested_reviewers"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.SuggestedReviewers", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.SuggestedReviewers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.SuggestedReviewers) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["suggested_reviewers"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["search_as_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["search_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles))
																	}
																}
																if obj.SearchAsRoles != nil {
																	t := o.ElemType
																	if len(obj.SearchAsRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SearchAsRoles))
																	}
																	for k, a := range obj.SearchAsRoles {
																		v, ok := tf.Attrs["search_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Request.SearchAsRoles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Request.SearchAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.SearchAsRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["search_as_roles"] = c
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["request"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_users"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubeUsers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
													}
												}
												if obj.KubeUsers != nil {
													t := o.ElemType
													if len(obj.KubeUsers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
													}
													for k, a := range obj.KubeUsers {
														v, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.KubeUsers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubeUsers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_users"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["app_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.AppLabels"})
										} else {
											v := CopyToLabels(diags, obj.AppLabels, t, tf.Attrs["app_labels"])
											tf.Attrs["app_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["cluster_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ClusterLabels"})
										} else {
											v := CopyToLabels(diags, obj.ClusterLabels, t, tf.Attrs["cluster_labels"])
											tf.Attrs["cluster_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["kubernetes_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubernetesLabels"})
										} else {
											v := CopyToLabels(diags, obj.KubernetesLabels, t, tf.Attrs["kubernetes_labels"])
											tf.Attrs["kubernetes_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["db_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.DatabaseLabels"})
										} else {
											v := CopyToLabels(diags, obj.DatabaseLabels, t, tf.Attrs["db_labels"])
											tf.Attrs["db_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["db_names"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.DatabaseNames"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["db_names"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames))
													}
												}
												if obj.DatabaseNames != nil {
													t := o.ElemType
													if len(obj.DatabaseNames) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseNames))
													}
													for k, a := range obj.DatabaseNames {
														v, ok := tf.Attrs["db_names"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.DatabaseNames", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseNames", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DatabaseNames) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["db_names"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["db_users"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.DatabaseUsers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["db_users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers))
													}
												}
												if obj.DatabaseUsers != nil {
													t := o.ElemType
													if len(obj.DatabaseUsers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DatabaseUsers))
													}
													for k, a := range obj.DatabaseUsers {
														v, ok := tf.Attrs["db_users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.DatabaseUsers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DatabaseUsers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DatabaseUsers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["db_users"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["impersonate"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Impersonate"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["impersonate"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.Impersonate == nil {
													v.Null = true
												} else {
													obj := obj.Impersonate
													tf := &v
													{
														a, ok := tf.AttrTypes["users"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Impersonate.Users"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users))
																	}
																}
																if obj.Users != nil {
																	t := o.ElemType
																	if len(obj.Users) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Users))
																	}
																	for k, a := range obj.Users {
																		v, ok := tf.Attrs["users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Impersonate.Users", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Users", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Users) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["users"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Impersonate.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Impersonate.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["where"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.Impersonate.Where"})
														} else {
															v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.Impersonate.Where", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.Impersonate.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Where) == ""
															}
															v.Value = string(obj.Where)
															v.Unknown = false
															tf.Attrs["where"] = v
														}
													}
												}
												v.Unknown = false
												tf.Attrs["impersonate"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["review_requests"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
											} else {
												v, ok := tf.Attrs["review_requests"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
												if !ok {
													v = github_com_hashicorp_terraform_plugin_framework_types.Object{

														AttrTypes: o.AttrTypes,
														Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
													}
												} else {
													if v.Attrs == nil {
														v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
													}
												}
												if obj.ReviewRequests == nil {
													v.Null = true
												} else {
													obj := obj.ReviewRequests
													tf := &v
													{
														a, ok := tf.AttrTypes["roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																}
																if obj.Roles != nil {
																	t := o.ElemType
																	if len(obj.Roles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																	}
																	for k, a := range obj.Roles {
																		v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.Roles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.Roles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["roles"] = c
															}
														}
													}
													{
														a, ok := tf.AttrTypes["claims_to_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																}
																if obj.ClaimsToRoles != nil {
																	o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
																	if len(obj.ClaimsToRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
																	}
																	for k, a := range obj.ClaimsToRoles {
																		v, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
																		if !ok {
																			v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																				AttrTypes: o.AttrTypes,
																				Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
																			}
																		} else {
																			if v.Attrs == nil {
																				v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
																			}
																		}
																		{
																			obj := a
																			tf := &v
																			{
																				t, ok := tf.AttrTypes["claim"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Claim"})
																				} else {
																					v, ok := tf.Attrs["claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Claim", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Claim) == ""
																					}
																					v.Value = string(obj.Claim)
																					v.Unknown = false
																					tf.Attrs["claim"] = v
																				}
																			}
																			{
																				t, ok := tf.AttrTypes["value"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Value"})
																				} else {
																					v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																						if err != nil {
																							diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Value", err})
																						}
																						v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																						if !ok {
																							diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																						}
																						v.Null = string(obj.Value) == ""
																					}
																					v.Value = string(obj.Value)
																					v.Unknown = false
																					tf.Attrs["value"] = v
																				}
																			}
																			{
																				a, ok := tf.AttrTypes["roles"]
																				if !ok {
																					diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles"})
																				} else {
																					o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																					} else {
																						c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																						if !ok {
																							c = github_com_hashicorp_terraform_plugin_framework_types.List{

																								ElemType: o.ElemType,
																								Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																								Null:     true,
																							}
																						} else {
																							if c.Elems == nil {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																						}
																						if obj.Roles != nil {
																							t := o.ElemType
																							if len(obj.Roles) != len(c.Elems) {
																								c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																							}
																							for k, a := range obj.Roles {
																								v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																								if !ok {
																									i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																									if err != nil {
																										diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles", err})
																									}
																									v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																									if !ok {
																										diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																									}
																									v.Null = string(a) == ""
																								}
																								v.Value = string(a)
																								v.Unknown = false
																								c.Elems[k] = v
																							}
																							if len(obj.Roles) > 0 {
																								c.Null = false
																							}
																						}
																						c.Unknown = false
																						tf.Attrs["roles"] = c
																					}
																				}
																			}
																		}
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.ClaimsToRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["claims_to_roles"] = c
															}
														}
													}
													{
														t, ok := tf.AttrTypes["where"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.Where"})
														} else {
															v, ok := tf.Attrs["where"].(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																if err != nil {
																	diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.Where", err})
																}
																v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.Where", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																}
																v.Null = string(obj.Where) == ""
															}
															v.Value = string(obj.Where)
															v.Unknown = false
															tf.Attrs["where"] = v
														}
													}
													{
														a, ok := tf.AttrTypes["preview_as_roles"]
														if !ok {
															diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles"})
														} else {
															o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
															} else {
																c, ok := tf.Attrs["preview_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																if !ok {
																	c = github_com_hashicorp_terraform_plugin_framework_types.List{

																		ElemType: o.ElemType,
																		Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles)),
																		Null:     true,
																	}
																} else {
																	if c.Elems == nil {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles))
																	}
																}
																if obj.PreviewAsRoles != nil {
																	t := o.ElemType
																	if len(obj.PreviewAsRoles) != len(c.Elems) {
																		c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.PreviewAsRoles))
																	}
																	for k, a := range obj.PreviewAsRoles {
																		v, ok := tf.Attrs["preview_as_roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																			if err != nil {
																				diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles", err})
																			}
																			v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																			if !ok {
																				diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.ReviewRequests.PreviewAsRoles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																			}
																			v.Null = string(a) == ""
																		}
																		v.Value = string(a)
																		v.Unknown = false
																		c.Elems[k] = v
																	}
																	if len(obj.PreviewAsRoles) > 0 {
																		c.Null = false
																	}
																}
																c.Unknown = false
																tf.Attrs["preview_as_roles"] = c
															}
														}
													}
												}
												v.Unknown = false
												tf.Attrs["review_requests"] = v
											}
										}
									}
									{
										a, ok := tf.AttrTypes["aws_role_arns"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.AWSRoleARNs"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["aws_role_arns"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs))
													}
												}
												if obj.AWSRoleARNs != nil {
													t := o.ElemType
													if len(obj.AWSRoleARNs) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AWSRoleARNs))
													}
													for k, a := range obj.AWSRoleARNs {
														v, ok := tf.Attrs["aws_role_arns"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.AWSRoleARNs", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.AWSRoleARNs", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AWSRoleARNs) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["aws_role_arns"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["windows_desktop_logins"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["windows_desktop_logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins))
													}
												}
												if obj.WindowsDesktopLogins != nil {
													t := o.ElemType
													if len(obj.WindowsDesktopLogins) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.WindowsDesktopLogins))
													}
													for k, a := range obj.WindowsDesktopLogins {
														v, ok := tf.Attrs["windows_desktop_logins"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.WindowsDesktopLogins", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.WindowsDesktopLogins", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.WindowsDesktopLogins) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["windows_desktop_logins"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["windows_desktop_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.WindowsDesktopLabels"})
										} else {
											v := CopyToLabels(diags, obj.WindowsDesktopLabels, t, tf.Attrs["windows_desktop_labels"])
											tf.Attrs["windows_desktop_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["require_session_join"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["require_session_join"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin))
													}
												}
												if obj.RequireSessionJoin != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.RequireSessionJoin) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RequireSessionJoin))
													}
													for k, a := range obj.RequireSessionJoin {
														v, ok := tf.Attrs["require_session_join"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["filter"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Filter"})
																} else {
																	v, ok := tf.Attrs["filter"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.Filter", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Filter", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Filter) == ""
																	}
																	v.Value = string(obj.Filter)
																	v.Unknown = false
																	tf.Attrs["filter"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["kinds"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																		}
																		if obj.Kinds != nil {
																			t := o.ElemType
																			if len(obj.Kinds) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																			for k, a := range obj.Kinds {
																				v, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Kinds) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["kinds"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["count"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Count"})
																} else {
																	v, ok := tf.Attrs["count"].(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.Count", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Int64)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Count", "github.com/hashicorp/terraform-plugin-framework/types.Int64"})
																		}
																		v.Null = int64(obj.Count) == 0
																	}
																	v.Value = int64(obj.Count)
																	v.Unknown = false
																	tf.Attrs["count"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["modes"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																		}
																		if obj.Modes != nil {
																			t := o.ElemType
																			if len(obj.Modes) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																			for k, a := range obj.Modes {
																				v, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.Modes", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.Modes", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Modes) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["modes"] = c
																	}
																}
															}
															{
																t, ok := tf.AttrTypes["on_leave"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.RequireSessionJoin.OnLeave"})
																} else {
																	v, ok := tf.Attrs["on_leave"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.RequireSessionJoin.OnLeave", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.RequireSessionJoin.OnLeave", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.OnLeave) == ""
																	}
																	v.Value = string(obj.OnLeave)
																	v.Unknown = false
																	tf.Attrs["on_leave"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.RequireSessionJoin) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["require_session_join"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["join_sessions"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.JoinSessions"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["join_sessions"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions))
													}
												}
												if obj.JoinSessions != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.JoinSessions) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.JoinSessions))
													}
													for k, a := range obj.JoinSessions {
														v, ok := tf.Attrs["join_sessions"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														if a == nil {
															v.Null = true
														} else {
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.JoinSessions.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
															{
																a, ok := tf.AttrTypes["roles"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Roles"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																			}
																		}
																		if obj.Roles != nil {
																			t := o.ElemType
																			if len(obj.Roles) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
																			}
																			for k, a := range obj.Roles {
																				v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.JoinSessions.Roles", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Roles) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["roles"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["kinds"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																		}
																		if obj.Kinds != nil {
																			t := o.ElemType
																			if len(obj.Kinds) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Kinds))
																			}
																			for k, a := range obj.Kinds {
																				v, ok := tf.Attrs["kinds"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.JoinSessions.Kinds", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Kinds", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Kinds) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["kinds"] = c
																	}
																}
															}
															{
																a, ok := tf.AttrTypes["modes"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.JoinSessions.Modes"})
																} else {
																	o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
																	} else {
																		c, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.List)
																		if !ok {
																			c = github_com_hashicorp_terraform_plugin_framework_types.List{

																				ElemType: o.ElemType,
																				Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes)),
																				Null:     true,
																			}
																		} else {
																			if c.Elems == nil {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																		}
																		if obj.Modes != nil {
																			t := o.ElemType
																			if len(obj.Modes) != len(c.Elems) {
																				c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Modes))
																			}
																			for k, a := range obj.Modes {
																				v, ok := tf.Attrs["modes"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																				if !ok {
																					i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																					if err != nil {
																						diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.JoinSessions.Modes", err})
																					}
																					v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																					if !ok {
																						diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.JoinSessions.Modes", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																					}
																					v.Null = string(a) == ""
																				}
																				v.Value = string(a)
																				v.Unknown = false
																				c.Elems[k] = v
																			}
																			if len(obj.Modes) > 0 {
																				c.Null = false
																			}
																		}
																		c.Unknown = false
																		tf.Attrs["modes"] = c
																	}
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.JoinSessions) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["join_sessions"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["host_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.HostGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["host_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups))
													}
												}
												if obj.HostGroups != nil {
													t := o.ElemType
													if len(obj.HostGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostGroups))
													}
													for k, a := range obj.HostGroups {
														v, ok := tf.Attrs["host_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.HostGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.HostGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.HostGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["host_groups"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["host_sudoers"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.HostSudoers"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["host_sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers))
													}
												}
												if obj.HostSudoers != nil {
													t := o.ElemType
													if len(obj.HostSudoers) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.HostSudoers))
													}
													for k, a := range obj.HostSudoers {
														v, ok := tf.Attrs["host_sudoers"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.HostSudoers", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.HostSudoers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.HostSudoers) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["host_sudoers"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["azure_identities"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.AzureIdentities"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["azure_identities"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities))
													}
												}
												if obj.AzureIdentities != nil {
													t := o.ElemType
													if len(obj.AzureIdentities) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AzureIdentities))
													}
													for k, a := range obj.AzureIdentities {
														v, ok := tf.Attrs["azure_identities"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.AzureIdentities", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.AzureIdentities", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.AzureIdentities) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["azure_identities"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["kubernetes_resources"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubernetesResources"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["kubernetes_resources"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources))
													}
												}
												if obj.KubernetesResources != nil {
													o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
													if len(obj.KubernetesResources) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubernetesResources))
													}
													for k, a := range obj.KubernetesResources {
														v, ok := tf.Attrs["kubernetes_resources"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
														if !ok {
															v = github_com_hashicorp_terraform_plugin_framework_types.Object{

																AttrTypes: o.AttrTypes,
																Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
															}
														} else {
															if v.Attrs == nil {
																v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
															}
														}
														{
															obj := a
															tf := &v
															{
																t, ok := tf.AttrTypes["kind"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Kind"})
																} else {
																	v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.KubernetesResources.Kind", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Kind) == ""
																	}
																	v.Value = string(obj.Kind)
																	v.Unknown = false
																	tf.Attrs["kind"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["namespace"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Namespace"})
																} else {
																	v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.KubernetesResources.Namespace", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Namespace) == ""
																	}
																	v.Value = string(obj.Namespace)
																	v.Unknown = false
																	tf.Attrs["namespace"] = v
																}
															}
															{
																t, ok := tf.AttrTypes["name"]
																if !ok {
																	diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.KubernetesResources.Name"})
																} else {
																	v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																		if err != nil {
																			diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.KubernetesResources.Name", err})
																		}
																		v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																		if !ok {
																			diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.KubernetesResources.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																		}
																		v.Null = string(obj.Name) == ""
																	}
																	v.Value = string(obj.Name)
																	v.Unknown = false
																	tf.Attrs["name"] = v
																}
															}
														}
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.KubernetesResources) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["kubernetes_resources"] = c
											}
										}
									}
									{
										a, ok := tf.AttrTypes["gcp_service_accounts"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.GCPServiceAccounts"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["gcp_service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts))
													}
												}
												if obj.GCPServiceAccounts != nil {
													t := o.ElemType
													if len(obj.GCPServiceAccounts) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GCPServiceAccounts))
													}
													for k, a := range obj.GCPServiceAccounts {
														v, ok := tf.Attrs["gcp_service_accounts"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.GCPServiceAccounts", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.GCPServiceAccounts", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.GCPServiceAccounts) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["gcp_service_accounts"] = c
											}
										}
									}
									{
										t, ok := tf.AttrTypes["db_service_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.DatabaseServiceLabels"})
										} else {
											v := CopyToLabels(diags, obj.DatabaseServiceLabels, t, tf.Attrs["db_service_labels"])
											tf.Attrs["db_service_labels"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["group_labels"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.GroupLabels"})
										} else {
											v := CopyToLabels(diags, obj.GroupLabels, t, tf.Attrs["group_labels"])
											tf.Attrs["group_labels"] = v
										}
									}
									{
										a, ok := tf.AttrTypes["desktop_groups"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"RoleV6.Spec.Deny.DesktopGroups"})
										} else {
											o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
											} else {
												c, ok := tf.Attrs["desktop_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
												if !ok {
													c = github_com_hashicorp_terraform_plugin_framework_types.List{

														ElemType: o.ElemType,
														Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups)),
														Null:     true,
													}
												} else {
													if c.Elems == nil {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups))
													}
												}
												if obj.DesktopGroups != nil {
													t := o.ElemType
													if len(obj.DesktopGroups) != len(c.Elems) {
														c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.DesktopGroups))
													}
													for k, a := range obj.DesktopGroups {
														v, ok := tf.Attrs["desktop_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
															if err != nil {
																diags.Append(attrWriteGeneralError{"RoleV6.Spec.Deny.DesktopGroups", err})
															}
															v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
															if !ok {
																diags.Append(attrWriteConversionFailureDiag{"RoleV6.Spec.Deny.DesktopGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
															}
															v.Null = string(a) == ""
														}
														v.Value = string(a)
														v.Unknown = false
														c.Elems[k] = v
													}
													if len(obj.DesktopGroups) > 0 {
														c.Null = false
													}
												}
												c.Unknown = false
												tf.Attrs["desktop_groups"] = c
											}
										}
									}
								}
								v.Unknown = false
								tf.Attrs["deny"] = v
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyUserV2FromTerraform copies contents of the source Terraform object into a target struct
func CopyUserV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.UserV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"UserV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"UserV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"UserV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"UserV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"UserV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"UserV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"UserV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"UserV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"UserV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.UserSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["oidc_identities"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Spec.OIDCIdentities"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.OIDCIdentities", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.OIDCIdentities = make([]github_com_gravitational_teleport_api_types.ExternalIdentity, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.OIDCIdentities", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.ExternalIdentity
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["connector_id"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.OIDCIdentities.ConnectorID"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.OIDCIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.ConnectorID = t
														}
													}
												}
												{
													a, ok := tf.Attrs["username"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.OIDCIdentities.Username"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.OIDCIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Username = t
														}
													}
												}
											}
											obj.OIDCIdentities[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["saml_identities"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Spec.SAMLIdentities"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.SAMLIdentities", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.SAMLIdentities = make([]github_com_gravitational_teleport_api_types.ExternalIdentity, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.SAMLIdentities", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.ExternalIdentity
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["connector_id"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.SAMLIdentities.ConnectorID"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.SAMLIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.ConnectorID = t
														}
													}
												}
												{
													a, ok := tf.Attrs["username"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.SAMLIdentities.Username"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.SAMLIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Username = t
														}
													}
												}
											}
											obj.SAMLIdentities[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["github_identities"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Spec.GithubIdentities"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.GithubIdentities", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.GithubIdentities = make([]github_com_gravitational_teleport_api_types.ExternalIdentity, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.GithubIdentities", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.ExternalIdentity
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["connector_id"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.GithubIdentities.ConnectorID"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.GithubIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.ConnectorID = t
														}
													}
												}
												{
													a, ok := tf.Attrs["username"]
													if !ok {
														diags.Append(attrReadMissingDiag{"UserV2.Spec.GithubIdentities.Username"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.GithubIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Username = t
														}
													}
												}
											}
											obj.GithubIdentities[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Spec.Roles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Roles = make([]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"UserV2.Spec.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Roles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["traits"]
						if !ok {
							diags.Append(attrReadMissingDiag{"UserV2.Spec.Traits"})
						}
						CopyFromTraits(diags, a, &obj.Traits)
					}
				}
			}
		}
	}
	return diags
}

// CopyUserV2ToTerraform copies contents of the source Terraform object into a target struct
func CopyUserV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.UserV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"UserV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"UserV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"UserV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"UserV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"UserV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"UserV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"UserV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"UserV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"UserV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"UserV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"UserV2.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"UserV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"UserV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"UserV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"UserV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"UserV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"UserV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						a, ok := tf.AttrTypes["oidc_identities"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Spec.OIDCIdentities"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.OIDCIdentities", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["oidc_identities"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.OIDCIdentities)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.OIDCIdentities))
									}
								}
								if obj.OIDCIdentities != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.OIDCIdentities) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.OIDCIdentities))
									}
									for k, a := range obj.OIDCIdentities {
										v, ok := tf.Attrs["oidc_identities"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["connector_id"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.OIDCIdentities.ConnectorID"})
												} else {
													v, ok := tf.Attrs["connector_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.OIDCIdentities.ConnectorID", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.OIDCIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.ConnectorID) == ""
													}
													v.Value = string(obj.ConnectorID)
													v.Unknown = false
													tf.Attrs["connector_id"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["username"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.OIDCIdentities.Username"})
												} else {
													v, ok := tf.Attrs["username"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.OIDCIdentities.Username", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.OIDCIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Username) == ""
													}
													v.Value = string(obj.Username)
													v.Unknown = false
													tf.Attrs["username"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.OIDCIdentities) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["oidc_identities"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["saml_identities"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Spec.SAMLIdentities"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.SAMLIdentities", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["saml_identities"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SAMLIdentities)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SAMLIdentities))
									}
								}
								if obj.SAMLIdentities != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.SAMLIdentities) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.SAMLIdentities))
									}
									for k, a := range obj.SAMLIdentities {
										v, ok := tf.Attrs["saml_identities"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["connector_id"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.SAMLIdentities.ConnectorID"})
												} else {
													v, ok := tf.Attrs["connector_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.SAMLIdentities.ConnectorID", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.SAMLIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.ConnectorID) == ""
													}
													v.Value = string(obj.ConnectorID)
													v.Unknown = false
													tf.Attrs["connector_id"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["username"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.SAMLIdentities.Username"})
												} else {
													v, ok := tf.Attrs["username"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.SAMLIdentities.Username", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.SAMLIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Username) == ""
													}
													v.Value = string(obj.Username)
													v.Unknown = false
													tf.Attrs["username"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.SAMLIdentities) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["saml_identities"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["github_identities"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Spec.GithubIdentities"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.GithubIdentities", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["github_identities"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GithubIdentities)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GithubIdentities))
									}
								}
								if obj.GithubIdentities != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.GithubIdentities) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.GithubIdentities))
									}
									for k, a := range obj.GithubIdentities {
										v, ok := tf.Attrs["github_identities"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["connector_id"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.GithubIdentities.ConnectorID"})
												} else {
													v, ok := tf.Attrs["connector_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.GithubIdentities.ConnectorID", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.GithubIdentities.ConnectorID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.ConnectorID) == ""
													}
													v.Value = string(obj.ConnectorID)
													v.Unknown = false
													tf.Attrs["connector_id"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["username"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"UserV2.Spec.GithubIdentities.Username"})
												} else {
													v, ok := tf.Attrs["username"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"UserV2.Spec.GithubIdentities.Username", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.GithubIdentities.Username", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Username) == ""
													}
													v.Value = string(obj.Username)
													v.Unknown = false
													tf.Attrs["username"] = v
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.GithubIdentities) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["github_identities"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Spec.Roles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
								}
								if obj.Roles != nil {
									t := o.ElemType
									if len(obj.Roles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
									for k, a := range obj.Roles {
										v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"UserV2.Spec.Roles", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"UserV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Roles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["roles"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["traits"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"UserV2.Spec.Traits"})
						} else {
							v := CopyToTraits(diags, obj.Traits, t, tf.Attrs["traits"])
							tf.Attrs["traits"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyOIDCConnectorV3FromTerraform copies contents of the source Terraform object into a target struct
func CopyOIDCConnectorV3FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.OIDCConnectorV3) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"OIDCConnectorV3.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.OIDCConnectorSpecV3{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["issuer_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.IssuerURL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.IssuerURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.IssuerURL = t
							}
						}
					}
					{
						a, ok := tf.Attrs["client_id"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClientID"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClientID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ClientID = t
							}
						}
					}
					{
						a, ok := tf.Attrs["client_secret"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClientSecret"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClientSecret", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ClientSecret = t
							}
						}
					}
					{
						a, ok := tf.Attrs["acr_values"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ACR"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ACR", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ACR = t
							}
						}
					}
					{
						a, ok := tf.Attrs["provider"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.Provider"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.Provider", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Provider = t
							}
						}
					}
					{
						a, ok := tf.Attrs["display"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.Display"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Display = t
							}
						}
					}
					{
						a, ok := tf.Attrs["scope"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.Scope"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.Scope", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Scope = make([]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.Scope", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Scope[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["prompt"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.Prompt"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.Prompt", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Prompt = t
							}
						}
					}
					{
						a, ok := tf.Attrs["claims_to_roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.ClaimsToRoles = make([]github_com_gravitational_teleport_api_types.ClaimMapping, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.ClaimMapping
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["claim"]
													if !ok {
														diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Claim"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Claim = t
														}
													}
												}
												{
													a, ok := tf.Attrs["value"]
													if !ok {
														diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Value"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Value = t
														}
													}
												}
												{
													a, ok := tf.Attrs["roles"]
													if !ok {
														diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Roles = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Roles[k] = t
																	}
																}
															}
														}
													}
												}
											}
											obj.ClaimsToRoles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["google_service_account_uri"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.GoogleServiceAccountURI"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleServiceAccountURI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.GoogleServiceAccountURI = t
							}
						}
					}
					{
						a, ok := tf.Attrs["google_service_account"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.GoogleServiceAccount"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleServiceAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.GoogleServiceAccount = t
							}
						}
					}
					{
						a, ok := tf.Attrs["google_admin_email"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.GoogleAdminEmail"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleAdminEmail", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.GoogleAdminEmail = t
							}
						}
					}
					{
						a, ok := tf.Attrs["redirect_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.RedirectURLs"})
						}
						CopyFromStrings(diags, a, &obj.RedirectURLs)
					}
					{
						a, ok := tf.Attrs["allow_unverified_email"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.AllowUnverifiedEmail"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.AllowUnverifiedEmail", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
							} else {
								var t bool
								if !v.Null && !v.Unknown {
									t = bool(v.Value)
								}
								obj.AllowUnverifiedEmail = t
							}
						}
					}
					{
						a, ok := tf.Attrs["username_claim"]
						if !ok {
							diags.Append(attrReadMissingDiag{"OIDCConnectorV3.Spec.UsernameClaim"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"OIDCConnectorV3.Spec.UsernameClaim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.UsernameClaim = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyOIDCConnectorV3ToTerraform copies contents of the source Terraform object into a target struct
func CopyOIDCConnectorV3ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.OIDCConnectorV3, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"OIDCConnectorV3.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["issuer_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.IssuerURL"})
						} else {
							v, ok := tf.Attrs["issuer_url"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.IssuerURL", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.IssuerURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.IssuerURL) == ""
							}
							v.Value = string(obj.IssuerURL)
							v.Unknown = false
							tf.Attrs["issuer_url"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["client_id"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClientID"})
						} else {
							v, ok := tf.Attrs["client_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ClientID", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClientID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ClientID) == ""
							}
							v.Value = string(obj.ClientID)
							v.Unknown = false
							tf.Attrs["client_id"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["client_secret"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClientSecret"})
						} else {
							v, ok := tf.Attrs["client_secret"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ClientSecret", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClientSecret", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ClientSecret) == ""
							}
							v.Value = string(obj.ClientSecret)
							v.Unknown = false
							tf.Attrs["client_secret"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["acr_values"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ACR"})
						} else {
							v, ok := tf.Attrs["acr_values"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ACR", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ACR", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ACR) == ""
							}
							v.Value = string(obj.ACR)
							v.Unknown = false
							tf.Attrs["acr_values"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["provider"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.Provider"})
						} else {
							v, ok := tf.Attrs["provider"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.Provider", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.Provider", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Provider) == ""
							}
							v.Value = string(obj.Provider)
							v.Unknown = false
							tf.Attrs["provider"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["display"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.Display"})
						} else {
							v, ok := tf.Attrs["display"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.Display", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Display) == ""
							}
							v.Value = string(obj.Display)
							v.Unknown = false
							tf.Attrs["display"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["scope"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.Scope"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.Scope", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["scope"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Scope)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Scope))
									}
								}
								if obj.Scope != nil {
									t := o.ElemType
									if len(obj.Scope) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Scope))
									}
									for k, a := range obj.Scope {
										v, ok := tf.Attrs["scope"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.Scope", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.Scope", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Scope) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["scope"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["prompt"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.Prompt"})
						} else {
							v, ok := tf.Attrs["prompt"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.Prompt", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.Prompt", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Prompt) == ""
							}
							v.Value = string(obj.Prompt)
							v.Unknown = false
							tf.Attrs["prompt"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["claims_to_roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
									}
								}
								if obj.ClaimsToRoles != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.ClaimsToRoles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.ClaimsToRoles))
									}
									for k, a := range obj.ClaimsToRoles {
										v, ok := tf.Attrs["claims_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["claim"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Claim"})
												} else {
													v, ok := tf.Attrs["claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ClaimsToRoles.Claim", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Claim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Claim) == ""
													}
													v.Value = string(obj.Claim)
													v.Unknown = false
													tf.Attrs["claim"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["value"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Value"})
												} else {
													v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ClaimsToRoles.Value", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Value) == ""
													}
													v.Value = string(obj.Value)
													v.Unknown = false
													tf.Attrs["value"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["roles"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
														}
														if obj.Roles != nil {
															t := o.ElemType
															if len(obj.Roles) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
															for k, a := range obj.Roles {
																v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.ClaimsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Roles) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["roles"] = c
													}
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.ClaimsToRoles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["claims_to_roles"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["google_service_account_uri"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.GoogleServiceAccountURI"})
						} else {
							v, ok := tf.Attrs["google_service_account_uri"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.GoogleServiceAccountURI", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleServiceAccountURI", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.GoogleServiceAccountURI) == ""
							}
							v.Value = string(obj.GoogleServiceAccountURI)
							v.Unknown = false
							tf.Attrs["google_service_account_uri"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["google_service_account"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.GoogleServiceAccount"})
						} else {
							v, ok := tf.Attrs["google_service_account"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.GoogleServiceAccount", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleServiceAccount", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.GoogleServiceAccount) == ""
							}
							v.Value = string(obj.GoogleServiceAccount)
							v.Unknown = false
							tf.Attrs["google_service_account"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["google_admin_email"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.GoogleAdminEmail"})
						} else {
							v, ok := tf.Attrs["google_admin_email"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.GoogleAdminEmail", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.GoogleAdminEmail", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.GoogleAdminEmail) == ""
							}
							v.Value = string(obj.GoogleAdminEmail)
							v.Unknown = false
							tf.Attrs["google_admin_email"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["redirect_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.RedirectURLs"})
						} else {
							v := CopyToStrings(diags, obj.RedirectURLs, t, tf.Attrs["redirect_url"])
							tf.Attrs["redirect_url"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["allow_unverified_email"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.AllowUnverifiedEmail"})
						} else {
							v, ok := tf.Attrs["allow_unverified_email"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.AllowUnverifiedEmail", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.AllowUnverifiedEmail", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
								}
								v.Null = bool(obj.AllowUnverifiedEmail) == false
							}
							v.Value = bool(obj.AllowUnverifiedEmail)
							v.Unknown = false
							tf.Attrs["allow_unverified_email"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["username_claim"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"OIDCConnectorV3.Spec.UsernameClaim"})
						} else {
							v, ok := tf.Attrs["username_claim"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"OIDCConnectorV3.Spec.UsernameClaim", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"OIDCConnectorV3.Spec.UsernameClaim", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.UsernameClaim) == ""
							}
							v.Value = string(obj.UsernameClaim)
							v.Unknown = false
							tf.Attrs["username_claim"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopySAMLConnectorV2FromTerraform copies contents of the source Terraform object into a target struct
func CopySAMLConnectorV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.SAMLConnectorV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SAMLConnectorV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.SAMLConnectorSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["issuer"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.Issuer"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.Issuer", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Issuer = t
							}
						}
					}
					{
						a, ok := tf.Attrs["sso"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.SSO"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.SSO", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.SSO = t
							}
						}
					}
					{
						a, ok := tf.Attrs["cert"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.Cert"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Cert = t
							}
						}
					}
					{
						a, ok := tf.Attrs["display"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.Display"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Display = t
							}
						}
					}
					{
						a, ok := tf.Attrs["acs"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AssertionConsumerService"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AssertionConsumerService", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.AssertionConsumerService = t
							}
						}
					}
					{
						a, ok := tf.Attrs["audience"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.Audience"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.Audience", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Audience = t
							}
						}
					}
					{
						a, ok := tf.Attrs["service_provider_issuer"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.ServiceProviderIssuer"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.ServiceProviderIssuer", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ServiceProviderIssuer = t
							}
						}
					}
					{
						a, ok := tf.Attrs["entity_descriptor"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.EntityDescriptor"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.EntityDescriptor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.EntityDescriptor = t
							}
						}
					}
					{
						a, ok := tf.Attrs["entity_descriptor_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.EntityDescriptorURL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.EntityDescriptorURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.EntityDescriptorURL = t
							}
						}
					}
					{
						a, ok := tf.Attrs["attributes_to_roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.AttributesToRoles = make([]github_com_gravitational_teleport_api_types.AttributeMapping, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.AttributeMapping
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["name"]
													if !ok {
														diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Name"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Name = t
														}
													}
												}
												{
													a, ok := tf.Attrs["value"]
													if !ok {
														diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Value"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Value = t
														}
													}
												}
												{
													a, ok := tf.Attrs["roles"]
													if !ok {
														diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Roles = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Roles[k] = t
																	}
																}
															}
														}
													}
												}
											}
											obj.AttributesToRoles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["signing_key_pair"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.SigningKeyPair = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.SigningKeyPair = &github_com_gravitational_teleport_api_types.AsymmetricKeyPair{}
									obj := obj.SigningKeyPair
									{
										a, ok := tf.Attrs["private_key"]
										if !ok {
											diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair.PrivateKey"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair.PrivateKey", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.PrivateKey = t
											}
										}
									}
									{
										a, ok := tf.Attrs["cert"]
										if !ok {
											diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair.Cert"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Cert = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["provider"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.Provider"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.Provider", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Provider = t
							}
						}
					}
					{
						a, ok := tf.Attrs["assertion_key_pair"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
							} else {
								obj.EncryptionKeyPair = nil
								if !v.Null && !v.Unknown {
									tf := v
									obj.EncryptionKeyPair = &github_com_gravitational_teleport_api_types.AsymmetricKeyPair{}
									obj := obj.EncryptionKeyPair
									{
										a, ok := tf.Attrs["private_key"]
										if !ok {
											diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.PrivateKey"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.PrivateKey", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.PrivateKey = t
											}
										}
									}
									{
										a, ok := tf.Attrs["cert"]
										if !ok {
											diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.Cert"})
										} else {
											v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											} else {
												var t string
												if !v.Null && !v.Unknown {
													t = string(v.Value)
												}
												obj.Cert = t
											}
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["allow_idp_initiated"]
						if !ok {
							diags.Append(attrReadMissingDiag{"SAMLConnectorV2.Spec.AllowIDPInitiated"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"SAMLConnectorV2.Spec.AllowIDPInitiated", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
							} else {
								var t bool
								if !v.Null && !v.Unknown {
									t = bool(v.Value)
								}
								obj.AllowIDPInitiated = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopySAMLConnectorV2ToTerraform copies contents of the source Terraform object into a target struct
func CopySAMLConnectorV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.SAMLConnectorV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SAMLConnectorV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["issuer"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.Issuer"})
						} else {
							v, ok := tf.Attrs["issuer"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.Issuer", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.Issuer", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Issuer) == ""
							}
							v.Value = string(obj.Issuer)
							v.Unknown = false
							tf.Attrs["issuer"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["sso"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.SSO"})
						} else {
							v, ok := tf.Attrs["sso"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.SSO", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.SSO", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.SSO) == ""
							}
							v.Value = string(obj.SSO)
							v.Unknown = false
							tf.Attrs["sso"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["cert"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.Cert"})
						} else {
							v, ok := tf.Attrs["cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.Cert", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Cert) == ""
							}
							v.Value = string(obj.Cert)
							v.Unknown = false
							tf.Attrs["cert"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["display"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.Display"})
						} else {
							v, ok := tf.Attrs["display"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.Display", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Display) == ""
							}
							v.Value = string(obj.Display)
							v.Unknown = false
							tf.Attrs["display"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["acs"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AssertionConsumerService"})
						} else {
							v, ok := tf.Attrs["acs"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.AssertionConsumerService", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AssertionConsumerService", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.AssertionConsumerService) == ""
							}
							v.Value = string(obj.AssertionConsumerService)
							v.Unknown = false
							tf.Attrs["acs"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["audience"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.Audience"})
						} else {
							v, ok := tf.Attrs["audience"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.Audience", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.Audience", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Audience) == ""
							}
							v.Value = string(obj.Audience)
							v.Unknown = false
							tf.Attrs["audience"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["service_provider_issuer"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.ServiceProviderIssuer"})
						} else {
							v, ok := tf.Attrs["service_provider_issuer"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.ServiceProviderIssuer", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.ServiceProviderIssuer", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ServiceProviderIssuer) == ""
							}
							v.Value = string(obj.ServiceProviderIssuer)
							v.Unknown = false
							tf.Attrs["service_provider_issuer"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["entity_descriptor"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.EntityDescriptor"})
						} else {
							v, ok := tf.Attrs["entity_descriptor"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.EntityDescriptor", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.EntityDescriptor", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.EntityDescriptor) == ""
							}
							v.Value = string(obj.EntityDescriptor)
							v.Unknown = false
							tf.Attrs["entity_descriptor"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["entity_descriptor_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.EntityDescriptorURL"})
						} else {
							v, ok := tf.Attrs["entity_descriptor_url"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.EntityDescriptorURL", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.EntityDescriptorURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.EntityDescriptorURL) == ""
							}
							v.Value = string(obj.EntityDescriptorURL)
							v.Unknown = false
							tf.Attrs["entity_descriptor_url"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["attributes_to_roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["attributes_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttributesToRoles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttributesToRoles))
									}
								}
								if obj.AttributesToRoles != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.AttributesToRoles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.AttributesToRoles))
									}
									for k, a := range obj.AttributesToRoles {
										v, ok := tf.Attrs["attributes_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["name"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Name"})
												} else {
													v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.AttributesToRoles.Name", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Name) == ""
													}
													v.Value = string(obj.Name)
													v.Unknown = false
													tf.Attrs["name"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["value"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Value"})
												} else {
													v, ok := tf.Attrs["value"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.AttributesToRoles.Value", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Value", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Value) == ""
													}
													v.Value = string(obj.Value)
													v.Unknown = false
													tf.Attrs["value"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["roles"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
														}
														if obj.Roles != nil {
															t := o.ElemType
															if len(obj.Roles) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
															for k, a := range obj.Roles {
																v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.AttributesToRoles.Roles", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AttributesToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Roles) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["roles"] = c
													}
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.AttributesToRoles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["attributes_to_roles"] = c
							}
						}
					}
					{
						a, ok := tf.AttrTypes["signing_key_pair"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["signing_key_pair"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.SigningKeyPair == nil {
									v.Null = true
								} else {
									obj := obj.SigningKeyPair
									tf := &v
									{
										t, ok := tf.AttrTypes["private_key"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair.PrivateKey"})
										} else {
											v, ok := tf.Attrs["private_key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.SigningKeyPair.PrivateKey", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair.PrivateKey", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.PrivateKey) == ""
											}
											v.Value = string(obj.PrivateKey)
											v.Unknown = false
											tf.Attrs["private_key"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["cert"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.SigningKeyPair.Cert"})
										} else {
											v, ok := tf.Attrs["cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.SigningKeyPair.Cert", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.SigningKeyPair.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Cert) == ""
											}
											v.Value = string(obj.Cert)
											v.Unknown = false
											tf.Attrs["cert"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["signing_key_pair"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["provider"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.Provider"})
						} else {
							v, ok := tf.Attrs["provider"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.Provider", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.Provider", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Provider) == ""
							}
							v.Value = string(obj.Provider)
							v.Unknown = false
							tf.Attrs["provider"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["assertion_key_pair"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
							} else {
								v, ok := tf.Attrs["assertion_key_pair"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
								if !ok {
									v = github_com_hashicorp_terraform_plugin_framework_types.Object{

										AttrTypes: o.AttrTypes,
										Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
									}
								} else {
									if v.Attrs == nil {
										v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
									}
								}
								if obj.EncryptionKeyPair == nil {
									v.Null = true
								} else {
									obj := obj.EncryptionKeyPair
									tf := &v
									{
										t, ok := tf.AttrTypes["private_key"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.PrivateKey"})
										} else {
											v, ok := tf.Attrs["private_key"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.EncryptionKeyPair.PrivateKey", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.PrivateKey", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.PrivateKey) == ""
											}
											v.Value = string(obj.PrivateKey)
											v.Unknown = false
											tf.Attrs["private_key"] = v
										}
									}
									{
										t, ok := tf.AttrTypes["cert"]
										if !ok {
											diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.Cert"})
										} else {
											v, ok := tf.Attrs["cert"].(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
												if err != nil {
													diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.EncryptionKeyPair.Cert", err})
												}
												v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
												if !ok {
													diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.EncryptionKeyPair.Cert", "github.com/hashicorp/terraform-plugin-framework/types.String"})
												}
												v.Null = string(obj.Cert) == ""
											}
											v.Value = string(obj.Cert)
											v.Unknown = false
											tf.Attrs["cert"] = v
										}
									}
								}
								v.Unknown = false
								tf.Attrs["assertion_key_pair"] = v
							}
						}
					}
					{
						t, ok := tf.AttrTypes["allow_idp_initiated"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"SAMLConnectorV2.Spec.AllowIDPInitiated"})
						} else {
							v, ok := tf.Attrs["allow_idp_initiated"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"SAMLConnectorV2.Spec.AllowIDPInitiated", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"SAMLConnectorV2.Spec.AllowIDPInitiated", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
								}
								v.Null = bool(obj.AllowIDPInitiated) == false
							}
							v.Value = bool(obj.AllowIDPInitiated)
							v.Unknown = false
							tf.Attrs["allow_idp_initiated"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyGithubConnectorV3FromTerraform copies contents of the source Terraform object into a target struct
func CopyGithubConnectorV3FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.GithubConnectorV3) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"GithubConnectorV3.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"GithubConnectorV3.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"GithubConnectorV3.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.GithubConnectorSpecV3{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["client_id"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.ClientID"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.ClientID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ClientID = t
							}
						}
					}
					{
						a, ok := tf.Attrs["client_secret"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.ClientSecret"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.ClientSecret", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ClientSecret = t
							}
						}
					}
					{
						a, ok := tf.Attrs["redirect_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.RedirectURL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.RedirectURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.RedirectURL = t
							}
						}
					}
					{
						a, ok := tf.Attrs["teams_to_logins"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.TeamsToLogins = make([]github_com_gravitational_teleport_api_types.TeamMapping, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.TeamMapping
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["organization"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Organization"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Organization", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Organization = t
														}
													}
												}
												{
													a, ok := tf.Attrs["team"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Team"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Team", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Team = t
														}
													}
												}
												{
													a, ok := tf.Attrs["logins"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Logins = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Logins[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["kubernetes_groups"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.KubeGroups = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.KubeGroups[k] = t
																	}
																}
															}
														}
													}
												}
												{
													a, ok := tf.Attrs["kubernetes_users"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.KubeUsers = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.KubeUsers[k] = t
																	}
																}
															}
														}
													}
												}
											}
											obj.TeamsToLogins[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["display"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.Display"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Display = t
							}
						}
					}
					{
						a, ok := tf.Attrs["teams_to_roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.TeamsToRoles = make([]github_com_gravitational_teleport_api_types.TeamRolesMapping, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.TeamRolesMapping
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["organization"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Organization"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Organization", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Organization = t
														}
													}
												}
												{
													a, ok := tf.Attrs["team"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Team"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Team", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Team = t
														}
													}
												}
												{
													a, ok := tf.Attrs["roles"]
													if !ok {
														diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Roles = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Roles[k] = t
																	}
																}
															}
														}
													}
												}
											}
											obj.TeamsToRoles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["endpoint_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.EndpointURL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.EndpointURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.EndpointURL = t
							}
						}
					}
					{
						a, ok := tf.Attrs["api_endpoint_url"]
						if !ok {
							diags.Append(attrReadMissingDiag{"GithubConnectorV3.Spec.APIEndpointURL"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"GithubConnectorV3.Spec.APIEndpointURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.APIEndpointURL = t
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyGithubConnectorV3ToTerraform copies contents of the source Terraform object into a target struct
func CopyGithubConnectorV3ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.GithubConnectorV3, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"GithubConnectorV3.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"GithubConnectorV3.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"GithubConnectorV3.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"GithubConnectorV3.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"GithubConnectorV3.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["client_id"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.ClientID"})
						} else {
							v, ok := tf.Attrs["client_id"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.ClientID", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.ClientID", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ClientID) == ""
							}
							v.Value = string(obj.ClientID)
							v.Unknown = false
							tf.Attrs["client_id"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["client_secret"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.ClientSecret"})
						} else {
							v, ok := tf.Attrs["client_secret"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.ClientSecret", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.ClientSecret", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ClientSecret) == ""
							}
							v.Value = string(obj.ClientSecret)
							v.Unknown = false
							tf.Attrs["client_secret"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["redirect_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.RedirectURL"})
						} else {
							v, ok := tf.Attrs["redirect_url"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.RedirectURL", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.RedirectURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.RedirectURL) == ""
							}
							v.Value = string(obj.RedirectURL)
							v.Unknown = false
							tf.Attrs["redirect_url"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["teams_to_logins"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["teams_to_logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToLogins)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToLogins))
									}
								}
								if obj.TeamsToLogins != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.TeamsToLogins) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToLogins))
									}
									for k, a := range obj.TeamsToLogins {
										v, ok := tf.Attrs["teams_to_logins"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["organization"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Organization"})
												} else {
													v, ok := tf.Attrs["organization"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToLogins.Organization", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Organization", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Organization) == ""
													}
													v.Value = string(obj.Organization)
													v.Unknown = false
													tf.Attrs["organization"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["team"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Team"})
												} else {
													v, ok := tf.Attrs["team"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToLogins.Team", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Team", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Team) == ""
													}
													v.Value = string(obj.Team)
													v.Unknown = false
													tf.Attrs["team"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["logins"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
															}
														}
														if obj.Logins != nil {
															t := o.ElemType
															if len(obj.Logins) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Logins))
															}
															for k, a := range obj.Logins {
																v, ok := tf.Attrs["logins"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToLogins.Logins", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.Logins", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Logins) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["logins"] = c
													}
												}
											}
											{
												a, ok := tf.AttrTypes["kubernetes_groups"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
															}
														}
														if obj.KubeGroups != nil {
															t := o.ElemType
															if len(obj.KubeGroups) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeGroups))
															}
															for k, a := range obj.KubeGroups {
																v, ok := tf.Attrs["kubernetes_groups"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeGroups", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.KubeGroups) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["kubernetes_groups"] = c
													}
												}
											}
											{
												a, ok := tf.AttrTypes["kubernetes_users"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
															}
														}
														if obj.KubeUsers != nil {
															t := o.ElemType
															if len(obj.KubeUsers) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.KubeUsers))
															}
															for k, a := range obj.KubeUsers {
																v, ok := tf.Attrs["kubernetes_users"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToLogins.KubeUsers", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.KubeUsers) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["kubernetes_users"] = c
													}
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.TeamsToLogins) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["teams_to_logins"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["display"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.Display"})
						} else {
							v, ok := tf.Attrs["display"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.Display", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.Display", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Display) == ""
							}
							v.Value = string(obj.Display)
							v.Unknown = false
							tf.Attrs["display"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["teams_to_roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["teams_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToRoles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToRoles))
									}
								}
								if obj.TeamsToRoles != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.TeamsToRoles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.TeamsToRoles))
									}
									for k, a := range obj.TeamsToRoles {
										v, ok := tf.Attrs["teams_to_roles"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["organization"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Organization"})
												} else {
													v, ok := tf.Attrs["organization"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToRoles.Organization", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Organization", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Organization) == ""
													}
													v.Value = string(obj.Organization)
													v.Unknown = false
													tf.Attrs["organization"] = v
												}
											}
											{
												t, ok := tf.AttrTypes["team"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Team"})
												} else {
													v, ok := tf.Attrs["team"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToRoles.Team", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Team", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Team) == ""
													}
													v.Value = string(obj.Team)
													v.Unknown = false
													tf.Attrs["team"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["roles"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
														}
														if obj.Roles != nil {
															t := o.ElemType
															if len(obj.Roles) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
															}
															for k, a := range obj.Roles {
																v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.TeamsToRoles.Roles", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.TeamsToRoles.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Roles) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["roles"] = c
													}
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.TeamsToRoles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["teams_to_roles"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["endpoint_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.EndpointURL"})
						} else {
							v, ok := tf.Attrs["endpoint_url"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.EndpointURL", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.EndpointURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.EndpointURL) == ""
							}
							v.Value = string(obj.EndpointURL)
							v.Unknown = false
							tf.Attrs["endpoint_url"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["api_endpoint_url"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"GithubConnectorV3.Spec.APIEndpointURL"})
						} else {
							v, ok := tf.Attrs["api_endpoint_url"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"GithubConnectorV3.Spec.APIEndpointURL", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"GithubConnectorV3.Spec.APIEndpointURL", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.APIEndpointURL) == ""
							}
							v.Value = string(obj.APIEndpointURL)
							v.Unknown = false
							tf.Attrs["api_endpoint_url"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// CopyTrustedClusterV2FromTerraform copies contents of the source Terraform object into a target struct
func CopyTrustedClusterV2FromTerraform(_ context.Context, tf github_com_hashicorp_terraform_plugin_framework_types.Object, obj *github_com_gravitational_teleport_api_types.TrustedClusterV2) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	{
		a, ok := tf.Attrs["kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"TrustedClusterV2.Kind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Kind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["sub_kind"]
		if !ok {
			diags.Append(attrReadMissingDiag{"TrustedClusterV2.SubKind"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.SubKind = t
			}
		}
	}
	{
		a, ok := tf.Attrs["version"]
		if !ok {
			diags.Append(attrReadMissingDiag{"TrustedClusterV2.Version"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
			} else {
				var t string
				if !v.Null && !v.Unknown {
					t = string(v.Value)
				}
				obj.Version = t
			}
		}
	}
	{
		a, ok := tf.Attrs["metadata"]
		if !ok {
			diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Metadata = github_com_gravitational_teleport_api_types.Metadata{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Metadata
					{
						a, ok := tf.Attrs["name"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata.Name"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Name = t
							}
						}
					}
					{
						a, ok := tf.Attrs["namespace"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata.Namespace"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Namespace = t
							}
						}
					}
					{
						a, ok := tf.Attrs["description"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata.Description"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Description = t
							}
						}
					}
					{
						a, ok := tf.Attrs["labels"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata.Labels"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Map)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.Map"})
							} else {
								obj.Labels = make(map[string]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Labels", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Labels[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["expires"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Metadata.Expires"})
						} else {
							v, ok := a.(TimeValue)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Metadata.Expires", "TimeValue"})
							} else {
								var t *time.Time
								if !v.Null && !v.Unknown {
									c := time.Time(v.Value)
									t = &c
								}
								obj.Expires = t
							}
						}
					}
				}
			}
		}
	}
	{
		a, ok := tf.Attrs["spec"]
		if !ok {
			diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec"})
		} else {
			v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
			if !ok {
				diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.Object"})
			} else {
				obj.Spec = github_com_gravitational_teleport_api_types.TrustedClusterSpecV2{}
				if !v.Null && !v.Unknown {
					tf := v
					obj := &obj.Spec
					{
						a, ok := tf.Attrs["enabled"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.Enabled"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.Enabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
							} else {
								var t bool
								if !v.Null && !v.Unknown {
									t = bool(v.Value)
								}
								obj.Enabled = t
							}
						}
					}
					{
						a, ok := tf.Attrs["roles"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.Roles"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.Roles = make([]string, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.Roles", "github_com_hashicorp_terraform_plugin_framework_types.String"})
										} else {
											var t string
											if !v.Null && !v.Unknown {
												t = string(v.Value)
											}
											obj.Roles[k] = t
										}
									}
								}
							}
						}
					}
					{
						a, ok := tf.Attrs["token"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.Token"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.Token", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.Token = t
							}
						}
					}
					{
						a, ok := tf.Attrs["web_proxy_addr"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.ProxyAddress"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.ProxyAddress", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ProxyAddress = t
							}
						}
					}
					{
						a, ok := tf.Attrs["tunnel_addr"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.ReverseTunnelAddress"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.ReverseTunnelAddress", "github.com/hashicorp/terraform-plugin-framework/types.String"})
							} else {
								var t string
								if !v.Null && !v.Unknown {
									t = string(v.Value)
								}
								obj.ReverseTunnelAddress = t
							}
						}
					}
					{
						a, ok := tf.Attrs["role_map"]
						if !ok {
							diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.RoleMap"})
						} else {
							v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
							if !ok {
								diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap", "github.com/hashicorp/terraform-plugin-framework/types.List"})
							} else {
								obj.RoleMap = make([]github_com_gravitational_teleport_api_types.RoleMapping, len(v.Elems))
								if !v.Null && !v.Unknown {
									for k, a := range v.Elems {
										v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap", "github_com_hashicorp_terraform_plugin_framework_types.Object"})
										} else {
											var t github_com_gravitational_teleport_api_types.RoleMapping
											if !v.Null && !v.Unknown {
												tf := v
												obj := &t
												{
													a, ok := tf.Attrs["remote"]
													if !ok {
														diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.RoleMap.Remote"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Remote", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														} else {
															var t string
															if !v.Null && !v.Unknown {
																t = string(v.Value)
															}
															obj.Remote = t
														}
													}
												}
												{
													a, ok := tf.Attrs["local"]
													if !ok {
														diags.Append(attrReadMissingDiag{"TrustedClusterV2.Spec.RoleMap.Local"})
													} else {
														v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Local", "github.com/hashicorp/terraform-plugin-framework/types.List"})
														} else {
															obj.Local = make([]string, len(v.Elems))
															if !v.Null && !v.Unknown {
																for k, a := range v.Elems {
																	v, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrReadConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Local", "github_com_hashicorp_terraform_plugin_framework_types.String"})
																	} else {
																		var t string
																		if !v.Null && !v.Unknown {
																			t = string(v.Value)
																		}
																		obj.Local[k] = t
																	}
																}
															}
														}
													}
												}
											}
											obj.RoleMap[k] = t
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return diags
}

// CopyTrustedClusterV2ToTerraform copies contents of the source Terraform object into a target struct
func CopyTrustedClusterV2ToTerraform(ctx context.Context, obj github_com_gravitational_teleport_api_types.TrustedClusterV2, tf *github_com_hashicorp_terraform_plugin_framework_types.Object) github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics {
	var diags github_com_hashicorp_terraform_plugin_framework_diag.Diagnostics
	tf.Null = false
	tf.Unknown = false
	if tf.Attrs == nil {
		tf.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value)
	}
	{
		t, ok := tf.AttrTypes["kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Kind"})
		} else {
			v, ok := tf.Attrs["kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"TrustedClusterV2.Kind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Kind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Kind) == ""
			}
			v.Value = string(obj.Kind)
			v.Unknown = false
			tf.Attrs["kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["sub_kind"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"TrustedClusterV2.SubKind"})
		} else {
			v, ok := tf.Attrs["sub_kind"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"TrustedClusterV2.SubKind", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.SubKind", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.SubKind) == ""
			}
			v.Value = string(obj.SubKind)
			v.Unknown = false
			tf.Attrs["sub_kind"] = v
		}
	}
	{
		t, ok := tf.AttrTypes["version"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Version"})
		} else {
			v, ok := tf.Attrs["version"].(github_com_hashicorp_terraform_plugin_framework_types.String)
			if !ok {
				i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
				if err != nil {
					diags.Append(attrWriteGeneralError{"TrustedClusterV2.Version", err})
				}
				v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
				if !ok {
					diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Version", "github.com/hashicorp/terraform-plugin-framework/types.String"})
				}
				v.Null = string(obj.Version) == ""
			}
			v.Value = string(obj.Version)
			v.Unknown = false
			tf.Attrs["version"] = v
		}
	}
	{
		a, ok := tf.AttrTypes["metadata"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["metadata"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Metadata
					tf := &v
					{
						t, ok := tf.AttrTypes["name"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata.Name"})
						} else {
							v, ok := tf.Attrs["name"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Metadata.Name", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Name", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Name) == ""
							}
							v.Value = string(obj.Name)
							v.Unknown = false
							tf.Attrs["name"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["namespace"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata.Namespace"})
						} else {
							v, ok := tf.Attrs["namespace"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Metadata.Namespace", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Namespace", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Namespace) == ""
							}
							v.Value = string(obj.Namespace)
							v.Unknown = false
							tf.Attrs["namespace"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["description"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata.Description"})
						} else {
							v, ok := tf.Attrs["description"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Metadata.Description", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Description", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Description) == ""
							}
							v.Value = string(obj.Description)
							v.Unknown = false
							tf.Attrs["description"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["labels"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata.Labels"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.MapType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.MapType"})
							} else {
								c, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.Map)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.Map{

										ElemType: o.ElemType,
										Elems:    make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Labels))
									}
								}
								if obj.Labels != nil {
									t := o.ElemType
									for k, a := range obj.Labels {
										v, ok := tf.Attrs["labels"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"TrustedClusterV2.Metadata.Labels", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Labels", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = false
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Labels) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["labels"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["expires"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Metadata.Expires"})
						} else {
							v, ok := tf.Attrs["expires"].(TimeValue)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Metadata.Expires", err})
								}
								v, ok = i.(TimeValue)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Metadata.Expires", "TimeValue"})
								}
								v.Null = false
							}
							if obj.Expires == nil {
								v.Null = true
							} else {
								v.Null = false
								v.Value = time.Time(*obj.Expires)
							}
							v.Unknown = false
							tf.Attrs["expires"] = v
						}
					}
				}
				v.Unknown = false
				tf.Attrs["metadata"] = v
			}
		}
	}
	{
		a, ok := tf.AttrTypes["spec"]
		if !ok {
			diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec"})
		} else {
			o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
			if !ok {
				diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec", "github.com/hashicorp/terraform-plugin-framework/types.ObjectType"})
			} else {
				v, ok := tf.Attrs["spec"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
				if !ok {
					v = github_com_hashicorp_terraform_plugin_framework_types.Object{

						AttrTypes: o.AttrTypes,
						Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
					}
				} else {
					if v.Attrs == nil {
						v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
					}
				}
				{
					obj := obj.Spec
					tf := &v
					{
						t, ok := tf.AttrTypes["enabled"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.Enabled"})
						} else {
							v, ok := tf.Attrs["enabled"].(github_com_hashicorp_terraform_plugin_framework_types.Bool)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.Enabled", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.Bool)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.Enabled", "github.com/hashicorp/terraform-plugin-framework/types.Bool"})
								}
								v.Null = bool(obj.Enabled) == false
							}
							v.Value = bool(obj.Enabled)
							v.Unknown = false
							tf.Attrs["enabled"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["roles"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.Roles"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
								}
								if obj.Roles != nil {
									t := o.ElemType
									if len(obj.Roles) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Roles))
									}
									for k, a := range obj.Roles {
										v, ok := tf.Attrs["roles"].(github_com_hashicorp_terraform_plugin_framework_types.String)
										if !ok {
											i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
											if err != nil {
												diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.Roles", err})
											}
											v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
											if !ok {
												diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.Roles", "github.com/hashicorp/terraform-plugin-framework/types.String"})
											}
											v.Null = string(a) == ""
										}
										v.Value = string(a)
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.Roles) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["roles"] = c
							}
						}
					}
					{
						t, ok := tf.AttrTypes["token"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.Token"})
						} else {
							v, ok := tf.Attrs["token"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.Token", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.Token", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.Token) == ""
							}
							v.Value = string(obj.Token)
							v.Unknown = false
							tf.Attrs["token"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["web_proxy_addr"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.ProxyAddress"})
						} else {
							v, ok := tf.Attrs["web_proxy_addr"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.ProxyAddress", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.ProxyAddress", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ProxyAddress) == ""
							}
							v.Value = string(obj.ProxyAddress)
							v.Unknown = false
							tf.Attrs["web_proxy_addr"] = v
						}
					}
					{
						t, ok := tf.AttrTypes["tunnel_addr"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.ReverseTunnelAddress"})
						} else {
							v, ok := tf.Attrs["tunnel_addr"].(github_com_hashicorp_terraform_plugin_framework_types.String)
							if !ok {
								i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
								if err != nil {
									diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.ReverseTunnelAddress", err})
								}
								v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
								if !ok {
									diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.ReverseTunnelAddress", "github.com/hashicorp/terraform-plugin-framework/types.String"})
								}
								v.Null = string(obj.ReverseTunnelAddress) == ""
							}
							v.Value = string(obj.ReverseTunnelAddress)
							v.Unknown = false
							tf.Attrs["tunnel_addr"] = v
						}
					}
					{
						a, ok := tf.AttrTypes["role_map"]
						if !ok {
							diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.RoleMap"})
						} else {
							o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
							if !ok {
								diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
							} else {
								c, ok := tf.Attrs["role_map"].(github_com_hashicorp_terraform_plugin_framework_types.List)
								if !ok {
									c = github_com_hashicorp_terraform_plugin_framework_types.List{

										ElemType: o.ElemType,
										Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RoleMap)),
										Null:     true,
									}
								} else {
									if c.Elems == nil {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RoleMap))
									}
								}
								if obj.RoleMap != nil {
									o := o.ElemType.(github_com_hashicorp_terraform_plugin_framework_types.ObjectType)
									if len(obj.RoleMap) != len(c.Elems) {
										c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.RoleMap))
									}
									for k, a := range obj.RoleMap {
										v, ok := tf.Attrs["role_map"].(github_com_hashicorp_terraform_plugin_framework_types.Object)
										if !ok {
											v = github_com_hashicorp_terraform_plugin_framework_types.Object{

												AttrTypes: o.AttrTypes,
												Attrs:     make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(o.AttrTypes)),
											}
										} else {
											if v.Attrs == nil {
												v.Attrs = make(map[string]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(tf.AttrTypes))
											}
										}
										{
											obj := a
											tf := &v
											{
												t, ok := tf.AttrTypes["remote"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.RoleMap.Remote"})
												} else {
													v, ok := tf.Attrs["remote"].(github_com_hashicorp_terraform_plugin_framework_types.String)
													if !ok {
														i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
														if err != nil {
															diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.RoleMap.Remote", err})
														}
														v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
														if !ok {
															diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Remote", "github.com/hashicorp/terraform-plugin-framework/types.String"})
														}
														v.Null = string(obj.Remote) == ""
													}
													v.Value = string(obj.Remote)
													v.Unknown = false
													tf.Attrs["remote"] = v
												}
											}
											{
												a, ok := tf.AttrTypes["local"]
												if !ok {
													diags.Append(attrWriteMissingDiag{"TrustedClusterV2.Spec.RoleMap.Local"})
												} else {
													o, ok := a.(github_com_hashicorp_terraform_plugin_framework_types.ListType)
													if !ok {
														diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Local", "github.com/hashicorp/terraform-plugin-framework/types.ListType"})
													} else {
														c, ok := tf.Attrs["local"].(github_com_hashicorp_terraform_plugin_framework_types.List)
														if !ok {
															c = github_com_hashicorp_terraform_plugin_framework_types.List{

																ElemType: o.ElemType,
																Elems:    make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Local)),
																Null:     true,
															}
														} else {
															if c.Elems == nil {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Local))
															}
														}
														if obj.Local != nil {
															t := o.ElemType
															if len(obj.Local) != len(c.Elems) {
																c.Elems = make([]github_com_hashicorp_terraform_plugin_framework_attr.Value, len(obj.Local))
															}
															for k, a := range obj.Local {
																v, ok := tf.Attrs["local"].(github_com_hashicorp_terraform_plugin_framework_types.String)
																if !ok {
																	i, err := t.ValueFromTerraform(ctx, github_com_hashicorp_terraform_plugin_go_tftypes.NewValue(t.TerraformType(ctx), nil))
																	if err != nil {
																		diags.Append(attrWriteGeneralError{"TrustedClusterV2.Spec.RoleMap.Local", err})
																	}
																	v, ok = i.(github_com_hashicorp_terraform_plugin_framework_types.String)
																	if !ok {
																		diags.Append(attrWriteConversionFailureDiag{"TrustedClusterV2.Spec.RoleMap.Local", "github.com/hashicorp/terraform-plugin-framework/types.String"})
																	}
																	v.Null = string(a) == ""
																}
																v.Value = string(a)
																v.Unknown = false
																c.Elems[k] = v
															}
															if len(obj.Local) > 0 {
																c.Null = false
															}
														}
														c.Unknown = false
														tf.Attrs["local"] = c
													}
												}
											}
										}
										v.Unknown = false
										c.Elems[k] = v
									}
									if len(obj.RoleMap) > 0 {
										c.Null = false
									}
								}
								c.Unknown = false
								tf.Attrs["role_map"] = c
							}
						}
					}
				}
				v.Unknown = false
				tf.Attrs["spec"] = v
			}
		}
	}
	return diags
}

// attrReadMissingDiag represents diagnostic message on an attribute missing in the source object
type attrReadMissingDiag struct {
	Path string
}

func (d attrReadMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadMissingDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object Attrs", d.Path)
}

func (d attrReadMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrReadConversionFailureDiag represents diagnostic message on a failed type conversion on read
type attrReadConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrReadConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrReadConversionFailureDiag) Summary() string {
	return "Error reading from Terraform object"
}

func (d attrReadConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrReadConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteMissingDiag represents diagnostic message on an attribute missing in the target object
type attrWriteMissingDiag struct {
	Path string
}

func (d attrWriteMissingDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteMissingDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteMissingDiag) Detail() string {
	return fmt.Sprintf("A value for %v is missing in the source Terraform object AttrTypes", d.Path)
}

func (d attrWriteMissingDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteConversionFailureDiag represents diagnostic message on a failed type conversion on write
type attrWriteConversionFailureDiag struct {
	Path string
	Type string
}

func (d attrWriteConversionFailureDiag) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteConversionFailureDiag) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteConversionFailureDiag) Detail() string {
	return fmt.Sprintf("A value for %v can not be converted to %v", d.Path, d.Type)
}

func (d attrWriteConversionFailureDiag) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}

// attrWriteGeneralError represents diagnostic message on a generic error on write
type attrWriteGeneralError struct {
	Path string
	Err  error
}

func (d attrWriteGeneralError) Severity() github_com_hashicorp_terraform_plugin_framework_diag.Severity {
	return github_com_hashicorp_terraform_plugin_framework_diag.SeverityError
}

func (d attrWriteGeneralError) Summary() string {
	return "Error writing to Terraform object"
}

func (d attrWriteGeneralError) Detail() string {
	return fmt.Sprintf("%s: %s", d.Path, d.Err.Error())
}

func (d attrWriteGeneralError) Equal(o github_com_hashicorp_terraform_plugin_framework_diag.Diagnostic) bool {
	return (d.Severity() == o.Severity()) && (d.Summary() == o.Summary()) && (d.Detail() == o.Detail())
}
