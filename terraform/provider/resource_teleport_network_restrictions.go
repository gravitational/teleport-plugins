// Code generated by _gen/main.go DO NOT EDIT
/*
Copyright 2015-2022 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	apitypes "github.com/gravitational/teleport/api/types"
	tfschema "github.com/gravitational/teleport-plugins/terraform/tfschema"
	"github.com/gravitational/teleport/integrations/lib/backoff"
	"github.com/gravitational/trace"
	"github.com/jonboulle/clockwork"
)

// resourceTeleportNetworkRestrictionsType is the resource metadata type
type resourceTeleportNetworkRestrictionsType struct{}

// resourceTeleportNetworkRestrictions is the resource
type resourceTeleportNetworkRestrictions struct {
	p Provider
}

// GetSchema returns the resource schema
func (r resourceTeleportNetworkRestrictionsType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfschema.GenSchemaNetworkRestrictionsV4(ctx)
}

// NewResource creates the empty resource
func (r resourceTeleportNetworkRestrictionsType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceTeleportNetworkRestrictions{
		p: *(p.(*Provider)),
	}, nil
}

// Create creates the provision token
func (r resourceTeleportNetworkRestrictions) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	networkRestrictions := &apitypes.NetworkRestrictionsV4{}
	diags = tfschema.CopyNetworkRestrictionsV4FromTerraform(ctx, plan, networkRestrictions)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := networkRestrictions.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error setting NetworkRestrictions defaults", trace.Wrap(err), "network_restrictions"))
		return
	}

	

	networkRestrictionsBefore, err := r.p.Client.GetNetworkRestrictions(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	err = r.p.Client.SetNetworkRestrictions(ctx, networkRestrictions)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error creating NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	var networkRestrictionsI apitypes.NetworkRestrictions

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		networkRestrictionsI, err = r.p.Client.GetNetworkRestrictions(ctx)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
			return
		}
		if networkRestrictionsBefore.GetMetadata().ID != networkRestrictionsI.GetMetadata().ID || false {
			break
		}
		if bErr := backoff.Do(ctx); bErr != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading NetworkRestrictions (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.Append(diagFromWrappedErr(diagMessage, trace.Wrap(err), "network_restrictions"))
			return
		}
	}
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	networkRestrictions, ok := networkRestrictionsI.(*apitypes.NetworkRestrictionsV4)
	if !ok {
		resp.Diagnostics.Append(
			diagFromWrappedErr("Error reading NetworkRestrictions", trace.Errorf("Can not convert %T to NetworkRestrictionsV4", networkRestrictionsI), "network_restrictions"),
		)
		return
	}

	diags = tfschema.CopyNetworkRestrictionsV4ToTerraform(ctx, networkRestrictions, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.Attrs["id"] = types.String{Value: "network_restrictions"}

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read reads teleport NetworkRestrictions
func (r resourceTeleportNetworkRestrictions) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state types.Object
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	networkRestrictionsI, err := r.p.Client.GetNetworkRestrictions(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	networkRestrictions := networkRestrictionsI.(*apitypes.NetworkRestrictionsV4)
	diags = tfschema.CopyNetworkRestrictionsV4ToTerraform(ctx, networkRestrictions, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Update updates teleport NetworkRestrictions
func (r resourceTeleportNetworkRestrictions) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.IsConfigured(resp.Diagnostics) {
		return
	}

	var plan types.Object
	diags := req.Plan.Get(ctx, &plan)

	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	networkRestrictions := &apitypes.NetworkRestrictionsV4{}
	diags = tfschema.CopyNetworkRestrictionsV4FromTerraform(ctx, plan, networkRestrictions)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := networkRestrictions.CheckAndSetDefaults()
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	networkRestrictionsBefore, err := r.p.Client.GetNetworkRestrictions(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	err = r.p.Client.SetNetworkRestrictions(ctx, networkRestrictions)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	var networkRestrictionsI apitypes.NetworkRestrictions

	tries := 0
	backoff := backoff.NewDecorr(r.p.RetryConfig.Base, r.p.RetryConfig.Cap, clockwork.NewRealClock())
	for {
		tries = tries + 1
		networkRestrictionsI, err = r.p.Client.GetNetworkRestrictions(ctx)
		if err != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
			return
		}
		if networkRestrictionsBefore.GetMetadata().ID != networkRestrictionsI.GetMetadata().ID || false {
			break
		}
		if bErr := backoff.Do(ctx); bErr != nil {
			resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
			return
		}
		if tries >= r.p.RetryConfig.MaxTries {
			diagMessage := fmt.Sprintf("Error reading NetworkRestrictions (tried %d times) - state outdated, please import resource", tries)
			resp.Diagnostics.AddError(diagMessage, "network_restrictions")
			return
		}
	}
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error reading NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	networkRestrictions = networkRestrictionsI.(*apitypes.NetworkRestrictionsV4)
	diags = tfschema.CopyNetworkRestrictionsV4ToTerraform(ctx, networkRestrictions, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Delete deletes Teleport NetworkRestrictions
func (r resourceTeleportNetworkRestrictions) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	err := r.p.Client.DeleteNetworkRestrictions(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error deleting NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	resp.State.RemoveResource(ctx)
}

// ImportState imports NetworkRestrictions state
func (r resourceTeleportNetworkRestrictions) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	networkRestrictionsI, err := r.p.Client.GetNetworkRestrictions(ctx)
	if err != nil {
		resp.Diagnostics.Append(diagFromWrappedErr("Error updating NetworkRestrictions", trace.Wrap(err), "network_restrictions"))
		return
	}

	networkRestrictions := networkRestrictionsI.(*apitypes.NetworkRestrictionsV4)

	var state types.Object

	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = tfschema.CopyNetworkRestrictionsV4ToTerraform(ctx, networkRestrictions, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Attrs["id"] = types.String{Value: networkRestrictions.Metadata.Name}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
