syntax = "proto3";
package proto;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gravitational/teleport/lib/services/types.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;

// Operation identifies type of operation
enum Operation {
    // INIT is sent as a first sentinel event
    // on the watch channel
    INIT   = 0;
    // PUT identifies created or updated object
    PUT    = 1;
    // DELETE identifies deleted object
    DELETE = 2;
}

// Event returns cluster event
message Event {
    // Operation identifies operation
    Operation Type = 1 [(gogoproto.jsontag) = "type,omitempty"];
    // Resource contains the updated resource
    oneof Resource {
        // ResourceHeader is specified in delete events,
        // the full object is not available, so resource
        // header is used to provide information about object type
        services.ResourceHeader ResourceHeader = 2 [(gogoproto.jsontag) = "resource,omitempty"];
        // CertAuthority is filled in certificate-authority related events
        services.CertAuthorityV2 CertAuthority = 3 [(gogoproto.jsontag) = "cert_authority,omitempty"];
        // StaticTokens is filled in static-tokens related events
        services.StaticTokensV2 StaticTokens = 4 [(gogoproto.jsontag) = "static_tokens,omitempty"];
        // ProvisionToken is filled in provision-token related events
        services.ProvisionTokenV2 ProvisionToken = 5 [(gogoproto.jsontag) = "provision_token,omitempty"];
        // ClusterNameV2 is a cluster name resource
        services.ClusterNameV2 ClusterName = 6 [(gogoproto.jsontag) = "cluster_name,omitempty"];
        // ClusterConfig is a cluster configuration resource
        services.ClusterConfigV3 ClusterConfig = 7 [(gogoproto.jsontag) = "cluster_config,omitempty"];
        // User is a user resource
        services.UserV2 User = 8 [(gogoproto.jsontag) = "user,omitempty"];
        // Role is a role resource
        services.RoleV3 Role = 9 [(gogoproto.jsontag) = "role,omitempty"];
        // Namespace is a namespace resource
        services.Namespace Namespace = 10 [(gogoproto.jsontag) = "namespace,omitempty"];
        // Server is a node or proxy resource
        services.ServerV2 Server = 11 [(gogoproto.jsontag) = "server,omitempty"];
        // ReverseTunnel is a resource with reverse tunnel
        services.ReverseTunnelV2 ReverseTunnel = 12 [(gogoproto.jsontag) = "reverse_tunnel,omitempty"];
        // TunnelConnection is a resource for tunnel connnections
        services.TunnelConnectionV2 TunnelConnection = 13 [(gogoproto.jsontag) = "tunnel_connection,omitempty"];
        // AccessRequest is a resource for access requests
        services.AccessRequestV3 AccessRequest = 14 [(gogoproto.jsontag) = "access_request,omitempty"];
    }
}

// Watch specifies watch parameters
message Watch {
    // Kinds specifies object kinds to watch
    repeated WatchKind Kinds = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "kinds,omitempty"];
}

// WatchKind specifies resource kind to watch
message WatchKind {
    // Kind is a resource kind to watch
    string Kind = 1 [(gogoproto.jsontag) = "kind"];
    // LoadSecrets specifies whether to load secrets
    bool LoadSecrets = 2 [(gogoproto.jsontag) = "load_secrets"];
    // Name is an optional specific resource type to watch,
    // if specified only the events with a specific resource
    // name will be sent
    string Name = 3  [(gogoproto.jsontag) = "name"];
    // Filter is an optional mapping of custom filter parameters.
    // Valid values vary by resource kind.
    map <string, string> Filter = 4 [(gogoproto.jsontag) = "filter,omitempty"];
}

// Set of certificates corresponding to a single public key.
message Certs {
    // SSH X509 cert (PEM-encoded).
    bytes SSH = 1 [(gogoproto.jsontag) = "ssh,omitempty"];
    // TLS X509 cert (PEM-encoded).
    bytes TLS = 2 [(gogoproto.jsontag) = "tls,omitempty"];
}

// UserCertRequest specifies certificate-generation parameters
// for a user.
message UserCertsRequest {
    // PublicKey is a public key to be signed.
    bytes PublicKey = 1 [(gogoproto.jsontag) = "public_key"];
    // Username of key owner.
    string Username = 2 [(gogoproto.jsontag) = "username"];
	// Expires is a desired time of the expiry of the certificate, could
    // be adjusted based on the permissions
	google.protobuf.Timestamp Expires = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "expires,omitempty"];
    // Format encodes the desired SSH Certificate format (either old ssh compatibility
    // format to remove some metadata causing trouble with old SSH servers)
    // or standard SSH cert format with custom extensions
    string Format = 4 [(gogoproto.jsontag) = "format,omitempty"];
    // RouteToCluster is an optional cluster name to add to the certificate,
    // so that requests originating with this certificate will be redirected
    // to this cluster
    string RouteToCluster = 5 [(gogoproto.jsontag) = "route_to_cluster,omitempty"];
    // AccessRequests is an optional list of request IDs indicating requests whose
    // escalated privileges should be added to the certificate.
    repeated string AccessRequests = 6 [(gogoproto.jsontag) = "access_requests,omitempty"];
}

// GetUserRequest specifies paramters for the GetUser method.
message GetUserRequest {
    // Name is the name of the desired user.
    string Name = 1 [(gogoproto.jsontag) = "name"];
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 2 [(gogoproto.jsontag) = "with_secrets,omitempty"];
}

// GetUsersRequest specifies parameters for the GetUsers method.
message GetUsersRequest {
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 1 [(gogoproto.jsontag) = "with_secrets"];
}

// AccessRequests is a collection of AccessRequest values.
message AccessRequests {
    repeated services.AccessRequestV3 AccessRequests = 1 [(gogoproto.jsontag) = "access_requests"];
}

// PluginDataSeq is a sequence of plugin data.
message PluginDataSeq {
    repeated services.PluginDataV3 PluginData = 1 [(gogoproto.jsontag) = "plugin_data"];
}

// RequestStateSetter encodes the paramters necessary to update the
// state of a privilege escalation request.
message RequestStateSetter {
    string ID = 1 [(gogoproto.jsontag) = "id"];
    services.RequestState State = 2 [(gogoproto.jsontag) = "state"];
}

// RequestID is the unique identifier of an access request.
message RequestID {
    string ID = 1 [(gogoproto.jsontag) = "id"];
}

// AuthService is authentication/authorization service implementation
service AuthService {
    // SendKeepAlives allows node to send a stream of keep alive requests
    rpc SendKeepAlives(stream services.KeepAlive) returns (google.protobuf.Empty);
    // WatchEvents returns a new stream of cluster events
    rpc WatchEvents(Watch) returns (stream Event);
    // UpsertNode upserts node
    rpc UpsertNode(services.ServerV2) returns (services.KeepAlive);
    // GenerateUserCerts generates a set of user certificates for use by `tctl auth sign`.
    rpc GenerateUserCerts(UserCertsRequest) returns (Certs);
    // GetUser gets a user resource by name.
    rpc GetUser(GetUserRequest) returns (services.UserV2);
    // GetUsers gets all current user resources.
    rpc GetUsers(GetUsersRequest) returns (stream services.UserV2);
    // GetAccessRequests gets all pending access requests.
    rpc GetAccessRequests(services.AccessRequestFilter) returns (AccessRequests);
    // CreateAccessRequest creates a new access request.
    rpc CreateAccessRequest(services.AccessRequestV3) returns (google.protobuf.Empty);
    // DeleteAccessRequest deletes an access request.
    rpc DeleteAccessRequest(RequestID) returns (google.protobuf.Empty);
    // SetAccessRequestState sets the state of an access request.
    rpc SetAccessRequestState(RequestStateSetter) returns (google.protobuf.Empty);
    // GetPluginData gets all plugin data matching the supplied filter.
    rpc GetPluginData(services.PluginDataFilter) returns (PluginDataSeq);
    // UpdatePluginData updates a plugin's resource-specific datastore.
    rpc UpdatePluginData(services.PluginDataUpdateParams) returns (google.protobuf.Empty);
}
