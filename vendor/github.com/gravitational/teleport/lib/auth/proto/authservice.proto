syntax = "proto3";
package proto;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gravitational/teleport/lib/services/types.proto";
import "github.com/gravitational/teleport/lib/events/events.proto";
import "github.com/gravitational/teleport/lib/wrappers/wrappers.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;

// Operation identifies type of operation
enum Operation {
    // INIT is sent as a first sentinel event
    // on the watch channel
    INIT = 0;
    // PUT identifies created or updated object
    PUT = 1;
    // DELETE identifies deleted object
    DELETE = 2;
}

// Event returns cluster event
message Event {
    // Operation identifies operation
    Operation Type = 1 [ (gogoproto.jsontag) = "type,omitempty" ];
    // Resource contains the updated resource
    oneof Resource {
        // ResourceHeader is specified in delete events,
        // the full object is not available, so resource
        // header is used to provide information about object type
        services.ResourceHeader ResourceHeader = 2 [ (gogoproto.jsontag) = "resource,omitempty" ];
        // CertAuthority is filled in certificate-authority related events
        services.CertAuthorityV2 CertAuthority = 3
            [ (gogoproto.jsontag) = "cert_authority,omitempty" ];
        // StaticTokens is filled in static-tokens related events
        services.StaticTokensV2 StaticTokens = 4
            [ (gogoproto.jsontag) = "static_tokens,omitempty" ];
        // ProvisionToken is filled in provision-token related events
        services.ProvisionTokenV2 ProvisionToken = 5
            [ (gogoproto.jsontag) = "provision_token,omitempty" ];
        // ClusterNameV2 is a cluster name resource
        services.ClusterNameV2 ClusterName = 6 [ (gogoproto.jsontag) = "cluster_name,omitempty" ];
        // ClusterConfig is a cluster configuration resource
        services.ClusterConfigV3 ClusterConfig = 7
            [ (gogoproto.jsontag) = "cluster_config,omitempty" ];
        // User is a user resource
        services.UserV2 User = 8 [ (gogoproto.jsontag) = "user,omitempty" ];
        // Role is a role resource
        services.RoleV3 Role = 9 [ (gogoproto.jsontag) = "role,omitempty" ];
        // Namespace is a namespace resource
        services.Namespace Namespace = 10 [ (gogoproto.jsontag) = "namespace,omitempty" ];
        // Server is a node or proxy resource
        services.ServerV2 Server = 11 [ (gogoproto.jsontag) = "server,omitempty" ];
        // ReverseTunnel is a resource with reverse tunnel
        services.ReverseTunnelV2 ReverseTunnel = 12
            [ (gogoproto.jsontag) = "reverse_tunnel,omitempty" ];
        // TunnelConnection is a resource for tunnel connnections
        services.TunnelConnectionV2 TunnelConnection = 13
            [ (gogoproto.jsontag) = "tunnel_connection,omitempty" ];
        // AccessRequest is a resource for access requests
        services.AccessRequestV3 AccessRequest = 14
            [ (gogoproto.jsontag) = "access_request,omitempty" ];
        // AppSession is an application web session.
        services.WebSessionV2 AppSession = 15 [ (gogoproto.jsontag) = "app_session,omitempty" ];
        // RemoteCluster is a resource for remote clusters
        services.RemoteClusterV3 RemoteCluster = 16
            [ (gogoproto.jsontag) = "remote_cluster,omitempty" ];
    }
}

// Watch specifies watch parameters
message Watch {
    // Kinds specifies object kinds to watch
    repeated WatchKind Kinds = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "kinds,omitempty" ];
}

// WatchKind specifies resource kind to watch
message WatchKind {
    // Kind is a resource kind to watch
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // LoadSecrets specifies whether to load secrets
    bool LoadSecrets = 2 [ (gogoproto.jsontag) = "load_secrets" ];
    // Name is an optional specific resource type to watch,
    // if specified only the events with a specific resource
    // name will be sent
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
    // Filter is an optional mapping of custom filter parameters.
    // Valid values vary by resource kind.
    map<string, string> Filter = 4 [ (gogoproto.jsontag) = "filter,omitempty" ];
}

// Set of certificates corresponding to a single public key.
message Certs {
    // SSH X509 cert (PEM-encoded).
    bytes SSH = 1 [ (gogoproto.jsontag) = "ssh,omitempty" ];
    // TLS X509 cert (PEM-encoded).
    bytes TLS = 2 [ (gogoproto.jsontag) = "tls,omitempty" ];
}

// UserCertRequest specifies certificate-generation parameters
// for a user.
message UserCertsRequest {
    // PublicKey is a public key to be signed.
    bytes PublicKey = 1 [ (gogoproto.jsontag) = "public_key" ];
    // Username of key owner.
    string Username = 2 [ (gogoproto.jsontag) = "username" ];
    // Expires is a desired time of the expiry of the certificate, could
    // be adjusted based on the permissions
    google.protobuf.Timestamp Expires = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];
    // Format encodes the desired SSH Certificate format (either old ssh
    // compatibility
    // format to remove some metadata causing trouble with old SSH servers)
    // or standard SSH cert format with custom extensions
    string Format = 4 [ (gogoproto.jsontag) = "format,omitempty" ];
    // RouteToCluster is an optional cluster name to add to the certificate,
    // so that requests originating with this certificate will be redirected
    // to this cluster
    string RouteToCluster = 5 [ (gogoproto.jsontag) = "route_to_cluster,omitempty" ];
    // AccessRequests is an optional list of request IDs indicating requests whose
    // escalated privileges should be added to the certificate.
    repeated string AccessRequests = 6 [ (gogoproto.jsontag) = "access_requests,omitempty" ];
    // KubernetesCluster specifies the target kubernetes cluster for TLS
    // identities. This can be empty on older Teleport clients.
    string KubernetesCluster = 7 [ (gogoproto.jsontag) = "kubernetes_cluster,omitempty" ];
}

// GetUserRequest specifies parameters for the GetUser method.
message GetUserRequest {
    // Name is the name of the desired user.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 2 [ (gogoproto.jsontag) = "with_secrets,omitempty" ];
}

// GetUsersRequest specifies parameters for the GetUsers method.
message GetUsersRequest {
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 1 [ (gogoproto.jsontag) = "with_secrets" ];
}

// AccessRequests is a collection of AccessRequest values.
message AccessRequests {
    repeated services.AccessRequestV3 AccessRequests = 1
        [ (gogoproto.jsontag) = "access_requests" ];
}

// PluginDataSeq is a sequence of plugin data.
message PluginDataSeq {
    repeated services.PluginDataV3 PluginData = 1 [ (gogoproto.jsontag) = "plugin_data" ];
}

// RequestStateSetter encodes the paramters necessary to update the
// state of a privilege escalation request.
message RequestStateSetter {
    // ID is the request ID being targeted
    string ID = 1 [ (gogoproto.jsontag) = "id" ];
    // State is the desired state to be set
    services.RequestState State = 2 [ (gogoproto.jsontag) = "state" ];
    // Delegator is an optional indicator of who delegated this
    // state update (used by plugins to indicate which user approved
    // or denied the request).
    string Delegator = 3 [ (gogoproto.jsontag) = "delegator,omitempty" ];
    // Reason is an optional message indicating the reason for the
    // resolution (approval, denail , etc...).
    string Reason = 4 [ (gogoproto.jsontag) = "reason,omitempty" ];
    // Annotations are key/value pairs received from plugins during request
    // resolution.  They are currently only used to provide additional logging
    // information.
    wrappers.LabelValues Annotations = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/lib/wrappers.Traits"
    ];
    // Roles, if present, overrides the existing set of roles associated
    // with the access request.
    repeated string Roles = 6 [ (gogoproto.jsontag) = "roles,omitempty" ];
}

// RequestID is the unique identifier of an access request.
message RequestID { string ID = 1 [ (gogoproto.jsontag) = "id" ]; }

// RotateResetPasswordTokenSecretsRequest is a request to rotate token secrets.
message RotateResetPasswordTokenSecretsRequest {
    string TokenID = 1 [ (gogoproto.jsontag) = "token" ];
}

// GetResetPasswordTokenRequest is a request to get a reset password token.
message GetResetPasswordTokenRequest { string TokenID = 1 [ (gogoproto.jsontag) = "token" ]; }

// CreateResetPasswordTokenRequest is a request to create an instance of
// ResetPasswordToken
message CreateResetPasswordTokenRequest {
    // Name is the user name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Type is a token type.
    string Type = 2 [ (gogoproto.jsontag) = "type" ];
    // TTL specifies how long the generated token is valid for.
    int64 TTL = 3 [ (gogoproto.jsontag) = "ttl", (gogoproto.casttype) = "Duration" ];
}

// PingRequest is the input value for the Ping method.
message PingRequest {
    // Ping method currently takes no parameters
}

// PingResponse contains data about the teleport auth server.
message PingResponse {
    // ClusterName is the name of the teleport cluster.
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
    // ServerVersion is the version of the auth server.
    string ServerVersion = 2 [ (gogoproto.jsontag) = "server_version" ];
}

// DeleteUserRequest is the input value for the DeleteUser method.
message DeleteUserRequest {
    // Name is the user name to delete.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// Semaphores is a sequence of Semaphore resources.
message Semaphores {
    repeated services.SemaphoreV3 Semaphores = 1 [ (gogoproto.jsontag) = "semaphores" ];
}

// AuditStreamRequest contains stream request - event or stream control request
message AuditStreamRequest {
    // Request is either stream request - create, resume or complete stream
    // or event submitted as a part of the stream
    oneof Request {
        // CreateStream creates the stream for session ID
        // should be the first message sent to the stream
        CreateStream CreateStream = 1;
        // ResumeStream resumes existing stream, should be the
        // first message sent to the stream
        ResumeStream ResumeStream = 2;
        // CompleteStream completes the stream
        CompleteStream CompleteStream = 3;
        // FlushAndClose flushes and closes the stream
        FlushAndCloseStream FlushAndCloseStream = 4;
        // Event contains the stream event
        events.OneOf Event = 5;
    }
}

// AuditStreamStatus returns audit stream status
// with corresponding upload ID
message AuditStreamStatus {
    // UploadID is upload ID associated with the stream,
    // can be used to resume the stream
    string UploadID = 1;
}

// CreateStream creates stream for a new session ID
message CreateStream { string SessionID = 1; }

// ResumeStream resumes stream that was previously created
message ResumeStream {
    // SessionID is a session ID of the stream
    string SessionID = 1;
    // UploadID is upload ID to resume
    string UploadID = 2;
}

// CompleteStream completes the stream
// and uploads it to the session server
message CompleteStream {}

// FlushAndCloseStream flushes the stream data and closes the stream
message FlushAndCloseStream {}

// GetAppServersRequest are the parameters used to request application servers.
message GetAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // SkipValidation is used to skip JSON schema validation.
    bool SkipValidation = 2 [ (gogoproto.jsontag) = "skip_validation" ];
}

// GetAppServersResponse contains all requested application servers.
message GetAppServersResponse {
    // Servers is a slice of services.Server that represent applications.
    repeated services.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertAppServerRequest are the parameters used to add an application.
message UpsertAppServerRequest { services.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ]; }

// DeleteAppServerRequest are the parameters used to remove an application.
message DeleteAppServerRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // Name is the name of the application to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllAppServersRequest are the parameters used to remove all applications.
message DeleteAllAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// GenerateAppTokenRequest are the parameters used to request an application
// token.
message GenerateAppTokenRequest {
    // Username is the Teleport username.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // Roles is a list of Teleport roles assigned to the user.
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles" ];
    // URI is the URI of the application this token is targeting.
    string URI = 3 [ (gogoproto.jsontag) = "uri" ];
    // Expires is the time this token expires.
    google.protobuf.Timestamp Expires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
}

// GenerateAppTokenResponse contains a signed application token.
message GenerateAppTokenResponse { string Token = 1 [ (gogoproto.jsontag) = "token" ]; }

// GetAppSessionRequest are the parameters used to request an application web session.
message GetAppSessionRequest {
    // SessionID is the ID of the session being requested.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ];
}

// GetAppSessionResponse contains the requested application web session.
message GetAppSessionResponse {
    // Session is the application web session.
    services.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// GetAppSessionsResponse contains all the requested application web sessions.
message GetAppSessionsResponse {
    // Sessions is a list of application web sessions.
    repeated services.WebSessionV2 Sessions = 1 [ (gogoproto.jsontag) = "sessions" ];
}

// CreateAppSessionRequest contains the parameters to request a application web session.
message CreateAppSessionRequest {
    // Username is the name of the user requesting the session.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // ParentSession is the session ID of the parent session.
    string ParentSession = 2 [ (gogoproto.jsontag) = "parent_session" ];
    // PublicAddr is the public address the application.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr" ];
    // ClusterName is cluster within which the application is running.
    string ClusterName = 4 [ (gogoproto.jsontag) = "cluster_name" ];
}

// CreateAppSessionResponse contains the requested application web session.
message CreateAppSessionResponse {
    // Session is the application web session.
    services.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// DeleteAppSessionRequest contains the parameters used to remove an application web session.
message DeleteAppSessionRequest { string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ]; }

// GetKubeServicesRequest are the parameters used to request kubernetes services.
message GetKubeServicesRequest {}

// GetKubeServicesResponse contains all requested kubernetes services.
message GetKubeServicesResponse {
    // Servers is a slice of services.Server that represent kubernetes
    // services.
    repeated services.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertKubeServiceRequest are the parameters used to add or update a
// kubernetes service.
message UpsertKubeServiceRequest {
    services.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ];
}

// DeleteKubeServiceRequest are the parameters used to remove a kubernetes service.
message DeleteKubeServiceRequest {
    // Name is the name of the kubernetes service to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllKubeServicesRequest are the parameters used to remove all kubernetes services.
message DeleteAllKubeServicesRequest {}

// AuthService is authentication/authorization service implementation
service AuthService {
    // SendKeepAlives allows node to send a stream of keep alive requests
    rpc SendKeepAlives(stream services.KeepAlive) returns (google.protobuf.Empty);
    // WatchEvents returns a new stream of cluster events
    rpc WatchEvents(Watch) returns (stream Event);
    // UpsertNode upserts node
    rpc UpsertNode(services.ServerV2) returns (services.KeepAlive);
    // GenerateUserCerts generates a set of user certificates for use by `tctl
    // auth sign`.
    rpc GenerateUserCerts(UserCertsRequest) returns (Certs);
    // GetUser gets a user resource by name.
    rpc GetUser(GetUserRequest) returns (services.UserV2);
    // GetUsers gets all current user resources.
    rpc GetUsers(GetUsersRequest) returns (stream services.UserV2);

    // GetAccessRequests gets all pending access requests.
    rpc GetAccessRequests(services.AccessRequestFilter) returns (AccessRequests);
    // CreateAccessRequest creates a new access request.
    rpc CreateAccessRequest(services.AccessRequestV3) returns (google.protobuf.Empty);
    // DeleteAccessRequest deletes an access request.
    rpc DeleteAccessRequest(RequestID) returns (google.protobuf.Empty);
    // SetAccessRequestState sets the state of an access request.
    rpc SetAccessRequestState(RequestStateSetter) returns (google.protobuf.Empty);
    // GetAccessCapabilities requests the access capabilites of a user.
    rpc GetAccessCapabilities(services.AccessCapabilitiesRequest)
        returns (services.AccessCapabilities);

    // GetPluginData gets all plugin data matching the supplied filter.
    rpc GetPluginData(services.PluginDataFilter) returns (PluginDataSeq);
    // UpdatePluginData updates a plugin's resource-specific datastore.
    rpc UpdatePluginData(services.PluginDataUpdateParams) returns (google.protobuf.Empty);
    // Ping gets basic info about the auth server. This method is intended
    // to mimic the behavior of the proxy's Ping method, and may be used by
    // clients for verification or configuration on startup.
    rpc Ping(PingRequest) returns (PingResponse);
    // RotateResetPasswordTokenSecrets rotates token secrets for a given tokenID.
    rpc RotateResetPasswordTokenSecrets(RotateResetPasswordTokenSecretsRequest)
        returns (services.ResetPasswordTokenSecretsV3);
    // GetResetPasswordToken returns a token.
    rpc GetResetPasswordToken(GetResetPasswordTokenRequest) returns (services.ResetPasswordTokenV3);
    // CreateResetPasswordToken creates ResetPasswordToken.
    rpc CreateResetPasswordToken(CreateResetPasswordTokenRequest)
        returns (services.ResetPasswordTokenV3);
    // CreateUser inserts a new user entry to a backend.
    rpc CreateUser(services.UserV2) returns (google.protobuf.Empty);
    // UpdateUser updates an existing user in a backend.
    rpc UpdateUser(services.UserV2) returns (google.protobuf.Empty);
    // DeleteUser deletes an existing user in a backend by username.
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

    // AcquireSemaphore acquires lease with requested resources from semaphore.
    rpc AcquireSemaphore(services.AcquireSemaphoreRequest) returns (services.SemaphoreLease);
    // KeepAliveSemaphoreLease updates semaphore lease.
    rpc KeepAliveSemaphoreLease(services.SemaphoreLease) returns (google.protobuf.Empty);
    // CancelSemaphoreLease cancels semaphore lease early.
    rpc CancelSemaphoreLease(services.SemaphoreLease) returns (google.protobuf.Empty);
    // GetSemaphores returns a list of all semaphores matching the supplied filter.
    rpc GetSemaphores(services.SemaphoreFilter) returns (Semaphores);
    // DeleteSemaphore deletes a semaphore matching the supplied filter.
    rpc DeleteSemaphore(services.SemaphoreFilter) returns (google.protobuf.Empty);

    // EmitAuditEvent emits audit event
    rpc EmitAuditEvent(events.OneOf) returns (google.protobuf.Empty);
    // CreateAuditStream creates or resumes audit events streams
    rpc CreateAuditStream(stream AuditStreamRequest) returns (stream events.StreamStatus);

    // GetAppServers gets all application servers.
    rpc GetAppServers(GetAppServersRequest) returns (GetAppServersResponse);
    // UpsertAppServer adds an application server.
    rpc UpsertAppServer(UpsertAppServerRequest) returns (services.KeepAlive);
    // DeleteAppServer removes an application server.
    rpc DeleteAppServer(DeleteAppServerRequest) returns (google.protobuf.Empty);
    // DeleteAllAppServers removes all application servers.
    rpc DeleteAllAppServers(DeleteAllAppServersRequest) returns (google.protobuf.Empty);

    // GenerateAppToken will generate a JWT token for application access.
    rpc GenerateAppToken(GenerateAppTokenRequest) returns (GenerateAppTokenResponse);

    // GetAppSession gets an application web session.
    rpc GetAppSession(GetAppSessionRequest) returns (GetAppSessionResponse);
    // GetAppSessions gets all application web sessions.
    rpc GetAppSessions(google.protobuf.Empty) returns (GetAppSessionsResponse);
    // CreateAppSession creates an application web session. Application web
    // sessions represent a browser session the client holds.
    rpc CreateAppSession(CreateAppSessionRequest) returns (CreateAppSessionResponse);
    // DeleteAppSession removes an application web session.
    rpc DeleteAppSession(DeleteAppSessionRequest) returns (google.protobuf.Empty);
    // DeleteAllAppSessions removes all application web sessions.
    rpc DeleteAllAppSessions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // UpdateRemoteCluster updates remote cluster
    rpc UpdateRemoteCluster(services.RemoteClusterV3) returns (google.protobuf.Empty);

    // GetKubeServices gets all kubernetes services.
    rpc GetKubeServices(GetKubeServicesRequest) returns (GetKubeServicesResponse);
    // UpsertKubeService adds or updates a kubernetes service.
    rpc UpsertKubeService(UpsertKubeServiceRequest) returns (google.protobuf.Empty);
    // DeleteKubeService removes a kubernetes service.
    rpc DeleteKubeService(DeleteKubeServiceRequest) returns (google.protobuf.Empty);
    // DeleteAllKubeServices removes all kubernetes services.
    rpc DeleteAllKubeServices(DeleteAllKubeServicesRequest) returns (google.protobuf.Empty);
}
