// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authservice.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import events "github.com/gravitational/teleport/lib/events"
import services "github.com/gravitational/teleport/lib/services"
import _ "github.com/gravitational/teleport/lib/wrappers"

import time "time"
import github_com_gravitational_teleport_lib_wrappers "github.com/gravitational/teleport/lib/wrappers"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Operation identifies type of operation
type Operation int32

const (
	// INIT is sent as a first sentinel event
	// on the watch channel
	Operation_INIT Operation = 0
	// PUT identifies created or updated object
	Operation_PUT Operation = 1
	// DELETE identifies deleted object
	Operation_DELETE Operation = 2
)

var Operation_name = map[int32]string{
	0: "INIT",
	1: "PUT",
	2: "DELETE",
}
var Operation_value = map[string]int32{
	"INIT":   0,
	"PUT":    1,
	"DELETE": 2,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{0}
}

// Event returns cluster event
type Event struct {
	// Operation identifies operation
	Type Operation `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Operation" json:"type,omitempty"`
	// Resource contains the updated resource
	//
	// Types that are valid to be assigned to Resource:
	//	*Event_ResourceHeader
	//	*Event_CertAuthority
	//	*Event_StaticTokens
	//	*Event_ProvisionToken
	//	*Event_ClusterName
	//	*Event_ClusterConfig
	//	*Event_User
	//	*Event_Role
	//	*Event_Namespace
	//	*Event_Server
	//	*Event_ReverseTunnel
	//	*Event_TunnelConnection
	//	*Event_AccessRequest
	//	*Event_AppSession
	//	*Event_RemoteCluster
	Resource             isEvent_Resource `protobuf_oneof:"Resource"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Resource interface {
	isEvent_Resource()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ResourceHeader struct {
	ResourceHeader *services.ResourceHeader `protobuf:"bytes,2,opt,name=ResourceHeader,oneof"`
}
type Event_CertAuthority struct {
	CertAuthority *services.CertAuthorityV2 `protobuf:"bytes,3,opt,name=CertAuthority,oneof"`
}
type Event_StaticTokens struct {
	StaticTokens *services.StaticTokensV2 `protobuf:"bytes,4,opt,name=StaticTokens,oneof"`
}
type Event_ProvisionToken struct {
	ProvisionToken *services.ProvisionTokenV2 `protobuf:"bytes,5,opt,name=ProvisionToken,oneof"`
}
type Event_ClusterName struct {
	ClusterName *services.ClusterNameV2 `protobuf:"bytes,6,opt,name=ClusterName,oneof"`
}
type Event_ClusterConfig struct {
	ClusterConfig *services.ClusterConfigV3 `protobuf:"bytes,7,opt,name=ClusterConfig,oneof"`
}
type Event_User struct {
	User *services.UserV2 `protobuf:"bytes,8,opt,name=User,oneof"`
}
type Event_Role struct {
	Role *services.RoleV3 `protobuf:"bytes,9,opt,name=Role,oneof"`
}
type Event_Namespace struct {
	Namespace *services.Namespace `protobuf:"bytes,10,opt,name=Namespace,oneof"`
}
type Event_Server struct {
	Server *services.ServerV2 `protobuf:"bytes,11,opt,name=Server,oneof"`
}
type Event_ReverseTunnel struct {
	ReverseTunnel *services.ReverseTunnelV2 `protobuf:"bytes,12,opt,name=ReverseTunnel,oneof"`
}
type Event_TunnelConnection struct {
	TunnelConnection *services.TunnelConnectionV2 `protobuf:"bytes,13,opt,name=TunnelConnection,oneof"`
}
type Event_AccessRequest struct {
	AccessRequest *services.AccessRequestV3 `protobuf:"bytes,14,opt,name=AccessRequest,oneof"`
}
type Event_AppSession struct {
	AppSession *services.WebSessionV2 `protobuf:"bytes,15,opt,name=AppSession,oneof"`
}
type Event_RemoteCluster struct {
	RemoteCluster *services.RemoteClusterV3 `protobuf:"bytes,16,opt,name=RemoteCluster,oneof"`
}

func (*Event_ResourceHeader) isEvent_Resource()   {}
func (*Event_CertAuthority) isEvent_Resource()    {}
func (*Event_StaticTokens) isEvent_Resource()     {}
func (*Event_ProvisionToken) isEvent_Resource()   {}
func (*Event_ClusterName) isEvent_Resource()      {}
func (*Event_ClusterConfig) isEvent_Resource()    {}
func (*Event_User) isEvent_Resource()             {}
func (*Event_Role) isEvent_Resource()             {}
func (*Event_Namespace) isEvent_Resource()        {}
func (*Event_Server) isEvent_Resource()           {}
func (*Event_ReverseTunnel) isEvent_Resource()    {}
func (*Event_TunnelConnection) isEvent_Resource() {}
func (*Event_AccessRequest) isEvent_Resource()    {}
func (*Event_AppSession) isEvent_Resource()       {}
func (*Event_RemoteCluster) isEvent_Resource()    {}

func (m *Event) GetResource() isEvent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Event) GetType() Operation {
	if m != nil {
		return m.Type
	}
	return Operation_INIT
}

func (m *Event) GetResourceHeader() *services.ResourceHeader {
	if x, ok := m.GetResource().(*Event_ResourceHeader); ok {
		return x.ResourceHeader
	}
	return nil
}

func (m *Event) GetCertAuthority() *services.CertAuthorityV2 {
	if x, ok := m.GetResource().(*Event_CertAuthority); ok {
		return x.CertAuthority
	}
	return nil
}

func (m *Event) GetStaticTokens() *services.StaticTokensV2 {
	if x, ok := m.GetResource().(*Event_StaticTokens); ok {
		return x.StaticTokens
	}
	return nil
}

func (m *Event) GetProvisionToken() *services.ProvisionTokenV2 {
	if x, ok := m.GetResource().(*Event_ProvisionToken); ok {
		return x.ProvisionToken
	}
	return nil
}

func (m *Event) GetClusterName() *services.ClusterNameV2 {
	if x, ok := m.GetResource().(*Event_ClusterName); ok {
		return x.ClusterName
	}
	return nil
}

func (m *Event) GetClusterConfig() *services.ClusterConfigV3 {
	if x, ok := m.GetResource().(*Event_ClusterConfig); ok {
		return x.ClusterConfig
	}
	return nil
}

func (m *Event) GetUser() *services.UserV2 {
	if x, ok := m.GetResource().(*Event_User); ok {
		return x.User
	}
	return nil
}

func (m *Event) GetRole() *services.RoleV3 {
	if x, ok := m.GetResource().(*Event_Role); ok {
		return x.Role
	}
	return nil
}

func (m *Event) GetNamespace() *services.Namespace {
	if x, ok := m.GetResource().(*Event_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (m *Event) GetServer() *services.ServerV2 {
	if x, ok := m.GetResource().(*Event_Server); ok {
		return x.Server
	}
	return nil
}

func (m *Event) GetReverseTunnel() *services.ReverseTunnelV2 {
	if x, ok := m.GetResource().(*Event_ReverseTunnel); ok {
		return x.ReverseTunnel
	}
	return nil
}

func (m *Event) GetTunnelConnection() *services.TunnelConnectionV2 {
	if x, ok := m.GetResource().(*Event_TunnelConnection); ok {
		return x.TunnelConnection
	}
	return nil
}

func (m *Event) GetAccessRequest() *services.AccessRequestV3 {
	if x, ok := m.GetResource().(*Event_AccessRequest); ok {
		return x.AccessRequest
	}
	return nil
}

func (m *Event) GetAppSession() *services.WebSessionV2 {
	if x, ok := m.GetResource().(*Event_AppSession); ok {
		return x.AppSession
	}
	return nil
}

func (m *Event) GetRemoteCluster() *services.RemoteClusterV3 {
	if x, ok := m.GetResource().(*Event_RemoteCluster); ok {
		return x.RemoteCluster
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ResourceHeader)(nil),
		(*Event_CertAuthority)(nil),
		(*Event_StaticTokens)(nil),
		(*Event_ProvisionToken)(nil),
		(*Event_ClusterName)(nil),
		(*Event_ClusterConfig)(nil),
		(*Event_User)(nil),
		(*Event_Role)(nil),
		(*Event_Namespace)(nil),
		(*Event_Server)(nil),
		(*Event_ReverseTunnel)(nil),
		(*Event_TunnelConnection)(nil),
		(*Event_AccessRequest)(nil),
		(*Event_AppSession)(nil),
		(*Event_RemoteCluster)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Resource
	switch x := m.Resource.(type) {
	case *Event_ResourceHeader:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResourceHeader); err != nil {
			return err
		}
	case *Event_CertAuthority:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CertAuthority); err != nil {
			return err
		}
	case *Event_StaticTokens:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StaticTokens); err != nil {
			return err
		}
	case *Event_ProvisionToken:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvisionToken); err != nil {
			return err
		}
	case *Event_ClusterName:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterName); err != nil {
			return err
		}
	case *Event_ClusterConfig:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterConfig); err != nil {
			return err
		}
	case *Event_User:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *Event_Role:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Role); err != nil {
			return err
		}
	case *Event_Namespace:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespace); err != nil {
			return err
		}
	case *Event_Server:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Server); err != nil {
			return err
		}
	case *Event_ReverseTunnel:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReverseTunnel); err != nil {
			return err
		}
	case *Event_TunnelConnection:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelConnection); err != nil {
			return err
		}
	case *Event_AccessRequest:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccessRequest); err != nil {
			return err
		}
	case *Event_AppSession:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppSession); err != nil {
			return err
		}
	case *Event_RemoteCluster:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteCluster); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Resource has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 2: // Resource.ResourceHeader
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ResourceHeader)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_ResourceHeader{msg}
		return true, err
	case 3: // Resource.CertAuthority
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.CertAuthorityV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_CertAuthority{msg}
		return true, err
	case 4: // Resource.StaticTokens
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.StaticTokensV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_StaticTokens{msg}
		return true, err
	case 5: // Resource.ProvisionToken
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ProvisionTokenV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_ProvisionToken{msg}
		return true, err
	case 6: // Resource.ClusterName
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ClusterNameV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_ClusterName{msg}
		return true, err
	case 7: // Resource.ClusterConfig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ClusterConfigV3)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_ClusterConfig{msg}
		return true, err
	case 8: // Resource.User
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.UserV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_User{msg}
		return true, err
	case 9: // Resource.Role
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.RoleV3)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_Role{msg}
		return true, err
	case 10: // Resource.Namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.Namespace)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_Namespace{msg}
		return true, err
	case 11: // Resource.Server
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ServerV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_Server{msg}
		return true, err
	case 12: // Resource.ReverseTunnel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.ReverseTunnelV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_ReverseTunnel{msg}
		return true, err
	case 13: // Resource.TunnelConnection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.TunnelConnectionV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_TunnelConnection{msg}
		return true, err
	case 14: // Resource.AccessRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.AccessRequestV3)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_AccessRequest{msg}
		return true, err
	case 15: // Resource.AppSession
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.WebSessionV2)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_AppSession{msg}
		return true, err
	case 16: // Resource.RemoteCluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(services.RemoteClusterV3)
		err := b.DecodeMessage(msg)
		m.Resource = &Event_RemoteCluster{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Resource
	switch x := m.Resource.(type) {
	case *Event_ResourceHeader:
		s := proto.Size(x.ResourceHeader)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CertAuthority:
		s := proto.Size(x.CertAuthority)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_StaticTokens:
		s := proto.Size(x.StaticTokens)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ProvisionToken:
		s := proto.Size(x.ProvisionToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ClusterName:
		s := proto.Size(x.ClusterName)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ClusterConfig:
		s := proto.Size(x.ClusterConfig)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_User:
		s := proto.Size(x.User)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Role:
		s := proto.Size(x.Role)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Namespace:
		s := proto.Size(x.Namespace)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Server:
		s := proto.Size(x.Server)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ReverseTunnel:
		s := proto.Size(x.ReverseTunnel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_TunnelConnection:
		s := proto.Size(x.TunnelConnection)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AccessRequest:
		s := proto.Size(x.AccessRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AppSession:
		s := proto.Size(x.AppSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_RemoteCluster:
		s := proto.Size(x.RemoteCluster)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Watch specifies watch parameters
type Watch struct {
	// Kinds specifies object kinds to watch
	Kinds                []WatchKind `protobuf:"bytes,1,rep,name=Kinds" json:"kinds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Watch) Reset()         { *m = Watch{} }
func (m *Watch) String() string { return proto.CompactTextString(m) }
func (*Watch) ProtoMessage()    {}
func (*Watch) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{1}
}
func (m *Watch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Watch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Watch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Watch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watch.Merge(dst, src)
}
func (m *Watch) XXX_Size() int {
	return m.Size()
}
func (m *Watch) XXX_DiscardUnknown() {
	xxx_messageInfo_Watch.DiscardUnknown(m)
}

var xxx_messageInfo_Watch proto.InternalMessageInfo

func (m *Watch) GetKinds() []WatchKind {
	if m != nil {
		return m.Kinds
	}
	return nil
}

// WatchKind specifies resource kind to watch
type WatchKind struct {
	// Kind is a resource kind to watch
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"kind"`
	// LoadSecrets specifies whether to load secrets
	LoadSecrets bool `protobuf:"varint,2,opt,name=LoadSecrets,proto3" json:"load_secrets"`
	// Name is an optional specific resource type to watch,
	// if specified only the events with a specific resource
	// name will be sent
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"name"`
	// Filter is an optional mapping of custom filter parameters.
	// Valid values vary by resource kind.
	Filter               map[string]string `protobuf:"bytes,4,rep,name=Filter" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WatchKind) Reset()         { *m = WatchKind{} }
func (m *WatchKind) String() string { return proto.CompactTextString(m) }
func (*WatchKind) ProtoMessage()    {}
func (*WatchKind) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{2}
}
func (m *WatchKind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchKind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchKind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WatchKind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchKind.Merge(dst, src)
}
func (m *WatchKind) XXX_Size() int {
	return m.Size()
}
func (m *WatchKind) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchKind.DiscardUnknown(m)
}

var xxx_messageInfo_WatchKind proto.InternalMessageInfo

func (m *WatchKind) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *WatchKind) GetLoadSecrets() bool {
	if m != nil {
		return m.LoadSecrets
	}
	return false
}

func (m *WatchKind) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WatchKind) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Set of certificates corresponding to a single public key.
type Certs struct {
	// SSH X509 cert (PEM-encoded).
	SSH []byte `protobuf:"bytes,1,opt,name=SSH,proto3" json:"ssh,omitempty"`
	// TLS X509 cert (PEM-encoded).
	TLS                  []byte   `protobuf:"bytes,2,opt,name=TLS,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certs) Reset()         { *m = Certs{} }
func (m *Certs) String() string { return proto.CompactTextString(m) }
func (*Certs) ProtoMessage()    {}
func (*Certs) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{3}
}
func (m *Certs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Certs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certs.Merge(dst, src)
}
func (m *Certs) XXX_Size() int {
	return m.Size()
}
func (m *Certs) XXX_DiscardUnknown() {
	xxx_messageInfo_Certs.DiscardUnknown(m)
}

var xxx_messageInfo_Certs proto.InternalMessageInfo

func (m *Certs) GetSSH() []byte {
	if m != nil {
		return m.SSH
	}
	return nil
}

func (m *Certs) GetTLS() []byte {
	if m != nil {
		return m.TLS
	}
	return nil
}

// UserCertRequest specifies certificate-generation parameters
// for a user.
type UserCertsRequest struct {
	// PublicKey is a public key to be signed.
	PublicKey []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"public_key"`
	// Username of key owner.
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"username"`
	// Expires is a desired time of the expiry of the certificate, could
	// be adjusted based on the permissions
	Expires time.Time `protobuf:"bytes,3,opt,name=Expires,stdtime" json:"expires,omitempty"`
	// Format encodes the desired SSH Certificate format (either old ssh
	// compatibility
	// format to remove some metadata causing trouble with old SSH servers)
	// or standard SSH cert format with custom extensions
	Format string `protobuf:"bytes,4,opt,name=Format,proto3" json:"format,omitempty"`
	// RouteToCluster is an optional cluster name to add to the certificate,
	// so that requests originating with this certificate will be redirected
	// to this cluster
	RouteToCluster string `protobuf:"bytes,5,opt,name=RouteToCluster,proto3" json:"route_to_cluster,omitempty"`
	// AccessRequests is an optional list of request IDs indicating requests whose
	// escalated privileges should be added to the certificate.
	AccessRequests []string `protobuf:"bytes,6,rep,name=AccessRequests" json:"access_requests,omitempty"`
	// KubernetesCluster specifies the target kubernetes cluster for TLS
	// identities. This can be empty on older Teleport clients.
	KubernetesCluster    string   `protobuf:"bytes,7,opt,name=KubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCertsRequest) Reset()         { *m = UserCertsRequest{} }
func (m *UserCertsRequest) String() string { return proto.CompactTextString(m) }
func (*UserCertsRequest) ProtoMessage()    {}
func (*UserCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{4}
}
func (m *UserCertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCertsRequest.Merge(dst, src)
}
func (m *UserCertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserCertsRequest proto.InternalMessageInfo

func (m *UserCertsRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *UserCertsRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserCertsRequest) GetExpires() time.Time {
	if m != nil {
		return m.Expires
	}
	return time.Time{}
}

func (m *UserCertsRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *UserCertsRequest) GetRouteToCluster() string {
	if m != nil {
		return m.RouteToCluster
	}
	return ""
}

func (m *UserCertsRequest) GetAccessRequests() []string {
	if m != nil {
		return m.AccessRequests
	}
	return nil
}

func (m *UserCertsRequest) GetKubernetesCluster() string {
	if m != nil {
		return m.KubernetesCluster
	}
	return ""
}

// GetUserRequest specifies parameters for the GetUser method.
type GetUserRequest struct {
	// Name is the name of the desired user.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	// WithSecrets specifies whether to load associated secrets.
	WithSecrets          bool     `protobuf:"varint,2,opt,name=WithSecrets,proto3" json:"with_secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{5}
}
func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(dst, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetUserRequest) GetWithSecrets() bool {
	if m != nil {
		return m.WithSecrets
	}
	return false
}

// GetUsersRequest specifies parameters for the GetUsers method.
type GetUsersRequest struct {
	// WithSecrets specifies whether to load associated secrets.
	WithSecrets          bool     `protobuf:"varint,1,opt,name=WithSecrets,proto3" json:"with_secrets"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersRequest) Reset()         { *m = GetUsersRequest{} }
func (m *GetUsersRequest) String() string { return proto.CompactTextString(m) }
func (*GetUsersRequest) ProtoMessage()    {}
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{6}
}
func (m *GetUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersRequest.Merge(dst, src)
}
func (m *GetUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersRequest proto.InternalMessageInfo

func (m *GetUsersRequest) GetWithSecrets() bool {
	if m != nil {
		return m.WithSecrets
	}
	return false
}

// AccessRequests is a collection of AccessRequest values.
type AccessRequests struct {
	AccessRequests       []*services.AccessRequestV3 `protobuf:"bytes,1,rep,name=AccessRequests" json:"access_requests"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AccessRequests) Reset()         { *m = AccessRequests{} }
func (m *AccessRequests) String() string { return proto.CompactTextString(m) }
func (*AccessRequests) ProtoMessage()    {}
func (*AccessRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{7}
}
func (m *AccessRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AccessRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessRequests.Merge(dst, src)
}
func (m *AccessRequests) XXX_Size() int {
	return m.Size()
}
func (m *AccessRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessRequests.DiscardUnknown(m)
}

var xxx_messageInfo_AccessRequests proto.InternalMessageInfo

func (m *AccessRequests) GetAccessRequests() []*services.AccessRequestV3 {
	if m != nil {
		return m.AccessRequests
	}
	return nil
}

// PluginDataSeq is a sequence of plugin data.
type PluginDataSeq struct {
	PluginData           []*services.PluginDataV3 `protobuf:"bytes,1,rep,name=PluginData" json:"plugin_data"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PluginDataSeq) Reset()         { *m = PluginDataSeq{} }
func (m *PluginDataSeq) String() string { return proto.CompactTextString(m) }
func (*PluginDataSeq) ProtoMessage()    {}
func (*PluginDataSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{8}
}
func (m *PluginDataSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginDataSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginDataSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PluginDataSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginDataSeq.Merge(dst, src)
}
func (m *PluginDataSeq) XXX_Size() int {
	return m.Size()
}
func (m *PluginDataSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginDataSeq.DiscardUnknown(m)
}

var xxx_messageInfo_PluginDataSeq proto.InternalMessageInfo

func (m *PluginDataSeq) GetPluginData() []*services.PluginDataV3 {
	if m != nil {
		return m.PluginData
	}
	return nil
}

// RequestStateSetter encodes the paramters necessary to update the
// state of a privilege escalation request.
type RequestStateSetter struct {
	// ID is the request ID being targeted
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
	// State is the desired state to be set
	State services.RequestState `protobuf:"varint,2,opt,name=State,proto3,enum=services.RequestState" json:"state"`
	// Delegator is an optional indicator of who delegated this
	// state update (used by plugins to indicate which user approved
	// or denied the request).
	Delegator string `protobuf:"bytes,3,opt,name=Delegator,proto3" json:"delegator,omitempty"`
	// Reason is an optional message indicating the reason for the
	// resolution (approval, denail , etc...).
	Reason string `protobuf:"bytes,4,opt,name=Reason,proto3" json:"reason,omitempty"`
	// Annotations are key/value pairs received from plugins during request
	// resolution.  They are currently only used to provide additional logging
	// information.
	Annotations github_com_gravitational_teleport_lib_wrappers.Traits `protobuf:"bytes,5,opt,name=Annotations,customtype=github.com/gravitational/teleport/lib/wrappers.Traits" json:"annotations,omitempty"`
	// Roles, if present, overrides the existing set of roles associated
	// with the access request.
	Roles                []string `protobuf:"bytes,6,rep,name=Roles" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestStateSetter) Reset()         { *m = RequestStateSetter{} }
func (m *RequestStateSetter) String() string { return proto.CompactTextString(m) }
func (*RequestStateSetter) ProtoMessage()    {}
func (*RequestStateSetter) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{9}
}
func (m *RequestStateSetter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStateSetter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStateSetter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestStateSetter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStateSetter.Merge(dst, src)
}
func (m *RequestStateSetter) XXX_Size() int {
	return m.Size()
}
func (m *RequestStateSetter) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStateSetter.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStateSetter proto.InternalMessageInfo

func (m *RequestStateSetter) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RequestStateSetter) GetState() services.RequestState {
	if m != nil {
		return m.State
	}
	return services.RequestState_NONE
}

func (m *RequestStateSetter) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *RequestStateSetter) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RequestStateSetter) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

// RequestID is the unique identifier of an access request.
type RequestID struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestID) Reset()         { *m = RequestID{} }
func (m *RequestID) String() string { return proto.CompactTextString(m) }
func (*RequestID) ProtoMessage()    {}
func (*RequestID) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{10}
}
func (m *RequestID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestID.Merge(dst, src)
}
func (m *RequestID) XXX_Size() int {
	return m.Size()
}
func (m *RequestID) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestID.DiscardUnknown(m)
}

var xxx_messageInfo_RequestID proto.InternalMessageInfo

func (m *RequestID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// RotateResetPasswordTokenSecretsRequest is a request to rotate token secrets.
type RotateResetPasswordTokenSecretsRequest struct {
	TokenID              string   `protobuf:"bytes,1,opt,name=TokenID,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RotateResetPasswordTokenSecretsRequest) Reset() {
	*m = RotateResetPasswordTokenSecretsRequest{}
}
func (m *RotateResetPasswordTokenSecretsRequest) String() string { return proto.CompactTextString(m) }
func (*RotateResetPasswordTokenSecretsRequest) ProtoMessage()    {}
func (*RotateResetPasswordTokenSecretsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{11}
}
func (m *RotateResetPasswordTokenSecretsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RotateResetPasswordTokenSecretsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RotateResetPasswordTokenSecretsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RotateResetPasswordTokenSecretsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RotateResetPasswordTokenSecretsRequest.Merge(dst, src)
}
func (m *RotateResetPasswordTokenSecretsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RotateResetPasswordTokenSecretsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RotateResetPasswordTokenSecretsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RotateResetPasswordTokenSecretsRequest proto.InternalMessageInfo

func (m *RotateResetPasswordTokenSecretsRequest) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

// GetResetPasswordTokenRequest is a request to get a reset password token.
type GetResetPasswordTokenRequest struct {
	TokenID              string   `protobuf:"bytes,1,opt,name=TokenID,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResetPasswordTokenRequest) Reset()         { *m = GetResetPasswordTokenRequest{} }
func (m *GetResetPasswordTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetResetPasswordTokenRequest) ProtoMessage()    {}
func (*GetResetPasswordTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{12}
}
func (m *GetResetPasswordTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResetPasswordTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResetPasswordTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetResetPasswordTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResetPasswordTokenRequest.Merge(dst, src)
}
func (m *GetResetPasswordTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetResetPasswordTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResetPasswordTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetResetPasswordTokenRequest proto.InternalMessageInfo

func (m *GetResetPasswordTokenRequest) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

// CreateResetPasswordTokenRequest is a request to create an instance of
// ResetPasswordToken
type CreateResetPasswordTokenRequest struct {
	// Name is the user name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	// Type is a token type.
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type"`
	// TTL specifies how long the generated token is valid for.
	TTL                  Duration `protobuf:"varint,3,opt,name=TTL,proto3,casttype=Duration" json:"ttl"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResetPasswordTokenRequest) Reset()         { *m = CreateResetPasswordTokenRequest{} }
func (m *CreateResetPasswordTokenRequest) String() string { return proto.CompactTextString(m) }
func (*CreateResetPasswordTokenRequest) ProtoMessage()    {}
func (*CreateResetPasswordTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{13}
}
func (m *CreateResetPasswordTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResetPasswordTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResetPasswordTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateResetPasswordTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResetPasswordTokenRequest.Merge(dst, src)
}
func (m *CreateResetPasswordTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateResetPasswordTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResetPasswordTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResetPasswordTokenRequest proto.InternalMessageInfo

func (m *CreateResetPasswordTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateResetPasswordTokenRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateResetPasswordTokenRequest) GetTTL() Duration {
	if m != nil {
		return m.TTL
	}
	return 0
}

// PingRequest is the input value for the Ping method.
type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{14}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

// PingResponse contains data about the teleport auth server.
type PingResponse struct {
	// ClusterName is the name of the teleport cluster.
	ClusterName string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"cluster_name"`
	// ServerVersion is the version of the auth server.
	ServerVersion        string   `protobuf:"bytes,2,opt,name=ServerVersion,proto3" json:"server_version"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{15}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(dst, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *PingResponse) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

// DeleteUserRequest is the input value for the DeleteUser method.
type DeleteUserRequest struct {
	// Name is the user name to delete.
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteUserRequest) Reset()         { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()    {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{16}
}
func (m *DeleteUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserRequest.Merge(dst, src)
}
func (m *DeleteUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserRequest proto.InternalMessageInfo

func (m *DeleteUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Semaphores is a sequence of Semaphore resources.
type Semaphores struct {
	Semaphores           []*services.SemaphoreV3 `protobuf:"bytes,1,rep,name=Semaphores" json:"semaphores"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Semaphores) Reset()         { *m = Semaphores{} }
func (m *Semaphores) String() string { return proto.CompactTextString(m) }
func (*Semaphores) ProtoMessage()    {}
func (*Semaphores) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{17}
}
func (m *Semaphores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Semaphores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Semaphores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Semaphores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Semaphores.Merge(dst, src)
}
func (m *Semaphores) XXX_Size() int {
	return m.Size()
}
func (m *Semaphores) XXX_DiscardUnknown() {
	xxx_messageInfo_Semaphores.DiscardUnknown(m)
}

var xxx_messageInfo_Semaphores proto.InternalMessageInfo

func (m *Semaphores) GetSemaphores() []*services.SemaphoreV3 {
	if m != nil {
		return m.Semaphores
	}
	return nil
}

// AuditStreamRequest contains stream request - event or stream control request
type AuditStreamRequest struct {
	// Request is either stream request - create, resume or complete stream
	// or event submitted as a part of the stream
	//
	// Types that are valid to be assigned to Request:
	//	*AuditStreamRequest_CreateStream
	//	*AuditStreamRequest_ResumeStream
	//	*AuditStreamRequest_CompleteStream
	//	*AuditStreamRequest_FlushAndCloseStream
	//	*AuditStreamRequest_Event
	Request              isAuditStreamRequest_Request `protobuf_oneof:"Request"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AuditStreamRequest) Reset()         { *m = AuditStreamRequest{} }
func (m *AuditStreamRequest) String() string { return proto.CompactTextString(m) }
func (*AuditStreamRequest) ProtoMessage()    {}
func (*AuditStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{18}
}
func (m *AuditStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuditStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditStreamRequest.Merge(dst, src)
}
func (m *AuditStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuditStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuditStreamRequest proto.InternalMessageInfo

type isAuditStreamRequest_Request interface {
	isAuditStreamRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuditStreamRequest_CreateStream struct {
	CreateStream *CreateStream `protobuf:"bytes,1,opt,name=CreateStream,oneof"`
}
type AuditStreamRequest_ResumeStream struct {
	ResumeStream *ResumeStream `protobuf:"bytes,2,opt,name=ResumeStream,oneof"`
}
type AuditStreamRequest_CompleteStream struct {
	CompleteStream *CompleteStream `protobuf:"bytes,3,opt,name=CompleteStream,oneof"`
}
type AuditStreamRequest_FlushAndCloseStream struct {
	FlushAndCloseStream *FlushAndCloseStream `protobuf:"bytes,4,opt,name=FlushAndCloseStream,oneof"`
}
type AuditStreamRequest_Event struct {
	Event *events.OneOf `protobuf:"bytes,5,opt,name=Event,oneof"`
}

func (*AuditStreamRequest_CreateStream) isAuditStreamRequest_Request()        {}
func (*AuditStreamRequest_ResumeStream) isAuditStreamRequest_Request()        {}
func (*AuditStreamRequest_CompleteStream) isAuditStreamRequest_Request()      {}
func (*AuditStreamRequest_FlushAndCloseStream) isAuditStreamRequest_Request() {}
func (*AuditStreamRequest_Event) isAuditStreamRequest_Request()               {}

func (m *AuditStreamRequest) GetRequest() isAuditStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AuditStreamRequest) GetCreateStream() *CreateStream {
	if x, ok := m.GetRequest().(*AuditStreamRequest_CreateStream); ok {
		return x.CreateStream
	}
	return nil
}

func (m *AuditStreamRequest) GetResumeStream() *ResumeStream {
	if x, ok := m.GetRequest().(*AuditStreamRequest_ResumeStream); ok {
		return x.ResumeStream
	}
	return nil
}

func (m *AuditStreamRequest) GetCompleteStream() *CompleteStream {
	if x, ok := m.GetRequest().(*AuditStreamRequest_CompleteStream); ok {
		return x.CompleteStream
	}
	return nil
}

func (m *AuditStreamRequest) GetFlushAndCloseStream() *FlushAndCloseStream {
	if x, ok := m.GetRequest().(*AuditStreamRequest_FlushAndCloseStream); ok {
		return x.FlushAndCloseStream
	}
	return nil
}

func (m *AuditStreamRequest) GetEvent() *events.OneOf {
	if x, ok := m.GetRequest().(*AuditStreamRequest_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuditStreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuditStreamRequest_OneofMarshaler, _AuditStreamRequest_OneofUnmarshaler, _AuditStreamRequest_OneofSizer, []interface{}{
		(*AuditStreamRequest_CreateStream)(nil),
		(*AuditStreamRequest_ResumeStream)(nil),
		(*AuditStreamRequest_CompleteStream)(nil),
		(*AuditStreamRequest_FlushAndCloseStream)(nil),
		(*AuditStreamRequest_Event)(nil),
	}
}

func _AuditStreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuditStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *AuditStreamRequest_CreateStream:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateStream); err != nil {
			return err
		}
	case *AuditStreamRequest_ResumeStream:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResumeStream); err != nil {
			return err
		}
	case *AuditStreamRequest_CompleteStream:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CompleteStream); err != nil {
			return err
		}
	case *AuditStreamRequest_FlushAndCloseStream:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlushAndCloseStream); err != nil {
			return err
		}
	case *AuditStreamRequest_Event:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuditStreamRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _AuditStreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuditStreamRequest)
	switch tag {
	case 1: // Request.CreateStream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateStream)
		err := b.DecodeMessage(msg)
		m.Request = &AuditStreamRequest_CreateStream{msg}
		return true, err
	case 2: // Request.ResumeStream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResumeStream)
		err := b.DecodeMessage(msg)
		m.Request = &AuditStreamRequest_ResumeStream{msg}
		return true, err
	case 3: // Request.CompleteStream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CompleteStream)
		err := b.DecodeMessage(msg)
		m.Request = &AuditStreamRequest_CompleteStream{msg}
		return true, err
	case 4: // Request.FlushAndCloseStream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlushAndCloseStream)
		err := b.DecodeMessage(msg)
		m.Request = &AuditStreamRequest_FlushAndCloseStream{msg}
		return true, err
	case 5: // Request.Event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(events.OneOf)
		err := b.DecodeMessage(msg)
		m.Request = &AuditStreamRequest_Event{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuditStreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuditStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *AuditStreamRequest_CreateStream:
		s := proto.Size(x.CreateStream)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuditStreamRequest_ResumeStream:
		s := proto.Size(x.ResumeStream)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuditStreamRequest_CompleteStream:
		s := proto.Size(x.CompleteStream)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuditStreamRequest_FlushAndCloseStream:
		s := proto.Size(x.FlushAndCloseStream)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuditStreamRequest_Event:
		s := proto.Size(x.Event)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AuditStreamStatus returns audit stream status
// with corresponding upload ID
type AuditStreamStatus struct {
	// UploadID is upload ID associated with the stream,
	// can be used to resume the stream
	UploadID             string   `protobuf:"bytes,1,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuditStreamStatus) Reset()         { *m = AuditStreamStatus{} }
func (m *AuditStreamStatus) String() string { return proto.CompactTextString(m) }
func (*AuditStreamStatus) ProtoMessage()    {}
func (*AuditStreamStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{19}
}
func (m *AuditStreamStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditStreamStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditStreamStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuditStreamStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditStreamStatus.Merge(dst, src)
}
func (m *AuditStreamStatus) XXX_Size() int {
	return m.Size()
}
func (m *AuditStreamStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditStreamStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuditStreamStatus proto.InternalMessageInfo

func (m *AuditStreamStatus) GetUploadID() string {
	if m != nil {
		return m.UploadID
	}
	return ""
}

// CreateStream creates stream for a new session ID
type CreateStream struct {
	SessionID            string   `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStream) Reset()         { *m = CreateStream{} }
func (m *CreateStream) String() string { return proto.CompactTextString(m) }
func (*CreateStream) ProtoMessage()    {}
func (*CreateStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{20}
}
func (m *CreateStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStream.Merge(dst, src)
}
func (m *CreateStream) XXX_Size() int {
	return m.Size()
}
func (m *CreateStream) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStream.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStream proto.InternalMessageInfo

func (m *CreateStream) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

// ResumeStream resumes stream that was previously created
type ResumeStream struct {
	// SessionID is a session ID of the stream
	SessionID string `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	// UploadID is upload ID to resume
	UploadID             string   `protobuf:"bytes,2,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeStream) Reset()         { *m = ResumeStream{} }
func (m *ResumeStream) String() string { return proto.CompactTextString(m) }
func (*ResumeStream) ProtoMessage()    {}
func (*ResumeStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{21}
}
func (m *ResumeStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResumeStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeStream.Merge(dst, src)
}
func (m *ResumeStream) XXX_Size() int {
	return m.Size()
}
func (m *ResumeStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeStream.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeStream proto.InternalMessageInfo

func (m *ResumeStream) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *ResumeStream) GetUploadID() string {
	if m != nil {
		return m.UploadID
	}
	return ""
}

// CompleteStream completes the stream
// and uploads it to the session server
type CompleteStream struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompleteStream) Reset()         { *m = CompleteStream{} }
func (m *CompleteStream) String() string { return proto.CompactTextString(m) }
func (*CompleteStream) ProtoMessage()    {}
func (*CompleteStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{22}
}
func (m *CompleteStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CompleteStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteStream.Merge(dst, src)
}
func (m *CompleteStream) XXX_Size() int {
	return m.Size()
}
func (m *CompleteStream) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteStream.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteStream proto.InternalMessageInfo

// FlushAndCloseStream flushes the stream data and closes the stream
type FlushAndCloseStream struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushAndCloseStream) Reset()         { *m = FlushAndCloseStream{} }
func (m *FlushAndCloseStream) String() string { return proto.CompactTextString(m) }
func (*FlushAndCloseStream) ProtoMessage()    {}
func (*FlushAndCloseStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{23}
}
func (m *FlushAndCloseStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushAndCloseStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushAndCloseStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlushAndCloseStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushAndCloseStream.Merge(dst, src)
}
func (m *FlushAndCloseStream) XXX_Size() int {
	return m.Size()
}
func (m *FlushAndCloseStream) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushAndCloseStream.DiscardUnknown(m)
}

var xxx_messageInfo_FlushAndCloseStream proto.InternalMessageInfo

// GetAppServersRequest are the parameters used to request application servers.
type GetAppServersRequest struct {
	// Namespace is the namespace for application.
	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"namespace"`
	// SkipValidation is used to skip JSON schema validation.
	SkipValidation       bool     `protobuf:"varint,2,opt,name=SkipValidation,proto3" json:"skip_validation"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppServersRequest) Reset()         { *m = GetAppServersRequest{} }
func (m *GetAppServersRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppServersRequest) ProtoMessage()    {}
func (*GetAppServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{24}
}
func (m *GetAppServersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppServersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppServersRequest.Merge(dst, src)
}
func (m *GetAppServersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAppServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppServersRequest proto.InternalMessageInfo

func (m *GetAppServersRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetAppServersRequest) GetSkipValidation() bool {
	if m != nil {
		return m.SkipValidation
	}
	return false
}

// GetAppServersResponse contains all requested application servers.
type GetAppServersResponse struct {
	// Servers is a slice of services.Server that represent applications.
	Servers              []*services.ServerV2 `protobuf:"bytes,1,rep,name=Servers" json:"servers"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetAppServersResponse) Reset()         { *m = GetAppServersResponse{} }
func (m *GetAppServersResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppServersResponse) ProtoMessage()    {}
func (*GetAppServersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{25}
}
func (m *GetAppServersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppServersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppServersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppServersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppServersResponse.Merge(dst, src)
}
func (m *GetAppServersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAppServersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppServersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppServersResponse proto.InternalMessageInfo

func (m *GetAppServersResponse) GetServers() []*services.ServerV2 {
	if m != nil {
		return m.Servers
	}
	return nil
}

// UpsertAppServerRequest are the parameters used to add an application.
type UpsertAppServerRequest struct {
	Server               *services.ServerV2 `protobuf:"bytes,1,opt,name=Server" json:"server"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpsertAppServerRequest) Reset()         { *m = UpsertAppServerRequest{} }
func (m *UpsertAppServerRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertAppServerRequest) ProtoMessage()    {}
func (*UpsertAppServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{26}
}
func (m *UpsertAppServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertAppServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertAppServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpsertAppServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertAppServerRequest.Merge(dst, src)
}
func (m *UpsertAppServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertAppServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertAppServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertAppServerRequest proto.InternalMessageInfo

func (m *UpsertAppServerRequest) GetServer() *services.ServerV2 {
	if m != nil {
		return m.Server
	}
	return nil
}

// DeleteAppServerRequest are the parameters used to remove an application.
type DeleteAppServerRequest struct {
	// Namespace is the namespace for application.
	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"namespace"`
	// Name is the name of the application to delete.
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppServerRequest) Reset()         { *m = DeleteAppServerRequest{} }
func (m *DeleteAppServerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAppServerRequest) ProtoMessage()    {}
func (*DeleteAppServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{27}
}
func (m *DeleteAppServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAppServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAppServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAppServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppServerRequest.Merge(dst, src)
}
func (m *DeleteAppServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAppServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppServerRequest proto.InternalMessageInfo

func (m *DeleteAppServerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteAppServerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteAllAppServersRequest are the parameters used to remove all applications.
type DeleteAllAppServersRequest struct {
	// Namespace is the namespace for application.
	Namespace            string   `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"namespace"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllAppServersRequest) Reset()         { *m = DeleteAllAppServersRequest{} }
func (m *DeleteAllAppServersRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllAppServersRequest) ProtoMessage()    {}
func (*DeleteAllAppServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{28}
}
func (m *DeleteAllAppServersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllAppServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllAppServersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllAppServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllAppServersRequest.Merge(dst, src)
}
func (m *DeleteAllAppServersRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllAppServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllAppServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllAppServersRequest proto.InternalMessageInfo

func (m *DeleteAllAppServersRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GenerateAppTokenRequest are the parameters used to request an application
// token.
type GenerateAppTokenRequest struct {
	// Username is the Teleport username.
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"username"`
	// Roles is a list of Teleport roles assigned to the user.
	Roles []string `protobuf:"bytes,2,rep,name=Roles" json:"roles"`
	// URI is the URI of the application this token is targeting.
	URI string `protobuf:"bytes,3,opt,name=URI,proto3" json:"uri"`
	// Expires is the time this token expires.
	Expires              time.Time `protobuf:"bytes,4,opt,name=Expires,stdtime" json:"expires"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GenerateAppTokenRequest) Reset()         { *m = GenerateAppTokenRequest{} }
func (m *GenerateAppTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateAppTokenRequest) ProtoMessage()    {}
func (*GenerateAppTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{29}
}
func (m *GenerateAppTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateAppTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateAppTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GenerateAppTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateAppTokenRequest.Merge(dst, src)
}
func (m *GenerateAppTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateAppTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateAppTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateAppTokenRequest proto.InternalMessageInfo

func (m *GenerateAppTokenRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GenerateAppTokenRequest) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GenerateAppTokenRequest) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *GenerateAppTokenRequest) GetExpires() time.Time {
	if m != nil {
		return m.Expires
	}
	return time.Time{}
}

// GenerateAppTokenResponse contains a signed application token.
type GenerateAppTokenResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateAppTokenResponse) Reset()         { *m = GenerateAppTokenResponse{} }
func (m *GenerateAppTokenResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateAppTokenResponse) ProtoMessage()    {}
func (*GenerateAppTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{30}
}
func (m *GenerateAppTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateAppTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateAppTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GenerateAppTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateAppTokenResponse.Merge(dst, src)
}
func (m *GenerateAppTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateAppTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateAppTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateAppTokenResponse proto.InternalMessageInfo

func (m *GenerateAppTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// GetAppSessionRequest are the parameters used to request an application web session.
type GetAppSessionRequest struct {
	// SessionID is the ID of the session being requested.
	SessionID            string   `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"session_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppSessionRequest) Reset()         { *m = GetAppSessionRequest{} }
func (m *GetAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppSessionRequest) ProtoMessage()    {}
func (*GetAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{31}
}
func (m *GetAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppSessionRequest.Merge(dst, src)
}
func (m *GetAppSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppSessionRequest proto.InternalMessageInfo

func (m *GetAppSessionRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

// GetAppSessionResponse contains the requested application web session.
type GetAppSessionResponse struct {
	// Session is the application web session.
	Session              *services.WebSessionV2 `protobuf:"bytes,1,opt,name=Session" json:"session"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetAppSessionResponse) Reset()         { *m = GetAppSessionResponse{} }
func (m *GetAppSessionResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppSessionResponse) ProtoMessage()    {}
func (*GetAppSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{32}
}
func (m *GetAppSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppSessionResponse.Merge(dst, src)
}
func (m *GetAppSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAppSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppSessionResponse proto.InternalMessageInfo

func (m *GetAppSessionResponse) GetSession() *services.WebSessionV2 {
	if m != nil {
		return m.Session
	}
	return nil
}

// GetAppSessionsResponse contains all the requested application web sessions.
type GetAppSessionsResponse struct {
	// Sessions is a list of application web sessions.
	Sessions             []*services.WebSessionV2 `protobuf:"bytes,1,rep,name=Sessions" json:"sessions"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetAppSessionsResponse) Reset()         { *m = GetAppSessionsResponse{} }
func (m *GetAppSessionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppSessionsResponse) ProtoMessage()    {}
func (*GetAppSessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{33}
}
func (m *GetAppSessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppSessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppSessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppSessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppSessionsResponse.Merge(dst, src)
}
func (m *GetAppSessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAppSessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppSessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppSessionsResponse proto.InternalMessageInfo

func (m *GetAppSessionsResponse) GetSessions() []*services.WebSessionV2 {
	if m != nil {
		return m.Sessions
	}
	return nil
}

// CreateAppSessionRequest contains the parameters to request a application web session.
type CreateAppSessionRequest struct {
	// Username is the name of the user requesting the session.
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"username"`
	// ParentSession is the session ID of the parent session.
	ParentSession string `protobuf:"bytes,2,opt,name=ParentSession,proto3" json:"parent_session"`
	// PublicAddr is the public address the application.
	PublicAddr string `protobuf:"bytes,3,opt,name=PublicAddr,proto3" json:"public_addr"`
	// ClusterName is cluster within which the application is running.
	ClusterName          string   `protobuf:"bytes,4,opt,name=ClusterName,proto3" json:"cluster_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppSessionRequest) Reset()         { *m = CreateAppSessionRequest{} }
func (m *CreateAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAppSessionRequest) ProtoMessage()    {}
func (*CreateAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{34}
}
func (m *CreateAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppSessionRequest.Merge(dst, src)
}
func (m *CreateAppSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppSessionRequest proto.InternalMessageInfo

func (m *CreateAppSessionRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateAppSessionRequest) GetParentSession() string {
	if m != nil {
		return m.ParentSession
	}
	return ""
}

func (m *CreateAppSessionRequest) GetPublicAddr() string {
	if m != nil {
		return m.PublicAddr
	}
	return ""
}

func (m *CreateAppSessionRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

// CreateAppSessionResponse contains the requested application web session.
type CreateAppSessionResponse struct {
	// Session is the application web session.
	Session              *services.WebSessionV2 `protobuf:"bytes,1,opt,name=Session" json:"session"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateAppSessionResponse) Reset()         { *m = CreateAppSessionResponse{} }
func (m *CreateAppSessionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAppSessionResponse) ProtoMessage()    {}
func (*CreateAppSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{35}
}
func (m *CreateAppSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateAppSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppSessionResponse.Merge(dst, src)
}
func (m *CreateAppSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppSessionResponse proto.InternalMessageInfo

func (m *CreateAppSessionResponse) GetSession() *services.WebSessionV2 {
	if m != nil {
		return m.Session
	}
	return nil
}

// DeleteAppSessionRequest contains the parameters used to remove an application web session.
type DeleteAppSessionRequest struct {
	SessionID            string   `protobuf:"bytes,1,opt,name=SessionID,proto3" json:"session_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppSessionRequest) Reset()         { *m = DeleteAppSessionRequest{} }
func (m *DeleteAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAppSessionRequest) ProtoMessage()    {}
func (*DeleteAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{36}
}
func (m *DeleteAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAppSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppSessionRequest.Merge(dst, src)
}
func (m *DeleteAppSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppSessionRequest proto.InternalMessageInfo

func (m *DeleteAppSessionRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

// GetKubeServicesRequest are the parameters used to request kubernetes services.
type GetKubeServicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetKubeServicesRequest) Reset()         { *m = GetKubeServicesRequest{} }
func (m *GetKubeServicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetKubeServicesRequest) ProtoMessage()    {}
func (*GetKubeServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{37}
}
func (m *GetKubeServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKubeServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKubeServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetKubeServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKubeServicesRequest.Merge(dst, src)
}
func (m *GetKubeServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetKubeServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKubeServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetKubeServicesRequest proto.InternalMessageInfo

// GetKubeServicesResponse contains all requested kubernetes services.
type GetKubeServicesResponse struct {
	// Servers is a slice of services.Server that represent kubernetes
	// services.
	Servers              []*services.ServerV2 `protobuf:"bytes,1,rep,name=Servers" json:"servers"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetKubeServicesResponse) Reset()         { *m = GetKubeServicesResponse{} }
func (m *GetKubeServicesResponse) String() string { return proto.CompactTextString(m) }
func (*GetKubeServicesResponse) ProtoMessage()    {}
func (*GetKubeServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{38}
}
func (m *GetKubeServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetKubeServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetKubeServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetKubeServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetKubeServicesResponse.Merge(dst, src)
}
func (m *GetKubeServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetKubeServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetKubeServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetKubeServicesResponse proto.InternalMessageInfo

func (m *GetKubeServicesResponse) GetServers() []*services.ServerV2 {
	if m != nil {
		return m.Servers
	}
	return nil
}

// UpsertKubeServiceRequest are the parameters used to add or update a
// kubernetes service.
type UpsertKubeServiceRequest struct {
	Server               *services.ServerV2 `protobuf:"bytes,1,opt,name=Server" json:"server"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpsertKubeServiceRequest) Reset()         { *m = UpsertKubeServiceRequest{} }
func (m *UpsertKubeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertKubeServiceRequest) ProtoMessage()    {}
func (*UpsertKubeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{39}
}
func (m *UpsertKubeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertKubeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertKubeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpsertKubeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertKubeServiceRequest.Merge(dst, src)
}
func (m *UpsertKubeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertKubeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertKubeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertKubeServiceRequest proto.InternalMessageInfo

func (m *UpsertKubeServiceRequest) GetServer() *services.ServerV2 {
	if m != nil {
		return m.Server
	}
	return nil
}

// DeleteKubeServiceRequest are the parameters used to remove a kubernetes service.
type DeleteKubeServiceRequest struct {
	// Name is the name of the kubernetes service to delete.
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKubeServiceRequest) Reset()         { *m = DeleteKubeServiceRequest{} }
func (m *DeleteKubeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteKubeServiceRequest) ProtoMessage()    {}
func (*DeleteKubeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{40}
}
func (m *DeleteKubeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteKubeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteKubeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteKubeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKubeServiceRequest.Merge(dst, src)
}
func (m *DeleteKubeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteKubeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKubeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKubeServiceRequest proto.InternalMessageInfo

func (m *DeleteKubeServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteAllKubeServicesRequest are the parameters used to remove all kubernetes services.
type DeleteAllKubeServicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAllKubeServicesRequest) Reset()         { *m = DeleteAllKubeServicesRequest{} }
func (m *DeleteAllKubeServicesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAllKubeServicesRequest) ProtoMessage()    {}
func (*DeleteAllKubeServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authservice_cb74ba7fbf9b8c1a, []int{41}
}
func (m *DeleteAllKubeServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAllKubeServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAllKubeServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAllKubeServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAllKubeServicesRequest.Merge(dst, src)
}
func (m *DeleteAllKubeServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAllKubeServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAllKubeServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAllKubeServicesRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterType((*Watch)(nil), "proto.Watch")
	proto.RegisterType((*WatchKind)(nil), "proto.WatchKind")
	proto.RegisterMapType((map[string]string)(nil), "proto.WatchKind.FilterEntry")
	proto.RegisterType((*Certs)(nil), "proto.Certs")
	proto.RegisterType((*UserCertsRequest)(nil), "proto.UserCertsRequest")
	proto.RegisterType((*GetUserRequest)(nil), "proto.GetUserRequest")
	proto.RegisterType((*GetUsersRequest)(nil), "proto.GetUsersRequest")
	proto.RegisterType((*AccessRequests)(nil), "proto.AccessRequests")
	proto.RegisterType((*PluginDataSeq)(nil), "proto.PluginDataSeq")
	proto.RegisterType((*RequestStateSetter)(nil), "proto.RequestStateSetter")
	proto.RegisterType((*RequestID)(nil), "proto.RequestID")
	proto.RegisterType((*RotateResetPasswordTokenSecretsRequest)(nil), "proto.RotateResetPasswordTokenSecretsRequest")
	proto.RegisterType((*GetResetPasswordTokenRequest)(nil), "proto.GetResetPasswordTokenRequest")
	proto.RegisterType((*CreateResetPasswordTokenRequest)(nil), "proto.CreateResetPasswordTokenRequest")
	proto.RegisterType((*PingRequest)(nil), "proto.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "proto.PingResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "proto.DeleteUserRequest")
	proto.RegisterType((*Semaphores)(nil), "proto.Semaphores")
	proto.RegisterType((*AuditStreamRequest)(nil), "proto.AuditStreamRequest")
	proto.RegisterType((*AuditStreamStatus)(nil), "proto.AuditStreamStatus")
	proto.RegisterType((*CreateStream)(nil), "proto.CreateStream")
	proto.RegisterType((*ResumeStream)(nil), "proto.ResumeStream")
	proto.RegisterType((*CompleteStream)(nil), "proto.CompleteStream")
	proto.RegisterType((*FlushAndCloseStream)(nil), "proto.FlushAndCloseStream")
	proto.RegisterType((*GetAppServersRequest)(nil), "proto.GetAppServersRequest")
	proto.RegisterType((*GetAppServersResponse)(nil), "proto.GetAppServersResponse")
	proto.RegisterType((*UpsertAppServerRequest)(nil), "proto.UpsertAppServerRequest")
	proto.RegisterType((*DeleteAppServerRequest)(nil), "proto.DeleteAppServerRequest")
	proto.RegisterType((*DeleteAllAppServersRequest)(nil), "proto.DeleteAllAppServersRequest")
	proto.RegisterType((*GenerateAppTokenRequest)(nil), "proto.GenerateAppTokenRequest")
	proto.RegisterType((*GenerateAppTokenResponse)(nil), "proto.GenerateAppTokenResponse")
	proto.RegisterType((*GetAppSessionRequest)(nil), "proto.GetAppSessionRequest")
	proto.RegisterType((*GetAppSessionResponse)(nil), "proto.GetAppSessionResponse")
	proto.RegisterType((*GetAppSessionsResponse)(nil), "proto.GetAppSessionsResponse")
	proto.RegisterType((*CreateAppSessionRequest)(nil), "proto.CreateAppSessionRequest")
	proto.RegisterType((*CreateAppSessionResponse)(nil), "proto.CreateAppSessionResponse")
	proto.RegisterType((*DeleteAppSessionRequest)(nil), "proto.DeleteAppSessionRequest")
	proto.RegisterType((*GetKubeServicesRequest)(nil), "proto.GetKubeServicesRequest")
	proto.RegisterType((*GetKubeServicesResponse)(nil), "proto.GetKubeServicesResponse")
	proto.RegisterType((*UpsertKubeServiceRequest)(nil), "proto.UpsertKubeServiceRequest")
	proto.RegisterType((*DeleteKubeServiceRequest)(nil), "proto.DeleteKubeServiceRequest")
	proto.RegisterType((*DeleteAllKubeServicesRequest)(nil), "proto.DeleteAllKubeServicesRequest")
	proto.RegisterEnum("proto.Operation", Operation_name, Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthService service

type AuthServiceClient interface {
	// SendKeepAlives allows node to send a stream of keep alive requests
	SendKeepAlives(ctx context.Context, opts ...grpc.CallOption) (AuthService_SendKeepAlivesClient, error)
	// WatchEvents returns a new stream of cluster events
	WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (AuthService_WatchEventsClient, error)
	// UpsertNode upserts node
	UpsertNode(ctx context.Context, in *services.ServerV2, opts ...grpc.CallOption) (*services.KeepAlive, error)
	// GenerateUserCerts generates a set of user certificates for use by `tctl
	// auth sign`.
	GenerateUserCerts(ctx context.Context, in *UserCertsRequest, opts ...grpc.CallOption) (*Certs, error)
	// GetUser gets a user resource by name.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*services.UserV2, error)
	// GetUsers gets all current user resources.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (AuthService_GetUsersClient, error)
	// GetAccessRequests gets all pending access requests.
	GetAccessRequests(ctx context.Context, in *services.AccessRequestFilter, opts ...grpc.CallOption) (*AccessRequests, error)
	// CreateAccessRequest creates a new access request.
	CreateAccessRequest(ctx context.Context, in *services.AccessRequestV3, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteAccessRequest deletes an access request.
	DeleteAccessRequest(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetAccessRequestState sets the state of an access request.
	SetAccessRequestState(ctx context.Context, in *RequestStateSetter, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetAccessCapabilities requests the access capabilites of a user.
	GetAccessCapabilities(ctx context.Context, in *services.AccessCapabilitiesRequest, opts ...grpc.CallOption) (*services.AccessCapabilities, error)
	// GetPluginData gets all plugin data matching the supplied filter.
	GetPluginData(ctx context.Context, in *services.PluginDataFilter, opts ...grpc.CallOption) (*PluginDataSeq, error)
	// UpdatePluginData updates a plugin's resource-specific datastore.
	UpdatePluginData(ctx context.Context, in *services.PluginDataUpdateParams, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ping gets basic info about the auth server. This method is intended
	// to mimic the behavior of the proxy's Ping method, and may be used by
	// clients for verification or configuration on startup.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// RotateResetPasswordTokenSecrets rotates token secrets for a given tokenID.
	RotateResetPasswordTokenSecrets(ctx context.Context, in *RotateResetPasswordTokenSecretsRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenSecretsV3, error)
	// GetResetPasswordToken returns a token.
	GetResetPasswordToken(ctx context.Context, in *GetResetPasswordTokenRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenV3, error)
	// CreateResetPasswordToken creates ResetPasswordToken.
	CreateResetPasswordToken(ctx context.Context, in *CreateResetPasswordTokenRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenV3, error)
	// CreateUser inserts a new user entry to a backend.
	CreateUser(ctx context.Context, in *services.UserV2, opts ...grpc.CallOption) (*empty.Empty, error)
	// UpdateUser updates an existing user in a backend.
	UpdateUser(ctx context.Context, in *services.UserV2, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteUser deletes an existing user in a backend by username.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// AcquireSemaphore acquires lease with requested resources from semaphore.
	AcquireSemaphore(ctx context.Context, in *services.AcquireSemaphoreRequest, opts ...grpc.CallOption) (*services.SemaphoreLease, error)
	// KeepAliveSemaphoreLease updates semaphore lease.
	KeepAliveSemaphoreLease(ctx context.Context, in *services.SemaphoreLease, opts ...grpc.CallOption) (*empty.Empty, error)
	// CancelSemaphoreLease cancels semaphore lease early.
	CancelSemaphoreLease(ctx context.Context, in *services.SemaphoreLease, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetSemaphores returns a list of all semaphores matching the supplied filter.
	GetSemaphores(ctx context.Context, in *services.SemaphoreFilter, opts ...grpc.CallOption) (*Semaphores, error)
	// DeleteSemaphore deletes a semaphore matching the supplied filter.
	DeleteSemaphore(ctx context.Context, in *services.SemaphoreFilter, opts ...grpc.CallOption) (*empty.Empty, error)
	// EmitAuditEvent emits audit event
	EmitAuditEvent(ctx context.Context, in *events.OneOf, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateAuditStream creates or resumes audit events streams
	CreateAuditStream(ctx context.Context, opts ...grpc.CallOption) (AuthService_CreateAuditStreamClient, error)
	// GetAppServers gets all application servers.
	GetAppServers(ctx context.Context, in *GetAppServersRequest, opts ...grpc.CallOption) (*GetAppServersResponse, error)
	// UpsertAppServer adds an application server.
	UpsertAppServer(ctx context.Context, in *UpsertAppServerRequest, opts ...grpc.CallOption) (*services.KeepAlive, error)
	// DeleteAppServer removes an application server.
	DeleteAppServer(ctx context.Context, in *DeleteAppServerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteAllAppServers removes all application servers.
	DeleteAllAppServers(ctx context.Context, in *DeleteAllAppServersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GenerateAppToken will generate a JWT token for application access.
	GenerateAppToken(ctx context.Context, in *GenerateAppTokenRequest, opts ...grpc.CallOption) (*GenerateAppTokenResponse, error)
	// GetAppSession gets an application web session.
	GetAppSession(ctx context.Context, in *GetAppSessionRequest, opts ...grpc.CallOption) (*GetAppSessionResponse, error)
	// GetAppSessions gets all application web sessions.
	GetAppSessions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAppSessionsResponse, error)
	// CreateAppSession creates an application web session. Application web
	// sessions represent a browser session the client holds.
	CreateAppSession(ctx context.Context, in *CreateAppSessionRequest, opts ...grpc.CallOption) (*CreateAppSessionResponse, error)
	// DeleteAppSession removes an application web session.
	DeleteAppSession(ctx context.Context, in *DeleteAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteAllAppSessions removes all application web sessions.
	DeleteAllAppSessions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// UpdateRemoteCluster updates remote cluster
	UpdateRemoteCluster(ctx context.Context, in *services.RemoteClusterV3, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetKubeServices gets all kubernetes services.
	GetKubeServices(ctx context.Context, in *GetKubeServicesRequest, opts ...grpc.CallOption) (*GetKubeServicesResponse, error)
	// UpsertKubeService adds or updates a kubernetes service.
	UpsertKubeService(ctx context.Context, in *UpsertKubeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteKubeService removes a kubernetes service.
	DeleteKubeService(ctx context.Context, in *DeleteKubeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeleteAllKubeServices removes all kubernetes services.
	DeleteAllKubeServices(ctx context.Context, in *DeleteAllKubeServicesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SendKeepAlives(ctx context.Context, opts ...grpc.CallOption) (AuthService_SendKeepAlivesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthService_serviceDesc.Streams[0], "/proto.AuthService/SendKeepAlives", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceSendKeepAlivesClient{stream}
	return x, nil
}

type AuthService_SendKeepAlivesClient interface {
	Send(*services.KeepAlive) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type authServiceSendKeepAlivesClient struct {
	grpc.ClientStream
}

func (x *authServiceSendKeepAlivesClient) Send(m *services.KeepAlive) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceSendKeepAlivesClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) WatchEvents(ctx context.Context, in *Watch, opts ...grpc.CallOption) (AuthService_WatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthService_serviceDesc.Streams[1], "/proto.AuthService/WatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceWatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_WatchEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type authServiceWatchEventsClient struct {
	grpc.ClientStream
}

func (x *authServiceWatchEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) UpsertNode(ctx context.Context, in *services.ServerV2, opts ...grpc.CallOption) (*services.KeepAlive, error) {
	out := new(services.KeepAlive)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpsertNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateUserCerts(ctx context.Context, in *UserCertsRequest, opts ...grpc.CallOption) (*Certs, error) {
	out := new(Certs)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GenerateUserCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*services.UserV2, error) {
	out := new(services.UserV2)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (AuthService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthService_serviceDesc.Streams[2], "/proto.AuthService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthService_GetUsersClient interface {
	Recv() (*services.UserV2, error)
	grpc.ClientStream
}

type authServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *authServiceGetUsersClient) Recv() (*services.UserV2, error) {
	m := new(services.UserV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) GetAccessRequests(ctx context.Context, in *services.AccessRequestFilter, opts ...grpc.CallOption) (*AccessRequests, error) {
	out := new(AccessRequests)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAccessRequest(ctx context.Context, in *services.AccessRequestV3, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CreateAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAccessRequest(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SetAccessRequestState(ctx context.Context, in *RequestStateSetter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/SetAccessRequestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAccessCapabilities(ctx context.Context, in *services.AccessCapabilitiesRequest, opts ...grpc.CallOption) (*services.AccessCapabilities, error) {
	out := new(services.AccessCapabilities)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAccessCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPluginData(ctx context.Context, in *services.PluginDataFilter, opts ...grpc.CallOption) (*PluginDataSeq, error) {
	out := new(PluginDataSeq)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetPluginData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePluginData(ctx context.Context, in *services.PluginDataUpdateParams, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdatePluginData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RotateResetPasswordTokenSecrets(ctx context.Context, in *RotateResetPasswordTokenSecretsRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenSecretsV3, error) {
	out := new(services.ResetPasswordTokenSecretsV3)
	err := c.cc.Invoke(ctx, "/proto.AuthService/RotateResetPasswordTokenSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetResetPasswordToken(ctx context.Context, in *GetResetPasswordTokenRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenV3, error) {
	out := new(services.ResetPasswordTokenV3)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetResetPasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateResetPasswordToken(ctx context.Context, in *CreateResetPasswordTokenRequest, opts ...grpc.CallOption) (*services.ResetPasswordTokenV3, error) {
	out := new(services.ResetPasswordTokenV3)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CreateResetPasswordToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateUser(ctx context.Context, in *services.UserV2, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *services.UserV2, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AcquireSemaphore(ctx context.Context, in *services.AcquireSemaphoreRequest, opts ...grpc.CallOption) (*services.SemaphoreLease, error) {
	out := new(services.SemaphoreLease)
	err := c.cc.Invoke(ctx, "/proto.AuthService/AcquireSemaphore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) KeepAliveSemaphoreLease(ctx context.Context, in *services.SemaphoreLease, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/KeepAliveSemaphoreLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CancelSemaphoreLease(ctx context.Context, in *services.SemaphoreLease, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CancelSemaphoreLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSemaphores(ctx context.Context, in *services.SemaphoreFilter, opts ...grpc.CallOption) (*Semaphores, error) {
	out := new(Semaphores)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetSemaphores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSemaphore(ctx context.Context, in *services.SemaphoreFilter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteSemaphore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmitAuditEvent(ctx context.Context, in *events.OneOf, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/EmitAuditEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAuditStream(ctx context.Context, opts ...grpc.CallOption) (AuthService_CreateAuditStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthService_serviceDesc.Streams[3], "/proto.AuthService/CreateAuditStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceCreateAuditStreamClient{stream}
	return x, nil
}

type AuthService_CreateAuditStreamClient interface {
	Send(*AuditStreamRequest) error
	Recv() (*events.StreamStatus, error)
	grpc.ClientStream
}

type authServiceCreateAuditStreamClient struct {
	grpc.ClientStream
}

func (x *authServiceCreateAuditStreamClient) Send(m *AuditStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceCreateAuditStreamClient) Recv() (*events.StreamStatus, error) {
	m := new(events.StreamStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) GetAppServers(ctx context.Context, in *GetAppServersRequest, opts ...grpc.CallOption) (*GetAppServersResponse, error) {
	out := new(GetAppServersResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAppServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertAppServer(ctx context.Context, in *UpsertAppServerRequest, opts ...grpc.CallOption) (*services.KeepAlive, error) {
	out := new(services.KeepAlive)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpsertAppServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAppServer(ctx context.Context, in *DeleteAppServerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAppServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllAppServers(ctx context.Context, in *DeleteAllAppServersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAllAppServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateAppToken(ctx context.Context, in *GenerateAppTokenRequest, opts ...grpc.CallOption) (*GenerateAppTokenResponse, error) {
	out := new(GenerateAppTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GenerateAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAppSession(ctx context.Context, in *GetAppSessionRequest, opts ...grpc.CallOption) (*GetAppSessionResponse, error) {
	out := new(GetAppSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAppSessions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAppSessionsResponse, error) {
	out := new(GetAppSessionsResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetAppSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAppSession(ctx context.Context, in *CreateAppSessionRequest, opts ...grpc.CallOption) (*CreateAppSessionResponse, error) {
	out := new(CreateAppSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/CreateAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAppSession(ctx context.Context, in *DeleteAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllAppSessions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAllAppSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateRemoteCluster(ctx context.Context, in *services.RemoteClusterV3, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpdateRemoteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetKubeServices(ctx context.Context, in *GetKubeServicesRequest, opts ...grpc.CallOption) (*GetKubeServicesResponse, error) {
	out := new(GetKubeServicesResponse)
	err := c.cc.Invoke(ctx, "/proto.AuthService/GetKubeServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpsertKubeService(ctx context.Context, in *UpsertKubeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/UpsertKubeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteKubeService(ctx context.Context, in *DeleteKubeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteKubeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAllKubeServices(ctx context.Context, in *DeleteAllKubeServicesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.AuthService/DeleteAllKubeServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	// SendKeepAlives allows node to send a stream of keep alive requests
	SendKeepAlives(AuthService_SendKeepAlivesServer) error
	// WatchEvents returns a new stream of cluster events
	WatchEvents(*Watch, AuthService_WatchEventsServer) error
	// UpsertNode upserts node
	UpsertNode(context.Context, *services.ServerV2) (*services.KeepAlive, error)
	// GenerateUserCerts generates a set of user certificates for use by `tctl
	// auth sign`.
	GenerateUserCerts(context.Context, *UserCertsRequest) (*Certs, error)
	// GetUser gets a user resource by name.
	GetUser(context.Context, *GetUserRequest) (*services.UserV2, error)
	// GetUsers gets all current user resources.
	GetUsers(*GetUsersRequest, AuthService_GetUsersServer) error
	// GetAccessRequests gets all pending access requests.
	GetAccessRequests(context.Context, *services.AccessRequestFilter) (*AccessRequests, error)
	// CreateAccessRequest creates a new access request.
	CreateAccessRequest(context.Context, *services.AccessRequestV3) (*empty.Empty, error)
	// DeleteAccessRequest deletes an access request.
	DeleteAccessRequest(context.Context, *RequestID) (*empty.Empty, error)
	// SetAccessRequestState sets the state of an access request.
	SetAccessRequestState(context.Context, *RequestStateSetter) (*empty.Empty, error)
	// GetAccessCapabilities requests the access capabilites of a user.
	GetAccessCapabilities(context.Context, *services.AccessCapabilitiesRequest) (*services.AccessCapabilities, error)
	// GetPluginData gets all plugin data matching the supplied filter.
	GetPluginData(context.Context, *services.PluginDataFilter) (*PluginDataSeq, error)
	// UpdatePluginData updates a plugin's resource-specific datastore.
	UpdatePluginData(context.Context, *services.PluginDataUpdateParams) (*empty.Empty, error)
	// Ping gets basic info about the auth server. This method is intended
	// to mimic the behavior of the proxy's Ping method, and may be used by
	// clients for verification or configuration on startup.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// RotateResetPasswordTokenSecrets rotates token secrets for a given tokenID.
	RotateResetPasswordTokenSecrets(context.Context, *RotateResetPasswordTokenSecretsRequest) (*services.ResetPasswordTokenSecretsV3, error)
	// GetResetPasswordToken returns a token.
	GetResetPasswordToken(context.Context, *GetResetPasswordTokenRequest) (*services.ResetPasswordTokenV3, error)
	// CreateResetPasswordToken creates ResetPasswordToken.
	CreateResetPasswordToken(context.Context, *CreateResetPasswordTokenRequest) (*services.ResetPasswordTokenV3, error)
	// CreateUser inserts a new user entry to a backend.
	CreateUser(context.Context, *services.UserV2) (*empty.Empty, error)
	// UpdateUser updates an existing user in a backend.
	UpdateUser(context.Context, *services.UserV2) (*empty.Empty, error)
	// DeleteUser deletes an existing user in a backend by username.
	DeleteUser(context.Context, *DeleteUserRequest) (*empty.Empty, error)
	// AcquireSemaphore acquires lease with requested resources from semaphore.
	AcquireSemaphore(context.Context, *services.AcquireSemaphoreRequest) (*services.SemaphoreLease, error)
	// KeepAliveSemaphoreLease updates semaphore lease.
	KeepAliveSemaphoreLease(context.Context, *services.SemaphoreLease) (*empty.Empty, error)
	// CancelSemaphoreLease cancels semaphore lease early.
	CancelSemaphoreLease(context.Context, *services.SemaphoreLease) (*empty.Empty, error)
	// GetSemaphores returns a list of all semaphores matching the supplied filter.
	GetSemaphores(context.Context, *services.SemaphoreFilter) (*Semaphores, error)
	// DeleteSemaphore deletes a semaphore matching the supplied filter.
	DeleteSemaphore(context.Context, *services.SemaphoreFilter) (*empty.Empty, error)
	// EmitAuditEvent emits audit event
	EmitAuditEvent(context.Context, *events.OneOf) (*empty.Empty, error)
	// CreateAuditStream creates or resumes audit events streams
	CreateAuditStream(AuthService_CreateAuditStreamServer) error
	// GetAppServers gets all application servers.
	GetAppServers(context.Context, *GetAppServersRequest) (*GetAppServersResponse, error)
	// UpsertAppServer adds an application server.
	UpsertAppServer(context.Context, *UpsertAppServerRequest) (*services.KeepAlive, error)
	// DeleteAppServer removes an application server.
	DeleteAppServer(context.Context, *DeleteAppServerRequest) (*empty.Empty, error)
	// DeleteAllAppServers removes all application servers.
	DeleteAllAppServers(context.Context, *DeleteAllAppServersRequest) (*empty.Empty, error)
	// GenerateAppToken will generate a JWT token for application access.
	GenerateAppToken(context.Context, *GenerateAppTokenRequest) (*GenerateAppTokenResponse, error)
	// GetAppSession gets an application web session.
	GetAppSession(context.Context, *GetAppSessionRequest) (*GetAppSessionResponse, error)
	// GetAppSessions gets all application web sessions.
	GetAppSessions(context.Context, *empty.Empty) (*GetAppSessionsResponse, error)
	// CreateAppSession creates an application web session. Application web
	// sessions represent a browser session the client holds.
	CreateAppSession(context.Context, *CreateAppSessionRequest) (*CreateAppSessionResponse, error)
	// DeleteAppSession removes an application web session.
	DeleteAppSession(context.Context, *DeleteAppSessionRequest) (*empty.Empty, error)
	// DeleteAllAppSessions removes all application web sessions.
	DeleteAllAppSessions(context.Context, *empty.Empty) (*empty.Empty, error)
	// UpdateRemoteCluster updates remote cluster
	UpdateRemoteCluster(context.Context, *services.RemoteClusterV3) (*empty.Empty, error)
	// GetKubeServices gets all kubernetes services.
	GetKubeServices(context.Context, *GetKubeServicesRequest) (*GetKubeServicesResponse, error)
	// UpsertKubeService adds or updates a kubernetes service.
	UpsertKubeService(context.Context, *UpsertKubeServiceRequest) (*empty.Empty, error)
	// DeleteKubeService removes a kubernetes service.
	DeleteKubeService(context.Context, *DeleteKubeServiceRequest) (*empty.Empty, error)
	// DeleteAllKubeServices removes all kubernetes services.
	DeleteAllKubeServices(context.Context, *DeleteAllKubeServicesRequest) (*empty.Empty, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_SendKeepAlives_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).SendKeepAlives(&authServiceSendKeepAlivesServer{stream})
}

type AuthService_SendKeepAlivesServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*services.KeepAlive, error)
	grpc.ServerStream
}

type authServiceSendKeepAlivesServer struct {
	grpc.ServerStream
}

func (x *authServiceSendKeepAlivesServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceSendKeepAlivesServer) Recv() (*services.KeepAlive, error) {
	m := new(services.KeepAlive)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Watch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).WatchEvents(m, &authServiceWatchEventsServer{stream})
}

type AuthService_WatchEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type authServiceWatchEventsServer struct {
	grpc.ServerStream
}

func (x *authServiceWatchEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthService_UpsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ServerV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpsertNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertNode(ctx, req.(*services.ServerV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateUserCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateUserCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GenerateUserCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateUserCerts(ctx, req.(*UserCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServiceServer).GetUsers(m, &authServiceGetUsersServer{stream})
}

type AuthService_GetUsersServer interface {
	Send(*services.UserV2) error
	grpc.ServerStream
}

type authServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *authServiceGetUsersServer) Send(m *services.UserV2) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthService_GetAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.AccessRequestFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccessRequests(ctx, req.(*services.AccessRequestFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.AccessRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CreateAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAccessRequest(ctx, req.(*services.AccessRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAccessRequest(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SetAccessRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStateSetter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SetAccessRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/SetAccessRequestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SetAccessRequestState(ctx, req.(*RequestStateSetter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAccessCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.AccessCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAccessCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAccessCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAccessCapabilities(ctx, req.(*services.AccessCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPluginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PluginDataFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPluginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetPluginData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPluginData(ctx, req.(*services.PluginDataFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePluginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PluginDataUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePluginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdatePluginData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePluginData(ctx, req.(*services.PluginDataUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RotateResetPasswordTokenSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateResetPasswordTokenSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RotateResetPasswordTokenSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/RotateResetPasswordTokenSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RotateResetPasswordTokenSecrets(ctx, req.(*RotateResetPasswordTokenSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetResetPasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetResetPasswordToken(ctx, req.(*GetResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateResetPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResetPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateResetPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CreateResetPasswordToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateResetPasswordToken(ctx, req.(*CreateResetPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.UserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUser(ctx, req.(*services.UserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.UserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*services.UserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AcquireSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.AcquireSemaphoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AcquireSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/AcquireSemaphore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AcquireSemaphore(ctx, req.(*services.AcquireSemaphoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_KeepAliveSemaphoreLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.SemaphoreLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).KeepAliveSemaphoreLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/KeepAliveSemaphoreLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).KeepAliveSemaphoreLease(ctx, req.(*services.SemaphoreLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CancelSemaphoreLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.SemaphoreLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CancelSemaphoreLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CancelSemaphoreLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CancelSemaphoreLease(ctx, req.(*services.SemaphoreLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSemaphores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.SemaphoreFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSemaphores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetSemaphores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSemaphores(ctx, req.(*services.SemaphoreFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSemaphore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.SemaphoreFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSemaphore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteSemaphore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSemaphore(ctx, req.(*services.SemaphoreFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmitAuditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.OneOf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmitAuditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/EmitAuditEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmitAuditEvent(ctx, req.(*events.OneOf))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAuditStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).CreateAuditStream(&authServiceCreateAuditStreamServer{stream})
}

type AuthService_CreateAuditStreamServer interface {
	Send(*events.StreamStatus) error
	Recv() (*AuditStreamRequest, error)
	grpc.ServerStream
}

type authServiceCreateAuditStreamServer struct {
	grpc.ServerStream
}

func (x *authServiceCreateAuditStreamServer) Send(m *events.StreamStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceCreateAuditStreamServer) Recv() (*AuditStreamRequest, error) {
	m := new(AuditStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_GetAppServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAppServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAppServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAppServers(ctx, req.(*GetAppServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertAppServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAppServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertAppServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpsertAppServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertAppServer(ctx, req.(*UpsertAppServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAppServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAppServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAppServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAppServer(ctx, req.(*DeleteAppServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllAppServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllAppServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllAppServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAllAppServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllAppServers(ctx, req.(*DeleteAllAppServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GenerateAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateAppToken(ctx, req.(*GenerateAppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAppSession(ctx, req.(*GetAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAppSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAppSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetAppSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAppSessions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/CreateAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAppSession(ctx, req.(*CreateAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAppSession(ctx, req.(*DeleteAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllAppSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllAppSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAllAppSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllAppSessions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateRemoteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.RemoteClusterV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateRemoteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpdateRemoteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateRemoteCluster(ctx, req.(*services.RemoteClusterV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetKubeServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetKubeServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/GetKubeServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetKubeServices(ctx, req.(*GetKubeServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpsertKubeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertKubeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpsertKubeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/UpsertKubeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpsertKubeService(ctx, req.(*UpsertKubeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteKubeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteKubeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteKubeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteKubeService(ctx, req.(*DeleteKubeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAllKubeServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllKubeServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAllKubeServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthService/DeleteAllKubeServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAllKubeServices(ctx, req.(*DeleteAllKubeServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertNode",
			Handler:    _AuthService_UpsertNode_Handler,
		},
		{
			MethodName: "GenerateUserCerts",
			Handler:    _AuthService_GenerateUserCerts_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "GetAccessRequests",
			Handler:    _AuthService_GetAccessRequests_Handler,
		},
		{
			MethodName: "CreateAccessRequest",
			Handler:    _AuthService_CreateAccessRequest_Handler,
		},
		{
			MethodName: "DeleteAccessRequest",
			Handler:    _AuthService_DeleteAccessRequest_Handler,
		},
		{
			MethodName: "SetAccessRequestState",
			Handler:    _AuthService_SetAccessRequestState_Handler,
		},
		{
			MethodName: "GetAccessCapabilities",
			Handler:    _AuthService_GetAccessCapabilities_Handler,
		},
		{
			MethodName: "GetPluginData",
			Handler:    _AuthService_GetPluginData_Handler,
		},
		{
			MethodName: "UpdatePluginData",
			Handler:    _AuthService_UpdatePluginData_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AuthService_Ping_Handler,
		},
		{
			MethodName: "RotateResetPasswordTokenSecrets",
			Handler:    _AuthService_RotateResetPasswordTokenSecrets_Handler,
		},
		{
			MethodName: "GetResetPasswordToken",
			Handler:    _AuthService_GetResetPasswordToken_Handler,
		},
		{
			MethodName: "CreateResetPasswordToken",
			Handler:    _AuthService_CreateResetPasswordToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "AcquireSemaphore",
			Handler:    _AuthService_AcquireSemaphore_Handler,
		},
		{
			MethodName: "KeepAliveSemaphoreLease",
			Handler:    _AuthService_KeepAliveSemaphoreLease_Handler,
		},
		{
			MethodName: "CancelSemaphoreLease",
			Handler:    _AuthService_CancelSemaphoreLease_Handler,
		},
		{
			MethodName: "GetSemaphores",
			Handler:    _AuthService_GetSemaphores_Handler,
		},
		{
			MethodName: "DeleteSemaphore",
			Handler:    _AuthService_DeleteSemaphore_Handler,
		},
		{
			MethodName: "EmitAuditEvent",
			Handler:    _AuthService_EmitAuditEvent_Handler,
		},
		{
			MethodName: "GetAppServers",
			Handler:    _AuthService_GetAppServers_Handler,
		},
		{
			MethodName: "UpsertAppServer",
			Handler:    _AuthService_UpsertAppServer_Handler,
		},
		{
			MethodName: "DeleteAppServer",
			Handler:    _AuthService_DeleteAppServer_Handler,
		},
		{
			MethodName: "DeleteAllAppServers",
			Handler:    _AuthService_DeleteAllAppServers_Handler,
		},
		{
			MethodName: "GenerateAppToken",
			Handler:    _AuthService_GenerateAppToken_Handler,
		},
		{
			MethodName: "GetAppSession",
			Handler:    _AuthService_GetAppSession_Handler,
		},
		{
			MethodName: "GetAppSessions",
			Handler:    _AuthService_GetAppSessions_Handler,
		},
		{
			MethodName: "CreateAppSession",
			Handler:    _AuthService_CreateAppSession_Handler,
		},
		{
			MethodName: "DeleteAppSession",
			Handler:    _AuthService_DeleteAppSession_Handler,
		},
		{
			MethodName: "DeleteAllAppSessions",
			Handler:    _AuthService_DeleteAllAppSessions_Handler,
		},
		{
			MethodName: "UpdateRemoteCluster",
			Handler:    _AuthService_UpdateRemoteCluster_Handler,
		},
		{
			MethodName: "GetKubeServices",
			Handler:    _AuthService_GetKubeServices_Handler,
		},
		{
			MethodName: "UpsertKubeService",
			Handler:    _AuthService_UpsertKubeService_Handler,
		},
		{
			MethodName: "DeleteKubeService",
			Handler:    _AuthService_DeleteKubeService_Handler,
		},
		{
			MethodName: "DeleteAllKubeServices",
			Handler:    _AuthService_DeleteAllKubeServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendKeepAlives",
			Handler:       _AuthService_SendKeepAlives_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchEvents",
			Handler:       _AuthService_WatchEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _AuthService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateAuditStream",
			Handler:       _AuthService_CreateAuditStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "authservice.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Type))
	}
	if m.Resource != nil {
		nn1, err := m.Resource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_ResourceHeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResourceHeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ResourceHeader.Size()))
		n2, err := m.ResourceHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Event_CertAuthority) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CertAuthority != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.CertAuthority.Size()))
		n3, err := m.CertAuthority.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Event_StaticTokens) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StaticTokens != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.StaticTokens.Size()))
		n4, err := m.StaticTokens.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Event_ProvisionToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProvisionToken != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ProvisionToken.Size()))
		n5, err := m.ProvisionToken.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Event_ClusterName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClusterName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ClusterName.Size()))
		n6, err := m.ClusterName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Event_ClusterConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClusterConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ClusterConfig.Size()))
		n7, err := m.ClusterConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Event_User) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.User != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.User.Size()))
		n8, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Event_Role) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Role != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Role.Size()))
		n9, err := m.Role.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Event_Namespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Namespace != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Namespace.Size()))
		n10, err := m.Namespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Event_Server) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Server != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Server.Size()))
		n11, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Event_ReverseTunnel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReverseTunnel != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ReverseTunnel.Size()))
		n12, err := m.ReverseTunnel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Event_TunnelConnection) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TunnelConnection != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.TunnelConnection.Size()))
		n13, err := m.TunnelConnection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Event_AccessRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AccessRequest != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.AccessRequest.Size()))
		n14, err := m.AccessRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Event_AppSession) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppSession != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.AppSession.Size()))
		n15, err := m.AppSession.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Event_RemoteCluster) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoteCluster != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.RemoteCluster.Size()))
		n16, err := m.RemoteCluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Watch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kinds) > 0 {
		for _, msg := range m.Kinds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WatchKind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchKind) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if m.LoadSecrets {
		dAtA[i] = 0x10
		i++
		if m.LoadSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Filter) > 0 {
		for k, _ := range m.Filter {
			dAtA[i] = 0x22
			i++
			v := m.Filter[k]
			mapSize := 1 + len(k) + sovAuthservice(uint64(len(k))) + 1 + len(v) + sovAuthservice(uint64(len(v)))
			i = encodeVarintAuthservice(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Certs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SSH) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.SSH)))
		i += copy(dAtA[i:], m.SSH)
	}
	if len(m.TLS) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.TLS)))
		i += copy(dAtA[i:], m.TLS)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserCertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuthservice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)))
	n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expires, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.Format) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.RouteToCluster) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.RouteToCluster)))
		i += copy(dAtA[i:], m.RouteToCluster)
	}
	if len(m.AccessRequests) > 0 {
		for _, s := range m.AccessRequests {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.KubernetesCluster) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.KubernetesCluster)))
		i += copy(dAtA[i:], m.KubernetesCluster)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.WithSecrets {
		dAtA[i] = 0x10
		i++
		if m.WithSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithSecrets {
		dAtA[i] = 0x8
		i++
		if m.WithSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccessRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessRequests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessRequests) > 0 {
		for _, msg := range m.AccessRequests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PluginDataSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginDataSeq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PluginData) > 0 {
		for _, msg := range m.PluginData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestStateSetter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStateSetter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.State))
	}
	if len(m.Delegator) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Delegator)))
		i += copy(dAtA[i:], m.Delegator)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintAuthservice(dAtA, i, uint64(m.Annotations.Size()))
	n18, err := m.Annotations.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RotateResetPasswordTokenSecretsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RotateResetPasswordTokenSecretsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.TokenID)))
		i += copy(dAtA[i:], m.TokenID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetResetPasswordTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResetPasswordTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.TokenID)))
		i += copy(dAtA[i:], m.TokenID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateResetPasswordTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResetPasswordTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.TTL != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.TTL))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.ServerVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ServerVersion)))
		i += copy(dAtA[i:], m.ServerVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Semaphores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Semaphores) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Semaphores) > 0 {
		for _, msg := range m.Semaphores {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuditStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn19, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuditStreamRequest_CreateStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateStream != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.CreateStream.Size()))
		n20, err := m.CreateStream.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *AuditStreamRequest_ResumeStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResumeStream != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.ResumeStream.Size()))
		n21, err := m.ResumeStream.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *AuditStreamRequest_CompleteStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CompleteStream != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.CompleteStream.Size()))
		n22, err := m.CompleteStream.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *AuditStreamRequest_FlushAndCloseStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlushAndCloseStream != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.FlushAndCloseStream.Size()))
		n23, err := m.FlushAndCloseStream.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *AuditStreamRequest_Event) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Event != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Event.Size()))
		n24, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *AuditStreamStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditStreamStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UploadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.UploadID)))
		i += copy(dAtA[i:], m.UploadID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResumeStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if len(m.UploadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.UploadID)))
		i += copy(dAtA[i:], m.UploadID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CompleteStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushAndCloseStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushAndCloseStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppServersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppServersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.SkipValidation {
		dAtA[i] = 0x10
		i++
		if m.SkipValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppServersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppServersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpsertAppServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertAppServerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Server.Size()))
		n25, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAppServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppServerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllAppServersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllAppServersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GenerateAppTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateAppTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuthservice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)))
	n26, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expires, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GenerateAppTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateAppTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Session.Size()))
		n27, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppSessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppSessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, msg := range m.Sessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAppSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.ParentSession) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ParentSession)))
		i += copy(dAtA[i:], m.ParentSession)
	}
	if len(m.PublicAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.PublicAddr)))
		i += copy(dAtA[i:], m.PublicAddr)
	}
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAppSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Session.Size()))
		n28, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAppSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetKubeServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetKubeServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthservice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpsertKubeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertKubeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(m.Server.Size()))
		n29, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteKubeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteKubeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthservice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAllKubeServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAllKubeServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAuthservice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAuthservice(uint64(m.Type))
	}
	if m.Resource != nil {
		n += m.Resource.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_ResourceHeader) Size() (n int) {
	var l int
	_ = l
	if m.ResourceHeader != nil {
		l = m.ResourceHeader.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_CertAuthority) Size() (n int) {
	var l int
	_ = l
	if m.CertAuthority != nil {
		l = m.CertAuthority.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_StaticTokens) Size() (n int) {
	var l int
	_ = l
	if m.StaticTokens != nil {
		l = m.StaticTokens.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_ProvisionToken) Size() (n int) {
	var l int
	_ = l
	if m.ProvisionToken != nil {
		l = m.ProvisionToken.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_ClusterName) Size() (n int) {
	var l int
	_ = l
	if m.ClusterName != nil {
		l = m.ClusterName.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_ClusterConfig) Size() (n int) {
	var l int
	_ = l
	if m.ClusterConfig != nil {
		l = m.ClusterConfig.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_User) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_Role) Size() (n int) {
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_Namespace) Size() (n int) {
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_Server) Size() (n int) {
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_ReverseTunnel) Size() (n int) {
	var l int
	_ = l
	if m.ReverseTunnel != nil {
		l = m.ReverseTunnel.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_TunnelConnection) Size() (n int) {
	var l int
	_ = l
	if m.TunnelConnection != nil {
		l = m.TunnelConnection.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_AccessRequest) Size() (n int) {
	var l int
	_ = l
	if m.AccessRequest != nil {
		l = m.AccessRequest.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_AppSession) Size() (n int) {
	var l int
	_ = l
	if m.AppSession != nil {
		l = m.AppSession.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Event_RemoteCluster) Size() (n int) {
	var l int
	_ = l
	if m.RemoteCluster != nil {
		l = m.RemoteCluster.Size()
		n += 2 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *Watch) Size() (n int) {
	var l int
	_ = l
	if len(m.Kinds) > 0 {
		for _, e := range m.Kinds {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchKind) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.LoadSecrets {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuthservice(uint64(len(k))) + 1 + len(v) + sovAuthservice(uint64(len(v)))
			n += mapEntrySize + 1 + sovAuthservice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Certs) Size() (n int) {
	var l int
	_ = l
	l = len(m.SSH)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.TLS)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserCertsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)
	n += 1 + l + sovAuthservice(uint64(l))
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.RouteToCluster)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if len(m.AccessRequests) > 0 {
		for _, s := range m.AccessRequests {
			l = len(s)
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	l = len(m.KubernetesCluster)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.WithSecrets {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.WithSecrets {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccessRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.AccessRequests) > 0 {
		for _, e := range m.AccessRequests {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginDataSeq) Size() (n int) {
	var l int
	_ = l
	if len(m.PluginData) > 0 {
		for _, e := range m.PluginData {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestStateSetter) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovAuthservice(uint64(m.State))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = m.Annotations.Size()
	n += 1 + l + sovAuthservice(uint64(l))
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RotateResetPasswordTokenSecretsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResetPasswordTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateResetPasswordTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovAuthservice(uint64(m.TTL))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.ServerVersion)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Semaphores) Size() (n int) {
	var l int
	_ = l
	if len(m.Semaphores) > 0 {
		for _, e := range m.Semaphores {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditStreamRequest) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditStreamRequest_CreateStream) Size() (n int) {
	var l int
	_ = l
	if m.CreateStream != nil {
		l = m.CreateStream.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *AuditStreamRequest_ResumeStream) Size() (n int) {
	var l int
	_ = l
	if m.ResumeStream != nil {
		l = m.ResumeStream.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *AuditStreamRequest_CompleteStream) Size() (n int) {
	var l int
	_ = l
	if m.CompleteStream != nil {
		l = m.CompleteStream.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *AuditStreamRequest_FlushAndCloseStream) Size() (n int) {
	var l int
	_ = l
	if m.FlushAndCloseStream != nil {
		l = m.FlushAndCloseStream.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *AuditStreamRequest_Event) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	return n
}
func (m *AuditStreamStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.UploadID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResumeStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.UploadID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompleteStream) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushAndCloseStream) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppServersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.SkipValidation {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppServersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertAppServerRequest) Size() (n int) {
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAppServerRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllAppServersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenerateAppTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expires)
	n += 1 + l + sovAuthservice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenerateAppTokenResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppSessionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppSessionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppSessionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppSessionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.ParentSession)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.PublicAddr)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppSessionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAppSessionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetKubeServicesRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetKubeServicesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovAuthservice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertKubeServiceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteKubeServiceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAllKubeServicesRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAuthservice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthservice(x uint64) (n int) {
	return sovAuthservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ResourceHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_ResourceHeader{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.CertAuthorityV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_CertAuthority{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.StaticTokensV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_StaticTokens{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ProvisionTokenV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_ProvisionToken{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ClusterNameV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_ClusterName{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ClusterConfigV3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_ClusterConfig{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.UserV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_User{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.RoleV3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_Role{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.Namespace{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_Namespace{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ServerV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_Server{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseTunnel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.ReverseTunnelV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_ReverseTunnel{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.TunnelConnectionV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_TunnelConnection{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.AccessRequestV3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_AccessRequest{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.WebSessionV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_AppSession{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &services.RemoteClusterV3{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &Event_RemoteCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Watch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kinds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kinds = append(m.Kinds, WatchKind{})
			if err := m.Kinds[len(m.Kinds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchKind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchKind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchKind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoadSecrets = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthservice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuthservice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthservice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAuthservice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuthservice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuthservice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSH", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSH = append(m.SSH[:0], dAtA[iNdEx:postIndex]...)
			if m.SSH == nil {
				m.SSH = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLS", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLS = append(m.TLS[:0], dAtA[iNdEx:postIndex]...)
			if m.TLS == nil {
				m.TLS = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expires, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteToCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteToCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRequests = append(m.AccessRequests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessRequests = append(m.AccessRequests, &services.AccessRequestV3{})
			if err := m.AccessRequests[len(m.AccessRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginDataSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginDataSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginDataSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginData = append(m.PluginData, &services.PluginDataV3{})
			if err := m.PluginData[len(m.PluginData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStateSetter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStateSetter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStateSetter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (services.RequestState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RotateResetPasswordTokenSecretsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RotateResetPasswordTokenSecretsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RotateResetPasswordTokenSecretsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResetPasswordTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResetPasswordTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResetPasswordTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResetPasswordTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResetPasswordTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResetPasswordTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= (Duration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Semaphores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Semaphores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Semaphores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Semaphores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Semaphores = append(m.Semaphores, &services.SemaphoreV3{})
			if err := m.Semaphores[len(m.Semaphores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateStream{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AuditStreamRequest_CreateStream{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResumeStream{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AuditStreamRequest_ResumeStream{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompleteStream{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AuditStreamRequest_CompleteStream{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushAndCloseStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlushAndCloseStream{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AuditStreamRequest_FlushAndCloseStream{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &events.OneOf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &AuditStreamRequest_Event{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditStreamStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditStreamStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditStreamStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushAndCloseStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushAndCloseStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushAndCloseStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppServersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppServersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppServersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipValidation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppServersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppServersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppServersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &services.ServerV2{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertAppServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertAppServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertAppServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &services.ServerV2{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllAppServersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllAppServersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllAppServersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateAppTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateAppTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateAppTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expires, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateAppTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateAppTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateAppTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &services.WebSessionV2{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppSessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppSessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppSessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &services.WebSessionV2{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAppSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAppSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &services.WebSessionV2{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKubeServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKubeServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &services.ServerV2{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertKubeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertKubeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertKubeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &services.ServerV2{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteKubeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteKubeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteKubeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAllKubeServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllKubeServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllKubeServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthservice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthservice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthservice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthservice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthservice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authservice.proto", fileDescriptor_authservice_cb74ba7fbf9b8c1a) }

var fileDescriptor_authservice_cb74ba7fbf9b8c1a = []byte{
	// 2916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcd, 0x73, 0xdb, 0xc8,
	0xb1, 0x37, 0x45, 0x7d, 0xb1, 0xf5, 0x61, 0x6a, 0x24, 0x4b, 0x30, 0x2d, 0x0b, 0x5e, 0xb8, 0x76,
	0xcb, 0x6f, 0xd7, 0x4f, 0xda, 0x47, 0xd5, 0x7a, 0x6d, 0xef, 0xdb, 0x6c, 0x44, 0x49, 0x96, 0x64,
	0x2b, 0xb6, 0x02, 0xd2, 0x74, 0xb2, 0x49, 0x15, 0x0b, 0x22, 0xc7, 0x12, 0x4a, 0x24, 0x81, 0xc5,
	0x80, 0x72, 0x54, 0x95, 0x43, 0x2a, 0x95, 0x54, 0x8e, 0xc9, 0x31, 0x7f, 0xd2, 0x56, 0x2a, 0xa9,
	0xca, 0x39, 0x07, 0x24, 0x71, 0x6e, 0xbc, 0xe7, 0x92, 0x53, 0x6a, 0xbe, 0x80, 0x19, 0x10, 0xd0,
	0xca, 0x71, 0x4e, 0x22, 0xba, 0xa7, 0x7f, 0x33, 0xd3, 0xd3, 0xdd, 0xd3, 0xbf, 0x11, 0x2c, 0x38,
	0x83, 0xf0, 0x94, 0xe0, 0xe0, 0xdc, 0x6d, 0xe3, 0x75, 0x3f, 0xf0, 0x42, 0x0f, 0x4d, 0xb0, 0x3f,
	0x95, 0xa5, 0x13, 0xef, 0xc4, 0x63, 0x3f, 0x37, 0xe8, 0x2f, 0xae, 0xac, 0xdc, 0x3a, 0xf1, 0xbc,
	0x93, 0x2e, 0xde, 0x60, 0x5f, 0xc7, 0x83, 0xd7, 0x1b, 0xb8, 0xe7, 0x87, 0x17, 0x42, 0x69, 0xa6,
	0x95, 0xa1, 0xdb, 0xc3, 0x24, 0x74, 0x7a, 0xbe, 0x18, 0xf0, 0xf8, 0xc4, 0x0d, 0x4f, 0x07, 0xc7,
	0xeb, 0x6d, 0xaf, 0xb7, 0x71, 0x12, 0x38, 0xe7, 0x6e, 0xe8, 0x84, 0xae, 0xd7, 0x77, 0xba, 0x1b,
	0x21, 0xee, 0x62, 0xdf, 0x0b, 0xc2, 0x8d, 0xae, 0x7b, 0xbc, 0x21, 0xd6, 0x43, 0x36, 0xc2, 0x0b,
	0x1f, 0x13, 0x61, 0xfb, 0xe8, 0x6a, 0xb6, 0xf8, 0x1c, 0xf7, 0x43, 0x22, 0xfe, 0x08, 0xd3, 0x2f,
	0xaf, 0x66, 0xfa, 0x26, 0x70, 0x7c, 0x1f, 0x07, 0x24, 0xfe, 0xc1, 0xcd, 0xad, 0x7f, 0x02, 0x4c,
	0xec, 0x52, 0x3c, 0xf4, 0x10, 0xc6, 0x1b, 0x17, 0x3e, 0x36, 0x0a, 0x77, 0x0a, 0xf7, 0xe6, 0xab,
	0x65, 0xae, 0x5f, 0x7f, 0xe1, 0xe3, 0x80, 0x01, 0xd6, 0xd0, 0x30, 0x32, 0xe7, 0xe9, 0xa2, 0xef,
	0x7b, 0x3d, 0x37, 0x64, 0xae, 0xb1, 0x99, 0x05, 0xfa, 0x1a, 0xe6, 0x6d, 0x4c, 0xbc, 0x41, 0xd0,
	0xc6, 0xfb, 0xd8, 0xe9, 0xe0, 0xc0, 0x18, 0xbb, 0x53, 0xb8, 0x37, 0x53, 0x35, 0xd6, 0xe5, 0x66,
	0xd7, 0x75, 0x7d, 0x6d, 0x79, 0x18, 0x99, 0x28, 0x10, 0xb2, 0x04, 0x6f, 0xff, 0x9a, 0x9d, 0x42,
	0x42, 0x2d, 0x98, 0xdb, 0xc6, 0x41, 0xb8, 0x35, 0x08, 0x4f, 0xbd, 0xc0, 0x0d, 0x2f, 0x8c, 0x22,
	0x83, 0xbe, 0x99, 0x40, 0x6b, 0xea, 0x66, 0xb5, 0xb6, 0x3a, 0x8c, 0x4c, 0xa3, 0x8d, 0x83, 0xb0,
	0xe5, 0x48, 0xa9, 0x36, 0x83, 0x8e, 0x87, 0x7e, 0x02, 0xb3, 0x75, 0xea, 0xb2, 0x76, 0xc3, 0x3b,
	0xc3, 0x7d, 0x62, 0x8c, 0xa7, 0x97, 0xae, 0x6a, 0x9b, 0xd5, 0xda, 0xad, 0x61, 0x64, 0xae, 0x10,
	0x26, 0x6b, 0x85, 0x4c, 0xa8, 0xa1, 0x6b, 0x60, 0xa8, 0x0d, 0xf3, 0x47, 0x81, 0x77, 0xee, 0x12,
	0xd7, 0xeb, 0x33, 0x91, 0x31, 0xc1, 0xe0, 0x2b, 0x09, 0xbc, 0xae, 0x6f, 0x56, 0x6b, 0xb7, 0x87,
	0x91, 0x79, 0xd3, 0x97, 0x52, 0x3e, 0x87, 0xee, 0x22, 0xdd, 0x04, 0xbd, 0x82, 0x99, 0xed, 0xee,
	0x80, 0x84, 0x38, 0x78, 0xee, 0xf4, 0xb0, 0x31, 0xc9, 0x66, 0x58, 0x51, 0x1c, 0x94, 0x28, 0x9b,
	0xd5, 0x5a, 0x65, 0x18, 0x99, 0xcb, 0x6d, 0x2e, 0x6a, 0xf5, 0x9d, 0x9e, 0xee, 0x7e, 0x15, 0x89,
	0xf9, 0x9e, 0x7f, 0x6e, 0x7b, 0xfd, 0xd7, 0xee, 0x89, 0x31, 0x35, 0xe2, 0x7b, 0x55, 0xdd, 0xdc,
	0x14, 0xbe, 0x17, 0xe0, 0x6d, 0x26, 0x4d, 0xf9, 0x5e, 0x35, 0x40, 0x8f, 0x61, 0xfc, 0x25, 0xc1,
	0x81, 0x31, 0xcd, 0x70, 0xcb, 0x09, 0x2e, 0x95, 0x36, 0xab, 0x3c, 0xe4, 0x06, 0x04, 0x07, 0x1a,
	0x08, 0xb3, 0xa1, 0xb6, 0xb6, 0xd7, 0xc5, 0x46, 0x29, 0x6d, 0x4b, 0xa5, 0xcd, 0x4d, 0x6e, 0x1b,
	0x78, 0x5d, 0x7d, 0x7f, 0xcc, 0x06, 0x1d, 0x42, 0x89, 0x6e, 0x90, 0xf8, 0x4e, 0x1b, 0x1b, 0xc0,
	0x00, 0x16, 0x13, 0x80, 0x58, 0x55, 0x5b, 0x19, 0x46, 0xe6, 0x62, 0x5f, 0x7e, 0x6a, 0x40, 0x09,
	0x00, 0xaa, 0xc1, 0x64, 0x1d, 0x07, 0xe7, 0x38, 0x30, 0x66, 0x18, 0x14, 0x52, 0x62, 0x87, 0xc9,
	0x9b, 0xd5, 0xda, 0xd2, 0x30, 0x32, 0xcb, 0x84, 0x7d, 0x69, 0x30, 0xc2, 0x92, 0xba, 0xda, 0xc6,
	0xe7, 0x38, 0x20, 0xb8, 0x31, 0xe8, 0xf7, 0x71, 0xd7, 0x98, 0x4d, 0xbb, 0x5a, 0x53, 0xcb, 0x30,
	0x0f, 0xb8, 0xb0, 0x15, 0x32, 0xa9, 0xee, 0x6a, 0xcd, 0x00, 0x9d, 0x41, 0x99, 0xff, 0xda, 0xf6,
	0xfa, 0x7d, 0xdc, 0xa6, 0x19, 0x6d, 0xcc, 0xb1, 0x39, 0x56, 0x93, 0x39, 0xd2, 0x23, 0x9a, 0xd5,
	0x9a, 0x39, 0x8c, 0xcc, 0x5b, 0x1c, 0x9e, 0x1e, 0xa8, 0x50, 0x68, 0x33, 0x8d, 0x00, 0xd3, 0xdd,
	0x6c, 0xb5, 0xdb, 0x98, 0x10, 0x1b, 0x7f, 0x33, 0xc0, 0x24, 0x34, 0xe6, 0xd3, 0xbb, 0xd1, 0xd4,
	0x32, 0x70, 0x1c, 0x26, 0x6c, 0x05, 0x5c, 0xaa, 0xef, 0x46, 0x33, 0x40, 0x75, 0x80, 0x2d, 0xdf,
	0xaf, 0x63, 0x42, 0xb3, 0xc0, 0xb8, 0xce, 0xd0, 0x97, 0x13, 0xf4, 0x57, 0xf8, 0x58, 0xe8, 0x9a,
	0xd5, 0xda, 0xcd, 0x61, 0x64, 0xde, 0x70, 0x7c, 0xbf, 0x45, 0xb8, 0x48, 0xc3, 0x55, 0x60, 0xf8,
	0x19, 0xf4, 0xbc, 0x10, 0x8b, 0x20, 0x35, 0xca, 0xa3, 0x67, 0xa0, 0xa8, 0xe5, 0xaa, 0x03, 0x26,
	0x6c, 0x89, 0xa8, 0x4f, 0x9f, 0x81, 0x62, 0x50, 0x03, 0x98, 0x96, 0xd5, 0xcd, 0xda, 0x87, 0x89,
	0x57, 0x4e, 0xd8, 0x3e, 0x45, 0x5f, 0xc1, 0xc4, 0x33, 0xb7, 0xdf, 0x21, 0x46, 0xe1, 0x4e, 0x91,
	0x05, 0x32, 0xaf, 0xbb, 0x4c, 0x49, 0x15, 0xb5, 0x95, 0x6f, 0x23, 0xf3, 0xda, 0x30, 0x32, 0xaf,
	0x9f, 0xd1, 0x61, 0x4a, 0xf1, 0xe5, 0x76, 0xd6, 0x2f, 0xc7, 0xa0, 0x14, 0x8f, 0x46, 0xab, 0x30,
	0x4e, 0xff, 0xb2, 0x2a, 0x5e, 0xaa, 0x4d, 0x0f, 0x23, 0x73, 0x9c, 0xda, 0xd9, 0x4c, 0x8a, 0xaa,
	0x30, 0x73, 0xe8, 0x39, 0x9d, 0x3a, 0x6e, 0x07, 0x38, 0x24, 0xac, 0x4c, 0x4f, 0xd7, 0xca, 0xc3,
	0xc8, 0x9c, 0xed, 0x7a, 0x4e, 0xa7, 0x45, 0xb8, 0xdc, 0x56, 0x07, 0x51, 0x44, 0x56, 0x57, 0x8a,
	0x09, 0x22, 0x4d, 0x09, 0x9b, 0x49, 0xd1, 0x53, 0x98, 0x7c, 0xe2, 0x76, 0xa9, 0xb7, 0xc6, 0xd9,
	0xfa, 0x57, 0xd3, 0xeb, 0x5f, 0xe7, 0xea, 0xdd, 0x7e, 0x18, 0x5c, 0xf0, 0x34, 0x78, 0xcd, 0x04,
	0xca, 0x46, 0x04, 0x42, 0xe5, 0x11, 0xcc, 0x28, 0x83, 0x51, 0x19, 0x8a, 0x67, 0xf8, 0x82, 0xef,
	0xc4, 0xa6, 0x3f, 0xd1, 0x12, 0x4c, 0x9c, 0x3b, 0xdd, 0x01, 0x66, 0x0b, 0x2f, 0xd9, 0xfc, 0xe3,
	0xf1, 0xd8, 0xc3, 0x82, 0xf5, 0x43, 0x98, 0xa0, 0x65, 0x9d, 0xa0, 0xbb, 0x50, 0xac, 0xd7, 0xf7,
	0x99, 0xd1, 0x6c, 0x6d, 0x61, 0x18, 0x99, 0x73, 0x84, 0x9c, 0x2a, 0x73, 0x51, 0x2d, 0x1d, 0xd4,
	0x38, 0xac, 0x33, 0x14, 0x31, 0x28, 0xec, 0xaa, 0x9e, 0xa5, 0x5a, 0xeb, 0x8f, 0x45, 0x28, 0xd3,
	0x4a, 0xc3, 0x70, 0x65, 0xe0, 0xdd, 0x87, 0xd2, 0xd1, 0xe0, 0xb8, 0xeb, 0xb6, 0x9f, 0x89, 0x95,
	0xcd, 0xd6, 0xe6, 0x87, 0x91, 0x09, 0x3e, 0x13, 0xb6, 0xce, 0xf0, 0x85, 0x9d, 0x0c, 0x40, 0xf7,
	0x60, 0x9a, 0x22, 0x50, 0x77, 0xf1, 0x25, 0xd7, 0x66, 0x87, 0x91, 0x39, 0x3d, 0x10, 0x32, 0x3b,
	0xd6, 0xa2, 0x3a, 0x4c, 0xed, 0xfe, 0xcc, 0x77, 0x03, 0x4c, 0xc4, 0x05, 0x57, 0x59, 0xe7, 0xfd,
	0xc6, 0xba, 0xec, 0x37, 0xd6, 0x1b, 0xb2, 0xdf, 0xa8, 0xdd, 0x16, 0x11, 0xb1, 0x80, 0xb9, 0x49,
	0xb2, 0xf2, 0xdf, 0xfd, 0xd5, 0x2c, 0xd8, 0x12, 0x09, 0xdd, 0x87, 0xc9, 0x27, 0x5e, 0xd0, 0x73,
	0x42, 0x76, 0xa9, 0x95, 0x84, 0xf7, 0x99, 0x44, 0xf3, 0x3e, 0x93, 0xa0, 0x27, 0x30, 0x6f, 0x7b,
	0x83, 0x10, 0x37, 0x3c, 0x19, 0xff, 0x13, 0xcc, 0x6a, 0x6d, 0x18, 0x99, 0x95, 0x80, 0x6a, 0x5a,
	0xa1, 0x37, 0x1a, 0xe6, 0x76, 0xca, 0x0a, 0xed, 0xc2, 0xbc, 0x96, 0xac, 0xc4, 0x98, 0xbc, 0x53,
	0xbc, 0x57, 0xe2, 0xf7, 0x9a, 0x9e, 0xe2, 0xaa, 0xcf, 0x53, 0x46, 0xe8, 0x39, 0x2c, 0x3c, 0x1b,
	0x1c, 0xe3, 0xa0, 0x8f, 0x43, 0x4c, 0xe4, 0x8a, 0xa6, 0xd8, 0x8a, 0xee, 0x0c, 0x23, 0x73, 0xf5,
	0x2c, 0x56, 0x66, 0xac, 0x69, 0xd4, 0xd4, 0xea, 0xc2, 0xfc, 0x1e, 0x0e, 0xa9, 0xc3, 0xe5, 0x59,
	0xca, 0xc0, 0x2e, 0x64, 0x06, 0xf6, 0xff, 0xc3, 0xcc, 0x2b, 0x37, 0x3c, 0xd5, 0x53, 0x85, 0x5d,
	0x9e, 0x6f, 0xdc, 0xf0, 0x54, 0xa6, 0x8a, 0x32, 0xa7, 0x3a, 0xdc, 0xda, 0x85, 0xeb, 0x62, 0xb6,
	0x38, 0x74, 0xaa, 0x3a, 0x60, 0x21, 0xc9, 0x3d, 0x15, 0x50, 0x87, 0x39, 0x4d, 0xfb, 0x12, 0x35,
	0x47, 0xbc, 0xcb, 0xeb, 0xc6, 0x25, 0xb5, 0x75, 0x91, 0x16, 0x8f, 0x94, 0xe3, 0xd3, 0xee, 0xb6,
	0x7e, 0x04, 0x73, 0x47, 0xdd, 0xc1, 0x89, 0xdb, 0xdf, 0x71, 0x42, 0xa7, 0x8e, 0xbf, 0x41, 0x7b,
	0x00, 0x89, 0x40, 0x4c, 0xa2, 0x94, 0xd8, 0x44, 0xd7, 0xdc, 0xac, 0x5d, 0x1f, 0x46, 0xe6, 0x8c,
	0xcf, 0x24, 0xad, 0x8e, 0x13, 0x3a, 0xb6, 0x62, 0x6a, 0xfd, 0xa6, 0x08, 0x48, 0x4c, 0x43, 0x7b,
	0x23, 0x5c, 0xc7, 0x21, 0x0d, 0x93, 0x65, 0x18, 0x3b, 0xd8, 0x11, 0xbe, 0x9f, 0x1c, 0x46, 0xe6,
	0x98, 0xdb, 0xb1, 0xc7, 0x0e, 0x76, 0xd0, 0xe7, 0x30, 0xc1, 0x86, 0x31, 0x8f, 0xcf, 0xab, 0x53,
	0xaa, 0x20, 0xb5, 0xd2, 0x30, 0x32, 0x27, 0x68, 0x1b, 0x86, 0x6d, 0x3e, 0x1e, 0x7d, 0x06, 0xa5,
	0x1d, 0xdc, 0xc5, 0x27, 0x4e, 0xe8, 0x05, 0xa2, 0x58, 0xb1, 0xfb, 0xbb, 0x23, 0x85, 0xca, 0x59,
	0x25, 0x23, 0x69, 0x92, 0xd8, 0xd8, 0x21, 0x5e, 0x5f, 0x4d, 0x92, 0x80, 0x49, 0xd4, 0x24, 0xe1,
	0x63, 0xd0, 0x6f, 0x0b, 0x30, 0xb3, 0xd5, 0xef, 0x7b, 0xbc, 0xc9, 0x26, 0xa2, 0x9d, 0xbb, 0xb1,
	0x1e, 0x77, 0xd5, 0x87, 0xce, 0x31, 0xee, 0x36, 0x69, 0x5d, 0x22, 0xb5, 0x26, 0xcd, 0xd3, 0xbf,
	0x44, 0xe6, 0x67, 0xef, 0xd6, 0xa2, 0xaf, 0x37, 0x02, 0xc7, 0x0d, 0x09, 0xbb, 0xb6, 0x92, 0xa9,
	0xd4, 0x48, 0x53, 0x56, 0x80, 0xfe, 0x07, 0x26, 0x68, 0x4f, 0x23, 0xb3, 0x8c, 0x1d, 0x36, 0x6d,
	0x7b, 0xb4, 0x9b, 0x82, 0x8d, 0xb0, 0xee, 0x42, 0x49, 0xf8, 0xf0, 0x60, 0x27, 0xcf, 0xff, 0xd6,
	0x0f, 0xe0, 0x23, 0xdb, 0x63, 0x7e, 0xc5, 0x04, 0x87, 0x47, 0x0e, 0x21, 0x6f, 0xbc, 0xa0, 0xc3,
	0x3a, 0x4d, 0x11, 0x95, 0x32, 0xa0, 0xef, 0xc2, 0x14, 0x13, 0xc7, 0x30, 0xec, 0x4c, 0x58, 0xbf,
	0x6a, 0x4b, 0x8d, 0xb5, 0x0d, 0xab, 0x7b, 0x38, 0x1c, 0xc5, 0x7a, 0x27, 0x90, 0x5f, 0x15, 0xc0,
	0xdc, 0x0e, 0x70, 0xe6, 0xa2, 0xae, 0x96, 0xcd, 0xab, 0x82, 0xdc, 0x8c, 0x25, 0x5a, 0x4a, 0x65,
	0x04, 0x81, 0xf9, 0x10, 0x8a, 0x8d, 0xc6, 0x21, 0x0b, 0x9a, 0x22, 0xf3, 0x60, 0x31, 0x0c, 0xbb,
	0xff, 0x8a, 0xcc, 0xe9, 0x9d, 0x01, 0x27, 0x3f, 0x36, 0xd5, 0x5b, 0x73, 0x30, 0x73, 0xe4, 0xf6,
	0x4f, 0xc4, 0x8c, 0xd6, 0xcf, 0x61, 0x96, 0x7f, 0x12, 0xdf, 0xeb, 0x13, 0x4c, 0x13, 0x5c, 0xed,
	0xc3, 0xf9, 0x42, 0x58, 0x82, 0xab, 0xed, 0xb6, 0xde, 0x62, 0x3f, 0x84, 0x39, 0xd1, 0x23, 0xe2,
	0x80, 0xf5, 0x32, 0x7c, 0x81, 0xac, 0x79, 0xe5, 0xed, 0x62, 0xeb, 0x9c, 0x6b, 0x6c, 0x7d, 0xa0,
	0xf5, 0x7f, 0xb0, 0x40, 0x83, 0x38, 0xc4, 0x57, 0x2e, 0x69, 0x56, 0x1d, 0xa0, 0x8e, 0x7b, 0x8e,
	0x7f, 0xea, 0xd1, 0xdb, 0x61, 0x57, 0xfd, 0x12, 0x09, 0x7e, 0x43, 0x6d, 0x5d, 0x85, 0xae, 0xb9,
	0xc9, 0xaf, 0x38, 0x12, 0x0f, 0xb6, 0x15, 0x43, 0xeb, 0x4f, 0x63, 0x80, 0xb6, 0x06, 0x1d, 0x37,
	0xac, 0x87, 0x01, 0x76, 0x7a, 0x72, 0x25, 0x8f, 0x60, 0x96, 0x9f, 0x18, 0x17, 0xb3, 0x15, 0xd1,
	0x2e, 0x9b, 0x77, 0x07, 0xaa, 0x8a, 0x92, 0x26, 0xf5, 0x9b, 0x9a, 0xda, 0x98, 0x0c, 0x7a, 0xd2,
	0x74, 0x4c, 0x33, 0x55, 0x55, 0xd4, 0x54, 0xfd, 0x46, 0x5f, 0xc1, 0xfc, 0xb6, 0xd7, 0xf3, 0xa9,
	0x5b, 0x84, 0x71, 0x51, 0x24, 0xa8, 0x98, 0x57, 0x53, 0x52, 0x2e, 0xa5, 0x4b, 0xd0, 0x73, 0x58,
	0x7c, 0xd2, 0x1d, 0x90, 0xd3, 0xad, 0x7e, 0x67, 0xbb, 0xeb, 0x11, 0x89, 0x32, 0x2e, 0xee, 0x64,
	0x8e, 0x92, 0x31, 0x62, 0xff, 0x9a, 0x9d, 0x65, 0x88, 0x3e, 0x14, 0xec, 0x5a, 0x14, 0x8a, 0xb9,
	0x75, 0xc1, 0xdd, 0x5f, 0xf4, 0xf1, 0x8b, 0xd7, 0xfb, 0xd7, 0x6c, 0xae, 0xad, 0x95, 0x60, 0x4a,
	0x46, 0xd5, 0x06, 0x2c, 0x28, 0xee, 0xa4, 0xa5, 0x6d, 0x40, 0x50, 0x05, 0xa6, 0x5f, 0xfa, 0xb4,
	0x45, 0x93, 0x69, 0x62, 0xc7, 0xdf, 0xd6, 0x7d, 0xdd, 0xd3, 0x68, 0x15, 0x4a, 0xa2, 0xa3, 0x8d,
	0x07, 0x27, 0x02, 0x6b, 0x5f, 0x77, 0xee, 0xe5, 0xa3, 0xb5, 0x79, 0xc7, 0x52, 0xf3, 0x96, 0xd3,
	0xbe, 0xb6, 0x6e, 0x64, 0x3a, 0xcf, 0xfa, 0x45, 0x01, 0x96, 0xf6, 0x70, 0xc8, 0x3a, 0x6d, 0x1a,
	0xc1, 0x71, 0x01, 0xf9, 0x44, 0xa5, 0x61, 0x3c, 0x64, 0xe7, 0x86, 0x91, 0x59, 0x8a, 0x19, 0x97,
	0xca, 0xb2, 0xbe, 0x80, 0xf9, 0xfa, 0x99, 0xeb, 0x37, 0x9d, 0xae, 0xdb, 0x61, 0x39, 0x29, 0xae,
	0x64, 0x56, 0xf0, 0xc8, 0x99, 0xeb, 0xb7, 0xce, 0x63, 0x95, 0x9d, 0x1a, 0x6a, 0xd9, 0x70, 0x23,
	0xb5, 0x02, 0x91, 0xb3, 0x8f, 0x60, 0x4a, 0x88, 0x44, 0x06, 0x64, 0x91, 0xb7, 0x99, 0x61, 0x64,
	0x4e, 0x11, 0x61, 0x29, 0xc7, 0x5b, 0x47, 0xb0, 0xfc, 0xd2, 0x27, 0x38, 0x48, 0x60, 0xe5, 0xbe,
	0x1e, 0xc4, 0x84, 0xb0, 0x90, 0x4b, 0x08, 0x61, 0x18, 0x99, 0x93, 0x1c, 0x53, 0x92, 0x40, 0xab,
	0x0d, 0xcb, 0x3c, 0xa5, 0x47, 0x10, 0xdf, 0xc9, 0x53, 0xb2, 0x08, 0x8c, 0x65, 0x16, 0x81, 0x03,
	0xa8, 0x88, 0x49, 0xba, 0xdd, 0xf7, 0x3b, 0x12, 0xeb, 0x0f, 0x05, 0x58, 0xd9, 0xc3, 0x7d, 0x1c,
	0x38, 0x6c, 0xc9, 0x5a, 0x39, 0x56, 0x5b, 0xdf, 0xc2, 0xa5, 0xad, 0xaf, 0x29, 0x2f, 0xb0, 0x31,
	0x76, 0x81, 0xb1, 0xfa, 0xcf, 0x2e, 0x30, 0x71, 0x6d, 0xa1, 0x9b, 0x50, 0x7c, 0x69, 0x1f, 0x88,
	0x2b, 0x7d, 0x8a, 0x56, 0xe7, 0x41, 0xe0, 0xda, 0x54, 0x86, 0x0e, 0x92, 0xb6, 0x79, 0xfc, 0x3b,
	0xdb, 0xe6, 0x45, 0xd1, 0x36, 0x4f, 0x89, 0xb6, 0x59, 0x6b, 0x96, 0xad, 0x2f, 0xc0, 0x18, 0xdd,
	0x8b, 0x88, 0x12, 0x13, 0x26, 0xf8, 0xeb, 0xcd, 0xc8, 0x15, 0xc5, 0xe5, 0xd6, 0x4e, 0x12, 0xe1,
	0x2c, 0x75, 0x14, 0xba, 0x90, 0xca, 0x2e, 0x59, 0x4b, 0x99, 0xb0, 0xe5, 0x76, 0xd4, 0xdc, 0x6c,
	0x26, 0x51, 0x2a, 0x50, 0xc4, 0xfc, 0x5f, 0xd2, 0x28, 0xe5, 0x5c, 0xb7, 0x70, 0x29, 0xd7, 0x15,
	0x91, 0xca, 0xad, 0xa5, 0x8d, 0xf5, 0x35, 0x2c, 0x6b, 0xb8, 0x49, 0xf8, 0x7f, 0x1f, 0xa6, 0xa5,
	0x6c, 0xb4, 0xc5, 0xd3, 0x90, 0xd9, 0xe9, 0x11, 0x69, 0x1f, 0x5b, 0x59, 0x6f, 0x0b, 0xb0, 0xc2,
	0xcb, 0xcf, 0xe8, 0xee, 0xaf, 0x1e, 0x03, 0x0f, 0x61, 0xee, 0xc8, 0x09, 0x70, 0x3f, 0x94, 0xdb,
	0x54, 0xae, 0x41, 0x9f, 0x29, 0x24, 0x7b, 0xb7, 0xf5, 0x81, 0x68, 0x03, 0x80, 0xf3, 0xad, 0xad,
	0x4e, 0x47, 0xb6, 0x7d, 0xbc, 0x1d, 0xe5, 0x8c, 0xcc, 0xe9, 0x74, 0x02, 0x5b, 0x19, 0x92, 0xbe,
	0xa5, 0xc7, 0xaf, 0x70, 0x4b, 0x5b, 0x3f, 0x06, 0x63, 0x74, 0x8f, 0xff, 0x9d, 0xb3, 0xd9, 0x83,
	0x15, 0x25, 0xe7, 0xdf, 0x23, 0x78, 0x0c, 0x76, 0xc8, 0x94, 0xf7, 0xd4, 0xc5, 0xf4, 0xf2, 0x46,
	0x69, 0xd0, 0x2c, 0x4d, 0x69, 0xde, 0xbf, 0xfc, 0xd9, 0x60, 0xf0, 0xf2, 0xa7, 0x00, 0xbf, 0x6f,
	0x01, 0x7c, 0x08, 0x06, 0x77, 0x46, 0x06, 0xe6, 0xe5, 0x55, 0x6d, 0x0d, 0x56, 0xe3, 0xaa, 0x96,
	0xe1, 0x83, 0x8f, 0x3f, 0x86, 0x52, 0xfc, 0x92, 0x8d, 0xa6, 0x61, 0xfc, 0xe0, 0xf9, 0x41, 0xa3,
	0x7c, 0x0d, 0x4d, 0x41, 0xf1, 0xe8, 0x65, 0xa3, 0x5c, 0x40, 0x00, 0x93, 0x3b, 0xbb, 0x87, 0xbb,
	0x8d, 0xdd, 0xf2, 0x58, 0xf5, 0xd7, 0x06, 0xcc, 0x6c, 0x0d, 0x28, 0x09, 0x63, 0x18, 0xb4, 0xa9,
	0xa8, 0xe3, 0x7e, 0xe7, 0x19, 0xc6, 0xfe, 0x56, 0xd7, 0x3d, 0xc7, 0x04, 0x29, 0x8f, 0x85, 0xb1,
	0xb4, 0xb2, 0x3c, 0x52, 0x7a, 0x76, 0x69, 0xf3, 0x7d, 0xaf, 0x80, 0x3e, 0x81, 0x19, 0xf6, 0x1c,
	0xc2, 0xee, 0x7a, 0x82, 0x66, 0xd5, 0x27, 0x92, 0x8a, 0xfc, 0x62, 0xca, 0x4f, 0x0b, 0xe8, 0x33,
	0x00, 0xee, 0xd7, 0xe7, 0x5e, 0x07, 0xa3, 0x0c, 0xcf, 0x55, 0xb2, 0x66, 0x47, 0x8f, 0x61, 0x41,
	0x96, 0xaf, 0xf8, 0xd1, 0x02, 0xad, 0x08, 0xec, 0xf4, 0x33, 0x46, 0x3c, 0x29, 0x1f, 0x56, 0x85,
	0x29, 0x41, 0x56, 0x91, 0x6c, 0x94, 0x74, 0xaa, 0x5c, 0x19, 0x79, 0x9a, 0x45, 0x0f, 0x60, 0x5a,
	0x12, 0x5c, 0xb4, 0xac, 0x1b, 0x91, 0x5c, 0xab, 0x4f, 0x0b, 0xe8, 0x80, 0xae, 0x33, 0x4c, 0x91,
	0xda, 0xdb, 0x39, 0xe4, 0x55, 0xbc, 0x0b, 0xc9, 0x45, 0xa5, 0xac, 0xf6, 0x61, 0x51, 0x64, 0xa5,
	0xf6, 0x36, 0x98, 0xcf, 0x84, 0xf3, 0x8e, 0x08, 0x7d, 0x05, 0x8b, 0x22, 0x7a, 0x34, 0xa4, 0x72,
	0xdc, 0x72, 0x0a, 0xd2, 0x94, 0x0b, 0xf0, 0x14, 0x6e, 0xd4, 0x53, 0xbb, 0xe2, 0xa4, 0xf4, 0xa6,
	0x0e, 0xa1, 0x10, 0xe0, 0x5c, 0xac, 0xaf, 0xf9, 0x2d, 0xc0, 0xb0, 0xb6, 0x1d, 0xdf, 0x39, 0x76,
	0xbb, 0x6e, 0xe8, 0x62, 0x82, 0xee, 0xa6, 0x37, 0xa6, 0x6a, 0xa5, 0xcf, 0x57, 0x2f, 0x1b, 0x84,
	0xb6, 0x60, 0x6e, 0x0f, 0x87, 0x09, 0x39, 0x47, 0x95, 0x2c, 0x46, 0x2f, 0xdc, 0xbe, 0x24, 0xd6,
	0xae, 0xbf, 0x0b, 0x1c, 0x42, 0xf9, 0xa5, 0xdf, 0x71, 0x42, 0xac, 0xa0, 0xdc, 0xc9, 0x42, 0x11,
	0xa3, 0x9c, 0xc0, 0xe9, 0x91, 0xdc, 0xcd, 0x6e, 0xc0, 0x38, 0xe5, 0x50, 0x08, 0xc9, 0xb9, 0x12,
	0x7e, 0x55, 0x59, 0xd4, 0x64, 0xa2, 0x62, 0xbd, 0x01, 0xf3, 0x3b, 0xe8, 0x29, 0xfa, 0x5f, 0xe9,
	0xf3, 0x2b, 0xd1, 0xd8, 0xca, 0x87, 0xda, 0x7f, 0xa9, 0xb2, 0xc7, 0x36, 0x37, 0xd1, 0x4f, 0xd9,
	0xb1, 0x8c, 0x8e, 0x40, 0x77, 0x93, 0xe8, 0xcf, 0x65, 0xa7, 0x95, 0xb5, 0xcb, 0x26, 0x69, 0x6e,
	0xa2, 0x63, 0x79, 0xc3, 0x64, 0x4c, 0xf0, 0x91, 0x46, 0x9a, 0xfe, 0xf3, 0x39, 0x1e, 0x00, 0x70,
	0x08, 0x96, 0xe9, 0x23, 0xc9, 0x99, 0x7b, 0x46, 0x0f, 0x68, 0x45, 0xea, 0xbc, 0xbb, 0xdd, 0xf7,
	0x00, 0x12, 0x86, 0x8a, 0x0c, 0xb1, 0x8b, 0x11, 0xd2, 0x9a, 0x6b, 0xff, 0x02, 0xca, 0x5b, 0xed,
	0x6f, 0x06, 0x6e, 0x80, 0x63, 0xba, 0x89, 0x3e, 0x50, 0xc3, 0x5b, 0xd7, 0x49, 0x38, 0x23, 0x83,
	0xc3, 0x1e, 0x62, 0x87, 0x60, 0xf4, 0x0c, 0x56, 0xe2, 0x82, 0x99, 0x52, 0xe5, 0x1a, 0xe5, 0xae,
	0x6e, 0x1f, 0x96, 0xb6, 0x9d, 0x7e, 0x1b, 0x77, 0xdf, 0x1b, 0xe9, 0x4b, 0x96, 0x94, 0x0a, 0x33,
	0xbf, 0x99, 0x01, 0x21, 0x72, 0x72, 0x41, 0x78, 0x51, 0x19, 0xbd, 0x03, 0xd7, 0xb9, 0x4f, 0x13,
	0x2f, 0x5d, 0x02, 0x90, 0xb7, 0x88, 0xcf, 0x61, 0x7e, 0xb7, 0xe7, 0x86, 0x8c, 0x7a, 0xf2, 0xff,
	0x07, 0xeb, 0x5c, 0xf5, 0x12, 0x3f, 0x2c, 0x88, 0x2a, 0x9c, 0xb0, 0xd6, 0xb8, 0xec, 0x8d, 0x3e,
	0x0c, 0x54, 0x96, 0x24, 0xac, 0x4a, 0x70, 0xef, 0x15, 0x3e, 0x2d, 0xa0, 0xa7, 0xcc, 0x0f, 0x09,
	0x27, 0x41, 0xb7, 0x92, 0xcc, 0x1a, 0x61, 0x2a, 0x95, 0xd5, 0x6c, 0xa5, 0x28, 0x13, 0xbb, 0x70,
	0x3d, 0x45, 0xce, 0xd0, 0x6d, 0x79, 0x19, 0x66, 0x92, 0xb6, 0xec, 0x5b, 0x75, 0x5f, 0xfa, 0x76,
	0x14, 0x26, 0x9b, 0xa9, 0xe5, 0xba, 0xe9, 0x28, 0xbe, 0x62, 0x54, 0xda, 0x85, 0x3e, 0xd0, 0xd1,
	0x32, 0x28, 0x59, 0x2e, 0x62, 0x1d, 0xca, 0x69, 0xc2, 0x82, 0xd6, 0x62, 0xa7, 0x64, 0xb2, 0xb2,
	0x8a, 0x99, 0xab, 0x17, 0x7e, 0x53, 0xce, 0x80, 0xf7, 0xd7, 0xe9, 0x33, 0x50, 0x3b, 0xd4, 0x91,
	0x33, 0xd0, 0x3b, 0xe3, 0x3d, 0xf6, 0xe2, 0xae, 0xd0, 0x0e, 0x94, 0xb3, 0x95, 0xca, 0xed, 0x2c,
	0x9c, 0xe4, 0x30, 0xeb, 0x50, 0x4e, 0xb7, 0xdf, 0xf1, 0x4e, 0x73, 0xb8, 0x47, 0xbc, 0xd3, 0xdc,
	0xbe, 0xfd, 0x29, 0x94, 0xd3, 0x8d, 0x77, 0x0c, 0x9a, 0xd3, 0x91, 0xe7, 0x1e, 0xc5, 0x13, 0x58,
	0xd2, 0x0f, 0xf0, 0x3b, 0xf6, 0x9b, 0x9f, 0x4b, 0x8b, 0xbc, 0xd2, 0x6a, 0xff, 0x37, 0x44, 0xf9,
	0xff, 0x81, 0xbc, 0x24, 0xdc, 0xae, 0xa7, 0x7a, 0x7e, 0xa4, 0x38, 0x39, 0xa3, 0x43, 0xae, 0xac,
	0xe5, 0xa9, 0x85, 0xbf, 0x0e, 0x61, 0x61, 0xa4, 0xdf, 0x47, 0xa6, 0x96, 0x53, 0xa3, 0x5d, 0x7b,
	0xee, 0xfa, 0x0e, 0xe5, 0xeb, 0x65, 0x16, 0x5a, 0x1e, 0x07, 0xc8, 0x45, 0x6b, 0xc0, 0x8d, 0xcc,
	0xee, 0x3f, 0xbe, 0x9b, 0x2f, 0xe3, 0x06, 0x79, 0xa8, 0xb5, 0xa5, 0x6f, 0xff, 0xbe, 0x56, 0xf8,
	0xf6, 0xed, 0x5a, 0xe1, 0xcf, 0x6f, 0xd7, 0x0a, 0x7f, 0x7b, 0xbb, 0x56, 0xf8, 0xfd, 0x3f, 0xd6,
	0xae, 0x1d, 0x4f, 0xb2, 0x51, 0x9b, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x76, 0xe2, 0x18, 0xec,
	0x5d, 0x24, 0x00, 0x00,
}
