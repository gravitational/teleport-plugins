syntax = "proto3";
package proto;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gravitational/teleport/api/types/types.proto";
import "github.com/gravitational/teleport/api/types/wrappers/wrappers.proto";
import "github.com/gravitational/teleport/api/types/events/events.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = true;

// Operation identifies type of operation
enum Operation {
    // INIT is sent as a first sentinel event
    // on the watch channel
    INIT = 0;
    // PUT identifies created or updated object
    PUT = 1;
    // DELETE identifies deleted object
    DELETE = 2;
}

// Event returns cluster event
message Event {
    // Operation identifies operation
    Operation Type = 1 [ (gogoproto.jsontag) = "type,omitempty" ];
    // Resource contains the updated resource
    oneof Resource {
        // ResourceHeader is specified in delete events,
        // the full object is not available, so resource
        // header is used to provide information about object type
        types.ResourceHeader ResourceHeader = 2 [ (gogoproto.jsontag) = "resource,omitempty" ];
        // CertAuthority is filled in certificate-authority related events
        types.CertAuthorityV2 CertAuthority = 3
            [ (gogoproto.jsontag) = "cert_authority,omitempty" ];
        // StaticTokens is filled in static-tokens related events
        types.StaticTokensV2 StaticTokens = 4 [ (gogoproto.jsontag) = "static_tokens,omitempty" ];
        // ProvisionToken is filled in provision-token related events
        types.ProvisionTokenV2 ProvisionToken = 5
            [ (gogoproto.jsontag) = "provision_token,omitempty" ];
        // ClusterNameV2 is a cluster name resource
        types.ClusterNameV2 ClusterName = 6 [ (gogoproto.jsontag) = "cluster_name,omitempty" ];
        // ClusterConfig is a cluster configuration resource
        types.ClusterConfigV3 ClusterConfig = 7
            [ (gogoproto.jsontag) = "cluster_config,omitempty" ];
        // User is a user resource
        types.UserV2 User = 8 [ (gogoproto.jsontag) = "user,omitempty" ];
        // Role is a role resource
        types.RoleV3 Role = 9 [ (gogoproto.jsontag) = "role,omitempty" ];
        // Namespace is a namespace resource
        types.Namespace Namespace = 10 [ (gogoproto.jsontag) = "namespace,omitempty" ];
        // Server is a node or proxy resource
        types.ServerV2 Server = 11 [ (gogoproto.jsontag) = "server,omitempty" ];
        // ReverseTunnel is a resource with reverse tunnel
        types.ReverseTunnelV2 ReverseTunnel = 12
            [ (gogoproto.jsontag) = "reverse_tunnel,omitempty" ];
        // TunnelConnection is a resource for tunnel connnections
        types.TunnelConnectionV2 TunnelConnection = 13
            [ (gogoproto.jsontag) = "tunnel_connection,omitempty" ];
        // AccessRequest is a resource for access requests
        types.AccessRequestV3 AccessRequest = 14
            [ (gogoproto.jsontag) = "access_request,omitempty" ];
        // AppSession is an application web session.
        types.WebSessionV2 AppSession = 15 [ (gogoproto.jsontag) = "app_session,omitempty" ];
        // RemoteCluster is a resource for remote clusters
        types.RemoteClusterV3 RemoteCluster = 16
            [ (gogoproto.jsontag) = "remote_cluster,omitempty" ];
        // DatabaseServer is a resource for database servers.
        types.DatabaseServerV3 DatabaseServer = 17
            [ (gogoproto.jsontag) = "database_server,omitempty" ];
        // WebSession is a regular web session.
        types.WebSessionV2 WebSession = 18 [ (gogoproto.jsontag) = "web_session,omitempty" ];
        // WebToken is a web token.
        types.WebTokenV3 WebToken = 19 [ (gogoproto.jsontag) = "web_token,omitempty" ];
        // ClusterNetworkingConfig is a resource for cluster networking configuration.
        types.ClusterNetworkingConfigV2 ClusterNetworkingConfig = 20
            [ (gogoproto.jsontag) = "cluster_networking_config,omitempty" ];
        // SessionRecordingConfigV2 is a resource for session recording configuration.
        types.SessionRecordingConfigV2 SessionRecordingConfig = 21
            [ (gogoproto.jsontag) = "session_recording_config,omitempty" ];
    }
}

// Watch specifies watch parameters
message Watch {
    // Kinds specifies object kinds to watch
    repeated WatchKind Kinds = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "kinds,omitempty" ];
}

// WatchKind specifies resource kind to watch
message WatchKind {
    // Kind is a resource kind to watch
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // LoadSecrets specifies whether to load secrets
    bool LoadSecrets = 2 [ (gogoproto.jsontag) = "load_secrets" ];
    // Name is an optional specific resource type to watch,
    // if specified only the events with a specific resource
    // name will be sent
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
    // Filter is an optional mapping of custom filter parameters.
    // Valid values vary by resource kind.
    map<string, string> Filter = 4 [ (gogoproto.jsontag) = "filter,omitempty" ];
    // SubKind is a resource subkind to watch
    string SubKind = 5 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
}

// Set of certificates corresponding to a single public key.
message Certs {
    // SSH X509 cert (PEM-encoded).
    bytes SSH = 1 [ (gogoproto.jsontag) = "ssh,omitempty" ];
    // TLS X509 cert (PEM-encoded).
    bytes TLS = 2 [ (gogoproto.jsontag) = "tls,omitempty" ];
}

// UserCertRequest specifies certificate-generation parameters
// for a user.
message UserCertsRequest {
    // PublicKey is a public key to be signed.
    bytes PublicKey = 1 [ (gogoproto.jsontag) = "public_key" ];
    // Username of key owner.
    string Username = 2 [ (gogoproto.jsontag) = "username" ];
    // Expires is a desired time of the expiry of the certificate, could
    // be adjusted based on the permissions
    google.protobuf.Timestamp Expires = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];
    // Format encodes the desired SSH Certificate format (either old ssh
    // compatibility
    // format to remove some metadata causing trouble with old SSH servers)
    // or standard SSH cert format with custom extensions
    string Format = 4 [ (gogoproto.jsontag) = "format,omitempty" ];
    // RouteToCluster is an optional cluster name to add to the certificate,
    // so that requests originating with this certificate will be redirected
    // to this cluster
    string RouteToCluster = 5 [ (gogoproto.jsontag) = "route_to_cluster,omitempty" ];
    // AccessRequests is an optional list of request IDs indicating requests whose
    // escalated privileges should be added to the certificate.
    repeated string AccessRequests = 6 [ (gogoproto.jsontag) = "access_requests,omitempty" ];
    // KubernetesCluster specifies the target kubernetes cluster for TLS
    // identities. This can be empty on older Teleport clients.
    string KubernetesCluster = 7 [ (gogoproto.jsontag) = "kubernetes_cluster,omitempty" ];
    // RouteToDatabase specifies the target database proxy name to encode into
    // certificate so database client requests are routed appropriately.
    RouteToDatabase RouteToDatabase = 8
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "route_to_database,omitempty" ];

    // NodeName is the name of the SSH node that this user certificate will be
    // scoped to.
    string NodeName = 9 [ (gogoproto.jsontag) = "node_name,omitempty" ];

    enum CertUsage {
        // All means a request for both SSH and TLS certificates for the
        // overall user session. These certificates are not specific to any SSH
        // node, Kubernetes cluster, database or web app.
        All = 0;
        // SSH means a request for an SSH certificate for access to a specific
        // SSH node, as specified by NodeName.
        SSH = 1;
        // Kubernetes means a request for a TLS certificate for access to a
        // specific Kubernetes cluster, as specified by KubernetesCluster.
        Kubernetes = 2;
        // Database means a request for a TLS certificate for access to a
        // specific database, as specified by RouteToDatabase.
        Database = 3;
        // App means a request for a TLS certificate for access to a specific
        // web app, as specified by RouteToApp.
        App = 4;
    }
    // CertUsage limits the resulting user certificate to a single protocol.
    CertUsage Usage = 10 [ (gogoproto.jsontag) = "usage,omitempty" ];

    // RouteToApp specifies application to issue certificate for.
    RouteToApp RouteToApp = 11
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "route_to_app,omitempty" ];
}

// RouteToDatabase combines parameters for database service routing information.
message RouteToDatabase {
    // ServiceName is the Teleport database proxy service name the cert is for.
    string ServiceName = 1 [ (gogoproto.jsontag) = "service_name" ];
    // Protocol is the type of the database the cert is for.
    string Protocol = 2 [ (gogoproto.jsontag) = "protocol" ];
    // Username is an optional database username to embed.
    string Username = 3 [ (gogoproto.jsontag) = "username,omitempty" ];
    // Database is an optional database name to embed.
    string Database = 4 [ (gogoproto.jsontag) = "database,omitempty" ];
}

// RouteToApp contains parameters for application access certificate requests.
message RouteToApp {
    // Name is the application name certificate is being requested for.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // SessionID is the ID of the application session.
    string SessionID = 2 [ (gogoproto.jsontag) = "session_id" ];
    // PublicAddr is the application public address.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr" ];
    // ClusterName is the cluster where the application resides.
    string ClusterName = 4 [ (gogoproto.jsontag) = "cluster_name" ];
}

// GetUserRequest specifies parameters for the GetUser method.
message GetUserRequest {
    // Name is the name of the desired user.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 2 [ (gogoproto.jsontag) = "with_secrets,omitempty" ];
}

// GetUsersRequest specifies parameters for the GetUsers method.
message GetUsersRequest {
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 1 [ (gogoproto.jsontag) = "with_secrets" ];
}

// AccessRequests is a collection of AccessRequest values.
message AccessRequests {
    repeated types.AccessRequestV3 AccessRequests = 1 [ (gogoproto.jsontag) = "access_requests" ];
}

// PluginDataSeq is a sequence of plugin data.
message PluginDataSeq {
    repeated types.PluginDataV3 PluginData = 1 [ (gogoproto.jsontag) = "plugin_data" ];
}

// RequestStateSetter encodes the paramters necessary to update the
// state of a privilege escalation request.
message RequestStateSetter {
    // ID is the request ID being targeted
    string ID = 1 [ (gogoproto.jsontag) = "id" ];
    // State is the desired state to be set
    types.RequestState State = 2 [ (gogoproto.jsontag) = "state" ];
    // Delegator is an optional indicator of who delegated this
    // state update (used by plugins to indicate which user approved
    // or denied the request).
    string Delegator = 3 [ (gogoproto.jsontag) = "delegator,omitempty" ];
    // Reason is an optional message indicating the reason for the
    // resolution (approval, denail , etc...).
    string Reason = 4 [ (gogoproto.jsontag) = "reason,omitempty" ];
    // Annotations are key/value pairs received from plugins during request
    // resolution.  They are currently only used to provide additional logging
    // information.
    wrappers.LabelValues Annotations = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];
    // Roles, if present, overrides the existing set of roles associated
    // with the access request.
    repeated string Roles = 6 [ (gogoproto.jsontag) = "roles,omitempty" ];
}

// RequestID is the unique identifier of an access request.
message RequestID { string ID = 1 [ (gogoproto.jsontag) = "id" ]; }

// RotateResetPasswordTokenSecretsRequest is a request to rotate token secrets.
message RotateResetPasswordTokenSecretsRequest {
    string TokenID = 1 [ (gogoproto.jsontag) = "token" ];
}

// GetResetPasswordTokenRequest is a request to get a reset password token.
message GetResetPasswordTokenRequest { string TokenID = 1 [ (gogoproto.jsontag) = "token" ]; }

// CreateResetPasswordTokenRequest is a request to create an instance of
// ResetPasswordToken
message CreateResetPasswordTokenRequest {
    // Name is the user name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Type is a token type.
    string Type = 2 [ (gogoproto.jsontag) = "type" ];
    // TTL specifies how long the generated token is valid for.
    int64 TTL = 3 [ (gogoproto.jsontag) = "ttl", (gogoproto.casttype) = "Duration" ];
}

// PingRequest is the input value for the Ping method.
message PingRequest {
    // Ping method currently takes no parameters
}

// PingResponse contains data about the teleport auth server.
message PingResponse {
    // ClusterName is the name of the teleport cluster.
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
    // ServerVersion is the version of the auth server.
    string ServerVersion = 2 [ (gogoproto.jsontag) = "server_version" ];
    // ServerFeatures are the features supported by the auth server.
    Features ServerFeatures = 3 [ (gogoproto.jsontag) = "server_features" ];
    // ProxyPublicAddr is the server's public proxy address.
    string ProxyPublicAddr = 4 [ (gogoproto.jsontag) = "proxy_public_addr" ];
}

// Features are auth server features.
message Features {
    // Kubernetes enables Kubernetes Access product
    bool Kubernetes = 1 [ (gogoproto.jsontag) = "kubernetes" ];
    // App enables Application Access product
    bool App = 2 [ (gogoproto.jsontag) = "app" ];
    // DB enables database access product
    bool DB = 3 [ (gogoproto.jsontag) = "db" ];
    // OIDC enables OIDC connectors
    bool OIDC = 4 [ (gogoproto.jsontag) = "oidc" ];
    // SAML enables SAML connectors
    bool SAML = 5 [ (gogoproto.jsontag) = "saml" ];
    // AccessControls enables FIPS access controls
    bool AccessControls = 6 [ (gogoproto.jsontag) = "access_controls" ];
    // AdvancedAccessWorkflows enables advanced access workflows
    bool AdvancedAccessWorkflows = 7 [ (gogoproto.jsontag) = "advanced_access_workflows" ];
    // Cloud enables some cloud-related features
    bool Cloud = 8 [ (gogoproto.jsontag) = "cloud" ];
}

// DeleteUserRequest is the input value for the DeleteUser method.
message DeleteUserRequest {
    // Name is the user name to delete.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// Semaphores is a sequence of Semaphore resources.
message Semaphores {
    repeated types.SemaphoreV3 Semaphores = 1 [ (gogoproto.jsontag) = "semaphores" ];
}

// AuditStreamRequest contains stream request - event or stream control request
message AuditStreamRequest {
    // Request is either stream request - create, resume or complete stream
    // or event submitted as a part of the stream
    oneof Request {
        // CreateStream creates the stream for session ID
        // should be the first message sent to the stream
        CreateStream CreateStream = 1;
        // ResumeStream resumes existing stream, should be the
        // first message sent to the stream
        ResumeStream ResumeStream = 2;
        // CompleteStream completes the stream
        CompleteStream CompleteStream = 3;
        // FlushAndClose flushes and closes the stream
        FlushAndCloseStream FlushAndCloseStream = 4;
        // Event contains the stream event
        events.OneOf Event = 5;
    }
}

// AuditStreamStatus returns audit stream status
// with corresponding upload ID
message AuditStreamStatus {
    // UploadID is upload ID associated with the stream,
    // can be used to resume the stream
    string UploadID = 1;
}

// CreateStream creates stream for a new session ID
message CreateStream { string SessionID = 1; }

// ResumeStream resumes stream that was previously created
message ResumeStream {
    // SessionID is a session ID of the stream
    string SessionID = 1;
    // UploadID is upload ID to resume
    string UploadID = 2;
}

// CompleteStream completes the stream
// and uploads it to the session server
message CompleteStream {}

// FlushAndCloseStream flushes the stream data and closes the stream
message FlushAndCloseStream {}

// GetAppServersRequest are the parameters used to request application servers.
message GetAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // SkipValidation is used to skip JSON schema validation.
    bool SkipValidation = 2 [ (gogoproto.jsontag) = "skip_validation" ];
}

// GetAppServersResponse contains all requested application servers.
message GetAppServersResponse {
    // Servers is a slice of types.Server that represent applications.
    repeated types.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertAppServerRequest are the parameters used to add an application.
message UpsertAppServerRequest { types.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ]; }

// DeleteAppServerRequest are the parameters used to remove an application.
message DeleteAppServerRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // Name is the name of the application to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllAppServersRequest are the parameters used to remove all applications.
message DeleteAllAppServersRequest {
    // Namespace is the namespace for application.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// GenerateAppTokenRequest are the parameters used to request an application
// token.
message GenerateAppTokenRequest {
    // Username is the Teleport username.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // Roles is a list of Teleport roles assigned to the user.
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles" ];
    // URI is the URI of the application this token is targeting.
    string URI = 3 [ (gogoproto.jsontag) = "uri" ];
    // Expires is the time this token expires.
    google.protobuf.Timestamp Expires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
}

// GenerateAppTokenResponse contains a signed application token.
message GenerateAppTokenResponse { string Token = 1 [ (gogoproto.jsontag) = "token" ]; }

// GetAppSessionRequest are the parameters used to request an application web session.
message GetAppSessionRequest {
    // SessionID is the ID of the session being requested.
    string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ];
}

// GetAppSessionResponse contains the requested application web session.
message GetAppSessionResponse {
    // Session is the application web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// GetAppSessionsResponse contains all the requested application web sessions.
message GetAppSessionsResponse {
    // Sessions is a list of application web sessions.
    repeated types.WebSessionV2 Sessions = 1 [ (gogoproto.jsontag) = "sessions" ];
}

// CreateAppSessionRequest contains the parameters to request a application web session.
message CreateAppSessionRequest {
    reserved 2;
    // Username is the name of the user requesting the session.
    string Username = 1 [ (gogoproto.jsontag) = "username" ];
    // PublicAddr is the public address the application.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr" ];
    // ClusterName is cluster within which the application is running.
    string ClusterName = 4 [ (gogoproto.jsontag) = "cluster_name" ];
}

// CreateAppSessionResponse contains the requested application web session.
message CreateAppSessionResponse {
    // Session is the application web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// DeleteAppSessionRequest contains the parameters used to remove an application web session.
message DeleteAppSessionRequest { string SessionID = 1 [ (gogoproto.jsontag) = "session_id" ]; }

// GetWebSessionResponse contains the requested web session.
message GetWebSessionResponse {
    // Session is the web session.
    types.WebSessionV2 Session = 1 [ (gogoproto.jsontag) = "session" ];
}

// GetWebSessionsResponse contains all the requested web sessions.
message GetWebSessionsResponse {
    // Sessions is a list of web sessions.
    repeated types.WebSessionV2 Sessions = 1 [ (gogoproto.jsontag) = "sessions" ];
}

// GetWebTokenResponse contains the requested web token.
message GetWebTokenResponse {
    // Token is the web token being requested.
    types.WebTokenV3 Token = 1 [ (gogoproto.jsontag) = "token" ];
}

// GetWebTokensResponse contains all the requested web tokens.
message GetWebTokensResponse {
    // Tokens is a list of web tokens.
    repeated types.WebTokenV3 Tokens = 1 [ (gogoproto.jsontag) = "tokens" ];
}

// GetKubeServicesRequest are the parameters used to request kubernetes services.
message GetKubeServicesRequest {}

// GetKubeServicesResponse contains all requested kubernetes services.
message GetKubeServicesResponse {
    // Servers is a slice of types.Server that represent kubernetes
    // services.
    repeated types.ServerV2 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertKubeServiceRequest are the parameters used to add or update a
// kubernetes service.
message UpsertKubeServiceRequest { types.ServerV2 Server = 1 [ (gogoproto.jsontag) = "server" ]; }

// DeleteKubeServiceRequest are the parameters used to remove a kubernetes service.
message DeleteKubeServiceRequest {
    // Name is the name of the kubernetes service to delete.
    string Name = 2 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllKubeServicesRequest are the parameters used to remove all kubernetes services.
message DeleteAllKubeServicesRequest {}

// GetDatabaseServersRequest is a request to return all registered database servers.
message GetDatabaseServersRequest {
    // Namespace is the database server namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // SkipValidation allows to turn off JSON schema validation.
    bool SkipValidation = 2 [ (gogoproto.jsontag) = "skip_validation" ];
}

// GetDatabaseServersResponse contains all registered database servers.
message GetDatabaseServersResponse {
    // Servers is a list of database proxy servers.
    repeated types.DatabaseServerV3 Servers = 1 [ (gogoproto.jsontag) = "servers" ];
}

// UpsertDatabaseServerRequest is a request to register database server.
message UpsertDatabaseServerRequest {
    // Server is the database proxy server to register.
    types.DatabaseServerV3 Server = 1 [ (gogoproto.jsontag) = "server" ];
}

// DeleteDatabaseServerRequest is a request to delete a database server.
message DeleteDatabaseServerRequest {
    // Namespace is the database server namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
    // HostID is the ID of the host database server is running on.
    string HostID = 2 [ (gogoproto.jsontag) = "host_id" ];
    // Name is the database server name.
    string Name = 3 [ (gogoproto.jsontag) = "name" ];
}

// DeleteAllDatabaseServersRequest is a request to delete all database servers.
message DeleteAllDatabaseServersRequest {
    // Namespace is the database servers namespace.
    string Namespace = 1 [ (gogoproto.jsontag) = "namespace" ];
}

// DatabaseCSRRequest is a request to generate a client certificate used
// by the proxy to authenticate with a remote database service.
message DatabaseCSRRequest {
    // CSR is the request to sign.
    bytes CSR = 1 [ (gogoproto.jsontag) = "csr" ];
    // ClusterName is the name of the cluster the request is for.
    string ClusterName = 2 [ (gogoproto.jsontag) = "cluster_name" ];
}

// DatabaseCSRResponse contains the signed database certificate.
message DatabaseCSRResponse {
    // Cert is the signed certificate.
    bytes Cert = 1 [ (gogoproto.jsontag) = "cert" ];
    // CACerts is a list of certificate authorities.
    repeated bytes CACerts = 2 [ (gogoproto.jsontag) = "ca_certs" ];
}

// DatabaseCertRequest is a request to generate a client certificate used
// by a database service to authenticate with a database instance.
message DatabaseCertRequest {
    // CSR is the request to sign.
    bytes CSR = 1 [ (gogoproto.jsontag) = "csr" ];
    // ServerName is the SAN to include in the certificate.
    string ServerName = 2 [ (gogoproto.jsontag) = "server_name" ];
    // TTL is the certificate validity period.
    int64 TTL = 3 [ (gogoproto.jsontag) = "ttl", (gogoproto.casttype) = "Duration" ];
}

// DatabaseCertResponse contains the signed certificate.
message DatabaseCertResponse {
    // Cert is the signed certificate.
    bytes Cert = 1 [ (gogoproto.jsontag) = "cert" ];
    // CACerts is a list of certificate authorities.
    repeated bytes CACerts = 2 [ (gogoproto.jsontag) = "ca_certs" ];
}

// GetRoleRequest is a request to query a role.
message GetRoleRequest {
    // Name is the name of the role to get.
    string Name = 1;
}

// GetRolesResponse is a response to querying for all roles.
message GetRolesResponse {
    // Roles is a list of roles.
    repeated types.RoleV3 Roles = 1;
}

// DeleteRoleRequest is a request to delete a role.
message DeleteRoleRequest {
    // Name is the role name to delete.
    string Name = 1;
}

// MFAAuthenticateChallenge is a challenge for all MFA devices registered for a
// user.
message MFAAuthenticateChallenge {
    // U2F contains one U2FChallenge per U2F device registered for a
    // user. Each challenge is unique.
    repeated U2FChallenge U2F = 1;
    // TOTP is a challenge for all TOTP devices registered for a user. When
    // this field is set, any TOTP device a user has registered can be used to
    // respond.
    TOTPChallenge TOTP = 2;
}

// MFAAuthenticateResponse is a response to MFAAuthenticateChallenge using one
// of the MFA devices registered for a user.
message MFAAuthenticateResponse {
    oneof Response {
        U2FResponse U2F = 1;
        TOTPResponse TOTP = 2;
    }
}

// U2FChallenge is a U2F auth challenge.
message U2FChallenge {
    string KeyHandle = 1;
    string Challenge = 2;
    string AppID = 3;
    string Version = 4;
}

// U2FResponse is a U2F auth challenge response.
message U2FResponse {
    string KeyHandle = 1;
    string ClientData = 2;
    string Signature = 3;
}

// TOTPChallenge is a challenge for all TOTP devices registered for a user.
message TOTPChallenge {
    // TOTP protocol has no challenge per se, but the user has to provide a
    // valid token in response. TOTPChallenge exists only to signal to the user
    // that TOTP MFA is supported, which means that the user has a TOTP device
    // registered.
}

// TOTPResponse is a response to TOTPChallenge.
message TOTPResponse { string Code = 1; }

// MFARegisterChallenge is a challenge for registering a new MFA device.
message MFARegisterChallenge {
    // Request depends on the type of the MFA device being registered.
    oneof Request {
        U2FRegisterChallenge U2F = 1;
        TOTPRegisterChallenge TOTP = 2;
    }
}

// MFARegisterResponse is a response to MFARegisterChallenge.
message MFARegisterResponse {
    oneof Response {
        U2FRegisterResponse U2F = 1;
        TOTPRegisterResponse TOTP = 2;
    }
}

// U2FRegisterChallenge is a challenge for registering a new U2F device.
message U2FRegisterChallenge {
    string Challenge = 1;
    string AppID = 2;
    string Version = 3;
}

// U2FRegisterResponse is a response to U2FRegisterChallenge.
message U2FRegisterResponse {
    string RegistrationData = 1;
    string ClientData = 2;
}

// TOTPRegisterChallenge is a challenge for registering a new TOTP device.
message TOTPRegisterChallenge {
    // Secret is a secret shared by client and server to generate codes.
    string Secret = 1;
    // Issuer is the name of the Teleport cluster.
    string Issuer = 2;
    // PeriodSeconds is a period for TOTP code rotation, in seconds.
    uint32 PeriodSeconds = 3;
    // Algorithm is the TOTP hashing algorithm.
    string Algorithm = 4;
    // Digits is the number of digits in the TOTP code.
    uint32 Digits = 5;
    // Account is the account name for this user.
    string Account = 6;
}

// TOTPRegisterResponse is a response to TOTPRegisterChallenge.
message TOTPRegisterResponse { string Code = 1; }

// AddMFADeviceRequest is a message sent by the client during AddMFADevice RPC.
message AddMFADeviceRequest {
    oneof Request {
        // Init describes the new device.
        AddMFADeviceRequestInit Init = 1;
        // ExistingMFAResponse is a response to ExistingMFAChallenge auth
        // challenge.
        MFAAuthenticateResponse ExistingMFAResponse = 2;
        // NewMFARegisterResponse is a response to NewMFARegisterChallenge
        // registration challenge.
        MFARegisterResponse NewMFARegisterResponse = 3;
    }
}

// AddMFADeviceResponse is a message sent by the server during AddMFADevice
// RPC.
message AddMFADeviceResponse {
    oneof Response {
        // ExistingMFAChallenge is an auth challenge using an existing MFA
        // device.
        MFAAuthenticateChallenge ExistingMFAChallenge = 1;
        // NewMFARegisterChallenge is a registration challenge for a new MFA
        // device.
        MFARegisterChallenge NewMFARegisterChallenge = 2;
        // Ack is a confirmation of successful device registration.
        AddMFADeviceResponseAck Ack = 3;
    }
}

// AddMFADeviceRequestInit describes the new MFA device.
message AddMFADeviceRequestInit {
    string DeviceName = 1;
    enum DeviceType {
        TOTP = 0;
        U2F = 1;
    }
    DeviceType Type = 2;
}

// AddMFADeviceResponseAck is a confirmation of successful device registration.
message AddMFADeviceResponseAck { types.MFADevice Device = 1; }

// DeleteMFADeviceRequest is a message sent by the client during
// DeleteMFADevice RPC.
message DeleteMFADeviceRequest {
    oneof Request {
        // Init describes the device to be deleted.
        DeleteMFADeviceRequestInit Init = 1;
        // MFAResponse is a response to MFAChallenge auth challenge.
        MFAAuthenticateResponse MFAResponse = 2;
    }
}

message DeleteMFADeviceResponse {
    oneof Response {
        // MFAChallenge is an auth challenge using any existing MFA device.
        MFAAuthenticateChallenge MFAChallenge = 1;
        // Ack is a confirmation of successful device deletion.
        DeleteMFADeviceResponseAck Ack = 2;
    }
}

// DeleteMFADeviceRequestInit describes the device to be deleted.
message DeleteMFADeviceRequestInit {
    // DeviceName is an MFA device name or ID to be deleted.
    string DeviceName = 1;
}

// DeleteMFADeviceResponseAck is a confirmation of successful device deletion.
message DeleteMFADeviceResponseAck {}

// GetMFADeviceRequest is a request for MFA devices for the calling user.
message GetMFADevicesRequest {}

// GetMFADeviceResponse is a response for GetMFADevices RPC.
message GetMFADevicesResponse { repeated types.MFADevice Devices = 1; }

// UserSingleUseCertsRequest is a request for a single-use user certificate.
message UserSingleUseCertsRequest {
    oneof Request {
        UserCertsRequest Init = 1;
        MFAAuthenticateResponse MFAResponse = 2;
    }
}

// UserSingleUseCertsResponse is a response with a single-use user certificate.
message UserSingleUseCertsResponse {
    oneof Response {
        MFAAuthenticateChallenge MFAChallenge = 1;
        SingleUseUserCert Cert = 2;
    }
}

// IsMFARequiredRequest is a request to check whether MFA is required to access
// the Target.
message IsMFARequiredRequest {
    oneof Target {
        // KubernetesCluster specifies the target kubernetes cluster.
        string KubernetesCluster = 1;
        // RouteToDatabase specifies the target database proxy name.
        RouteToDatabase Database = 2;
        // Node specifies the target SSH node.
        NodeLogin Node = 3;
    }
}

// NodeLogin specifies an SSH node and OS login.
message NodeLogin {
    // Node can be node's hostname or UUID.
    string Node = 1;
    // Login is the OS login name.
    string Login = 2;
}

// IsMFARequiredResponse is a response for MFA requirement check.
message IsMFARequiredResponse { bool Required = 1; }

// SingleUseUserCert is a single-use user certificate, either SSH or TLS.
message SingleUseUserCert {
    oneof Cert {
        bytes SSH = 1;
        bytes TLS = 2;
    }
}

message GetEventsRequest {
    // Namespace, if not set, defaults to 'default'
    string Namespace = 1;
    // StartDate is the oldest date of returned events
    google.protobuf.Timestamp StartDate = 2
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EndDate is the newest date of returned events
    google.protobuf.Timestamp EndDate = 3
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EventTypes is optional, if not set, returns all events
    repeated string EventTypes = 4;
    // Limit is the maximum amount of events returned
    int32 Limit = 5;
    // StartKey is used to resume a query in order to enable pagination.
    // If the previous response had LastKey set then this should be
    // set to its value. Otherwise leave empty.
    string StartKey = 6;
}

message GetSessionEventsRequest {
    // StartDate is the oldest date of returned events
    google.protobuf.Timestamp StartDate = 1
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // EndDate is the newest date of returned events
    google.protobuf.Timestamp EndDate = 2
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    // Limit is the maximum amount of events to retrieve.
    int32 Limit = 3;
    // StartKey is used to resume a query in order to enable pagination.
    // If the previous response had LastKey set then this should be
    // set to its value. Otherwise leave empty.
    string StartKey = 4;
}

message Events {
    // Items is a list of typed gRPC formatted audit events.
    repeated events.OneOf Items = 1;
    // the key of the last event if the returned set did not contain all events found i.e limit <
    // actual amount. this is the key clients can supply in another API request to continue fetching
    // events from the previous last position
    string LastKey = 2;
}

// AuthService is authentication/authorization service implementation
service AuthService {
    // SendKeepAlives allows node to send a stream of keep alive requests
    rpc SendKeepAlives(stream types.KeepAlive) returns (google.protobuf.Empty);
    // WatchEvents returns a new stream of cluster events
    rpc WatchEvents(Watch) returns (stream Event);

    // GetNode retrieves a node described by the given request.
    rpc GetNode(types.ResourceInNamespaceRequest) returns (types.ServerV2);
    // GetNodes retrieves all nodes.
    rpc GetNodes(types.ResourcesInNamespaceRequest) returns (types.ServerV2List);
    // UpsertNode upserts a node in a backend.
    rpc UpsertNode(types.ServerV2) returns (types.KeepAlive);
    // DeleteNode deletes an existing node in a backend described by the given request.
    rpc DeleteNode(types.ResourceInNamespaceRequest) returns (google.protobuf.Empty);
    // DeleteAllNodes deletes all nodes.
    rpc DeleteAllNodes(types.ResourcesInNamespaceRequest) returns (google.protobuf.Empty);

    // GenerateUserCerts generates a set of user certificates.
    rpc GenerateUserCerts(UserCertsRequest) returns (Certs);
    // GenerateUserSingleUseCerts generates a set of single-use user
    // certificates.
    rpc GenerateUserSingleUseCerts(stream UserSingleUseCertsRequest)
        returns (stream UserSingleUseCertsResponse);
    // IsMFARequired checks whether MFA is required to access the specified
    // target.
    rpc IsMFARequired(IsMFARequiredRequest) returns (IsMFARequiredResponse);

    // GetAccessRequests gets all pending access requests.
    rpc GetAccessRequests(types.AccessRequestFilter) returns (AccessRequests);
    // CreateAccessRequest creates a new access request.
    rpc CreateAccessRequest(types.AccessRequestV3) returns (google.protobuf.Empty);
    // DeleteAccessRequest deletes an access request.
    rpc DeleteAccessRequest(RequestID) returns (google.protobuf.Empty);
    // SetAccessRequestState sets the state of an access request.
    rpc SetAccessRequestState(RequestStateSetter) returns (google.protobuf.Empty);
    // SubmitAccessReview applies a review to a request and returns the post-application state.
    rpc SubmitAccessReview(types.AccessReviewSubmission) returns (types.AccessRequestV3);
    // GetAccessCapabilities requests the access capabilites of a user.
    rpc GetAccessCapabilities(types.AccessCapabilitiesRequest) returns (types.AccessCapabilities);

    // GetPluginData gets all plugin data matching the supplied filter.
    rpc GetPluginData(types.PluginDataFilter) returns (PluginDataSeq);
    // UpdatePluginData updates a plugin's resource-specific datastore.
    rpc UpdatePluginData(types.PluginDataUpdateParams) returns (google.protobuf.Empty);
    // Ping gets basic info about the auth server. This method is intended
    // to mimic the behavior of the proxy's Ping method, and may be used by
    // clients for verification or configuration on startup.
    rpc Ping(PingRequest) returns (PingResponse);

    // RotateResetPasswordTokenSecrets rotates token secrets for a given tokenID.
    rpc RotateResetPasswordTokenSecrets(RotateResetPasswordTokenSecretsRequest)
        returns (types.ResetPasswordTokenSecretsV3);
    // GetResetPasswordToken returns a token.
    rpc GetResetPasswordToken(GetResetPasswordTokenRequest) returns (types.ResetPasswordTokenV3);
    // CreateResetPasswordToken creates ResetPasswordToken.
    rpc CreateResetPasswordToken(CreateResetPasswordTokenRequest)
        returns (types.ResetPasswordTokenV3);

    // GetUser gets a user resource by name.
    rpc GetUser(GetUserRequest) returns (types.UserV2);
    // GetUsers gets all current user resources.
    rpc GetUsers(GetUsersRequest) returns (stream types.UserV2);
    // CreateUser inserts a new user entry to a backend.
    rpc CreateUser(types.UserV2) returns (google.protobuf.Empty);
    // UpdateUser updates an existing user in a backend.
    rpc UpdateUser(types.UserV2) returns (google.protobuf.Empty);
    // DeleteUser deletes an existing user in a backend by username.
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

    // AcquireSemaphore acquires lease with requested resources from semaphore.
    rpc AcquireSemaphore(types.AcquireSemaphoreRequest) returns (types.SemaphoreLease);
    // KeepAliveSemaphoreLease updates semaphore lease.
    rpc KeepAliveSemaphoreLease(types.SemaphoreLease) returns (google.protobuf.Empty);
    // CancelSemaphoreLease cancels semaphore lease early.
    rpc CancelSemaphoreLease(types.SemaphoreLease) returns (google.protobuf.Empty);
    // GetSemaphores returns a list of all semaphores matching the supplied filter.
    rpc GetSemaphores(types.SemaphoreFilter) returns (Semaphores);
    // DeleteSemaphore deletes a semaphore matching the supplied filter.
    rpc DeleteSemaphore(types.SemaphoreFilter) returns (google.protobuf.Empty);

    // EmitAuditEvent emits audit event
    rpc EmitAuditEvent(events.OneOf) returns (google.protobuf.Empty);
    // CreateAuditStream creates or resumes audit events streams
    rpc CreateAuditStream(stream AuditStreamRequest) returns (stream events.StreamStatus);

    // GetAppServers gets all application servers.
    rpc GetAppServers(GetAppServersRequest) returns (GetAppServersResponse);
    // UpsertAppServer adds an application server.
    rpc UpsertAppServer(UpsertAppServerRequest) returns (types.KeepAlive);
    // DeleteAppServer removes an application server.
    rpc DeleteAppServer(DeleteAppServerRequest) returns (google.protobuf.Empty);
    // DeleteAllAppServers removes all application servers.
    rpc DeleteAllAppServers(DeleteAllAppServersRequest) returns (google.protobuf.Empty);

    // GenerateAppToken will generate a JWT token for application access.
    rpc GenerateAppToken(GenerateAppTokenRequest) returns (GenerateAppTokenResponse);

    // GetAppSession gets an application web session.
    rpc GetAppSession(GetAppSessionRequest) returns (GetAppSessionResponse);
    // GetAppSessions gets all application web sessions.
    rpc GetAppSessions(google.protobuf.Empty) returns (GetAppSessionsResponse);
    // CreateAppSession creates an application web session. Application web
    // sessions represent a browser session the client holds.
    rpc CreateAppSession(CreateAppSessionRequest) returns (CreateAppSessionResponse);
    // DeleteAppSession removes an application web session.
    rpc DeleteAppSession(DeleteAppSessionRequest) returns (google.protobuf.Empty);
    // DeleteAllAppSessions removes all application web sessions.
    rpc DeleteAllAppSessions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWebSession gets a web session.
    rpc GetWebSession(types.GetWebSessionRequest) returns (GetWebSessionResponse);
    // GetWebSessions gets all web sessions.
    rpc GetWebSessions(google.protobuf.Empty) returns (GetWebSessionsResponse);
    // DeleteWebSession deletes a web session.
    rpc DeleteWebSession(types.DeleteWebSessionRequest) returns (google.protobuf.Empty);
    // DeleteAllWebSessions deletes all web sessions.
    rpc DeleteAllWebSessions(google.protobuf.Empty) returns (google.protobuf.Empty);

    // GetWebToken gets a web token.
    rpc GetWebToken(types.GetWebTokenRequest) returns (GetWebTokenResponse);
    // GetWebTokens gets all web tokens.
    rpc GetWebTokens(google.protobuf.Empty) returns (GetWebTokensResponse);
    // DeleteWebToken deletes a web token.
    rpc DeleteWebToken(types.DeleteWebTokenRequest) returns (google.protobuf.Empty);
    // DeleteAllWebTokens deletes all web tokens.
    rpc DeleteAllWebTokens(google.protobuf.Empty) returns (google.protobuf.Empty);

    // UpdateRemoteCluster updates remote cluster
    rpc UpdateRemoteCluster(types.RemoteClusterV3) returns (google.protobuf.Empty);

    // GetKubeServices gets all kubernetes services.
    rpc GetKubeServices(GetKubeServicesRequest) returns (GetKubeServicesResponse);
    // UpsertKubeService adds or updates a kubernetes service.
    rpc UpsertKubeService(UpsertKubeServiceRequest) returns (google.protobuf.Empty);
    // DeleteKubeService removes a kubernetes service.
    rpc DeleteKubeService(DeleteKubeServiceRequest) returns (google.protobuf.Empty);
    // DeleteAllKubeServices removes all kubernetes services.
    rpc DeleteAllKubeServices(DeleteAllKubeServicesRequest) returns (google.protobuf.Empty);

    // GetDatabaseServers returns all registered database proxy servers.
    rpc GetDatabaseServers(GetDatabaseServersRequest) returns (GetDatabaseServersResponse);
    // UpsertDatabaseServer registers a new database proxy server.
    rpc UpsertDatabaseServer(UpsertDatabaseServerRequest) returns (types.KeepAlive);
    // DeleteDatabaseServer removes the specified database proxy server.
    rpc DeleteDatabaseServer(DeleteDatabaseServerRequest) returns (google.protobuf.Empty);
    // DeleteAllDatabaseServers removes all registered database proxy servers.
    rpc DeleteAllDatabaseServers(DeleteAllDatabaseServersRequest) returns (google.protobuf.Empty);

    // SignDatabaseCSR generates client certificate used by proxy to
    // authenticate with a remote database service.
    rpc SignDatabaseCSR(DatabaseCSRRequest) returns (DatabaseCSRResponse);
    // GenerateDatabaseCert generates client certificate used by a database
    // service to authenticate with the database instance.
    rpc GenerateDatabaseCert(DatabaseCertRequest) returns (DatabaseCertResponse);

    // GetRole retrieves a role described by the given request.
    rpc GetRole(GetRoleRequest) returns (types.RoleV3);
    // GetRole retrieves all roles.
    rpc GetRoles(google.protobuf.Empty) returns (GetRolesResponse);
    // UpsertRole upserts a role in a backend.
    rpc UpsertRole(types.RoleV3) returns (google.protobuf.Empty);
    // DeleteRole deletes an existing role in a backend described by the given request.
    rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty);

    // AddMFADevice adds an MFA device for the user calling this RPC.
    //
    // The RPC is streaming both ways and the message sequence is:
    // (-> means client-to-server, <- means server-to-client)
    // -> Init
    // <- ExistingMFAChallenge
    // -> ExistingMFAResponse
    // <- NewMFARegisterChallenge
    // -> NewMFARegisterResponse
    // <- Ack
    rpc AddMFADevice(stream AddMFADeviceRequest) returns (stream AddMFADeviceResponse);
    // DeleteMFADevice deletes an MFA device for the user calling this RPC.
    //
    // The RPC is streaming both ways and the message sequence is:
    // (-> means client-to-server, <- means server-to-client)
    // -> Init
    // <- MFAChallenge
    // -> MFAResponse
    // <- Ack
    rpc DeleteMFADevice(stream DeleteMFADeviceRequest) returns (stream DeleteMFADeviceResponse);
    // GetMFADevices returns all MFA devices registered for the user calling
    // this RPC.
    rpc GetMFADevices(GetMFADevicesRequest) returns (GetMFADevicesResponse);

    // GetOIDCConnector gets an OIDC connector resource by name.
    rpc GetOIDCConnector(types.ResourceWithSecretsRequest) returns (types.OIDCConnectorV2);
    // GetOIDCConnectors gets all current OIDC connector resources.
    rpc GetOIDCConnectors(types.ResourcesWithSecretsRequest) returns (types.OIDCConnectorV2List);
    // UpsertOIDCConnector upserts an OIDC connector in a backend.
    rpc UpsertOIDCConnector(types.OIDCConnectorV2) returns (google.protobuf.Empty);
    // DeleteOIDCConnector deletes an existing OIDC connector in a backend by name.
    rpc DeleteOIDCConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetSAMLConnector gets a SAML connector resource by name.
    rpc GetSAMLConnector(types.ResourceWithSecretsRequest) returns (types.SAMLConnectorV2);
    // GetSAMLConnectors gets all current SAML connector resources.
    rpc GetSAMLConnectors(types.ResourcesWithSecretsRequest) returns (types.SAMLConnectorV2List);
    // UpsertSAMLConnector upserts a SAML connector in a backend.
    rpc UpsertSAMLConnector(types.SAMLConnectorV2) returns (google.protobuf.Empty);
    // DeleteSAMLConnector deletes an existing SAML connector in a backend by name.
    rpc DeleteSAMLConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetGithubConnector gets a Github connector resource by name.
    rpc GetGithubConnector(types.ResourceWithSecretsRequest) returns (types.GithubConnectorV3);
    // GetGithubConnectors gets all current Github connector resources.
    rpc GetGithubConnectors(types.ResourcesWithSecretsRequest)
        returns (types.GithubConnectorV3List);
    // UpsertGithubConnector upserts a Github connector in a backend.
    rpc UpsertGithubConnector(types.GithubConnectorV3) returns (google.protobuf.Empty);
    // DeleteGithubConnector deletes an existing Github connector in a backend by name.
    rpc DeleteGithubConnector(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetTrustedCluster gets a Trusted Cluster resource by name.
    rpc GetTrustedCluster(types.ResourceRequest) returns (types.TrustedClusterV2);
    // GetTrustedClusters gets all current Trusted Cluster resources.
    rpc GetTrustedClusters(google.protobuf.Empty) returns (types.TrustedClusterV2List);
    // UpsertTrustedCluster upserts a Trusted Cluster in a backend.
    rpc UpsertTrustedCluster(types.TrustedClusterV2) returns (types.TrustedClusterV2);
    // DeleteTrustedCluster deletes an existing Trusted Cluster in a backend by name.
    rpc DeleteTrustedCluster(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetToken retrieves a token described by the given request.
    rpc GetToken(types.ResourceRequest) returns (types.ProvisionTokenV2);
    // GetToken retrieves all tokens.
    rpc GetTokens(google.protobuf.Empty) returns (types.ProvisionTokenV2List);
    // UpsertToken upserts a token in a backend.
    rpc UpsertToken(types.ProvisionTokenV2) returns (google.protobuf.Empty);
    // DeleteToken deletes an existing token in a backend described by the given request.
    rpc DeleteToken(types.ResourceRequest) returns (google.protobuf.Empty);

    // GetClusterNetworkingConfig gets cluster networking configuration.
    rpc GetClusterNetworkingConfig(google.protobuf.Empty) returns (types.ClusterNetworkingConfigV2);
    // SetClusterNetworkingConfig sets cluster networking configuration.
    rpc SetClusterNetworkingConfig(types.ClusterNetworkingConfigV2) returns (google.protobuf.Empty);

    // GetSessionRecordingConfig gets session recording configuration.
    rpc GetSessionRecordingConfig(google.protobuf.Empty) returns (types.SessionRecordingConfigV2);
    // SetSessionRecordingConfig sets session recording configuration.
    rpc SetSessionRecordingConfig(types.SessionRecordingConfigV2) returns (google.protobuf.Empty);

    // ResetAuthPreference resets cluster auth preference to defaults.
    rpc ResetAuthPreference(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Out-of-session request for audit events.
    rpc GetEvents(GetEventsRequest) returns (Events);
    // In-session request for audit events.
    rpc GetSessionEvents(GetSessionEventsRequest) returns (Events);
}
