syntax = "proto3";
package types;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gravitational/teleport/api/types/wrappers/wrappers.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

message KeepAlive {
    // Name of the resource to keep alive.
    string Name = 1 [ (gogoproto.jsontag) = "server_name" ];
    // Namespace is the namespace of the resource.
    string Namespace = 2 [ (gogoproto.jsontag) = "namespace" ];
    // LeaseID is ID of the lease.
    int64 LeaseID = 3 [ (gogoproto.jsontag) = "lease_id" ];
    // Expires is set to update expiry time of the resource.
    google.protobuf.Timestamp Expires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
    // Type is the type of keep alive, used by servers. At the moment only
    // "node", "app" and "database" are supported.
    enum KeepAliveType {
        UNKNOWN = 0;
        NODE = 1;
        APP = 2;
        DATABASE = 3;
    }
    KeepAliveType Type = 9 [ (gogoproto.jsontag) = "type" ];
    // HostID is an optional UUID of the host the resource belongs to.
    string HostID = 10 [ (gogoproto.jsontag) = "host_id,omitempty" ];
}

// Metadata is resource metadata
message Metadata {
    // Name is an object name
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Namespace is object namespace. The field should be called "namespace"
    // when it returns in Teleport 2.4.
    string Namespace = 2 [ (gogoproto.jsontag) = "-" ];
    // Description is object description
    string Description = 3 [ (gogoproto.jsontag) = "description,omitempty" ];
    // Labels is a set of labels
    map<string, string> Labels = 5 [ (gogoproto.jsontag) = "labels,omitempty" ];
    // Expires is a global expiry time header can be set on any resource in the
    // system.
    google.protobuf.Timestamp Expires = 6 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = true,
        (gogoproto.jsontag) = "expires,omitempty"
    ];
    // ID is a record ID
    int64 ID = 7 [ (gogoproto.jsontag) = "id,omitempty" ];
};

// Rotation is a status of the rotation of the certificate authority
message Rotation {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // State could be one of "init" or "in_progress".
    string State = 1 [ (gogoproto.jsontag) = "state,omitempty" ];
    // Phase is the current rotation phase.
    string Phase = 2 [ (gogoproto.jsontag) = "phase,omitempty" ];
    // Mode sets manual or automatic rotation mode.
    string Mode = 3 [ (gogoproto.jsontag) = "mode,omitempty" ];
    // CurrentID is the ID of the rotation operation
    // to differentiate between rotation attempts.
    string CurrentID = 4 [ (gogoproto.jsontag) = "current_id" ];
    // Started is set to the time when rotation has been started
    // in case if the state of the rotation is "in_progress".
    google.protobuf.Timestamp Started = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true,
        (gogoproto.jsontag) = "started,omitempty"
    ];
    // GracePeriod is a period during which old and new CA
    // are valid for checking purposes, but only new CA is issuing certificates.
    int64 GracePeriod = 6
        [ (gogoproto.jsontag) = "grace_period,omitempty", (gogoproto.casttype) = "Duration" ];
    // LastRotated specifies the last time of the completed rotation.
    google.protobuf.Timestamp LastRotated = 7 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true,
        (gogoproto.jsontag) = "last_rotated,omitempty"
    ];
    // Schedule is a rotation schedule - used in
    // automatic mode to switch beetween phases.
    RotationSchedule Schedule = 8
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "schedule,omitempty" ];
}

// RotationSchedule is a rotation schedule setting time switches
// for different phases.
message RotationSchedule {
    // UpdateClients specifies time to switch to the "Update clients" phase
    google.protobuf.Timestamp UpdateClients = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true,
        (gogoproto.jsontag) = "update_clients,omitempty"
    ];
    // UpdateServers specifies time to switch to the "Update servers" phase.
    google.protobuf.Timestamp UpdateServers = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true,
        (gogoproto.jsontag) = "update_servers,omitempty"
    ];
    // Standby specifies time to switch to the "Standby" phase.
    google.protobuf.Timestamp Standby = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime) = true,
        (gogoproto.jsontag) = "standby,omitempty"
    ];
}

// ResorceHeader is a shared resource header
// used in cases when only type and name is known
message ResourceHeader {
    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind,omitempty" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version,omitempty" ];
    // Metadata is resource metadata
    Metadata Metadata = 4
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata,omitempty" ];
}

// DatabaseServerV2 represents a database access server.
message DatabaseServerV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is the database server resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource subkind.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is the resource version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is the database server metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is the database server spec.
    DatabaseServerSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// DatabaseServerSpecV3 is the database server spec.
message DatabaseServerSpecV3 {
    // Description is a free-form text describing this database server.
    string Description = 1 [ (gogoproto.jsontag) = "description,omitempty" ];
    // Protocol is the database type e.g. postgres, mysql, etc.
    string Protocol = 2 [ (gogoproto.jsontag) = "protocol" ];
    // URI is the database connection address.
    string URI = 3 [ (gogoproto.jsontag) = "uri" ];
    // CACert is an optional base64-encoded database CA certificate.
    bytes CACert = 4 [ (gogoproto.jsontag) = "ca_cert,omitempty" ];
    // AWS contains AWS specific settings for RDS/Aurora databases.
    AWS AWS = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "aws" ];
    // Version is the Teleport version that the server is running.
    string Version = 6 [ (gogoproto.jsontag) = "version" ];
    // Hostname is the database server hostname.
    string Hostname = 7 [ (gogoproto.jsontag) = "hostname" ];
    // HostID is the ID of the host the database server is running on.
    string HostID = 8 [ (gogoproto.jsontag) = "host_id" ];
    // DynamicLabels is the database server dynamic labels.
    map<string, CommandLabelV2> DynamicLabels = 9
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "dynamic_labels,omitempty" ];
    // Rotation contains the server CA rotation information.
    Rotation Rotation = 10
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "rotation,omitempty" ];
    // GCP contains parameters specific to GCP Cloud SQL databases.
    GCPCloudSQL GCP = 11 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "gcp,omitempty" ];
}

// AWS contains AWS specific settings such as region.
message AWS {
    // Region is a AWS cloud region.
    string Region = 1 [ (gogoproto.jsontag) = "region,omitempty" ];
    // Redshift contains Redshift specific settings.
    Redshift Redshift = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "redshift,omitempty" ];
}

// Redshift contains AWS Redshift specific settings.
message Redshift {
    // ClusterID is the Redshift cluster identifier.
    string ClusterID = 1 [ (gogoproto.jsontag) = "cluster_id,omitempty" ];
}

// GCPCloudSQL contains parameters specific to GCP Cloud SQL databases.
message GCPCloudSQL {
    // ProjectID is the GCP project ID the Cloud SQL instance resides in.
    string ProjectID = 1 [ (gogoproto.jsontag) = "project_id,omitempty" ];
    // InstanceID is the Cloud SQL instance ID.
    string InstanceID = 2 [ (gogoproto.jsontag) = "instance_id,omitempty" ];
}

// ServerV2 represents a Node, App, Database, Proxy or Auth server in a Teleport cluster.
message ServerV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a server spec
    ServerSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ServerV2List is a list of servers.
message ServerV2List {
    // Servers is a list of servers.
    repeated ServerV2 Servers = 1;
}

// ServerSpecV2 is a specification for V2 Server
message ServerSpecV2 {
    reserved 8;

    // Addr is server host:port address
    string Addr = 1 [ (gogoproto.jsontag) = "addr" ];
    // PublicAddr is the public address this cluster can be reached at.
    string PublicAddr = 2 [ (gogoproto.jsontag) = "public_addr,omitempty" ];
    // Hostname is server hostname
    string Hostname = 3 [ (gogoproto.jsontag) = "hostname" ];
    // CmdLabels is server dynamic labels
    map<string, CommandLabelV2> CmdLabels = 4
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "cmd_labels,omitempty" ];
    // Rotation specifies server rotation
    Rotation Rotation = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "rotation,omitempty" ];
    // UseTunnel indicates that connections to this server should occur over a
    // reverse tunnel.
    bool UseTunnel = 6 [ (gogoproto.jsontag) = "use_tunnel,omitempty" ];
    // TeleportVersion is the teleport version that the server is running on
    string Version = 7 [ (gogoproto.jsontag) = "version" ];
    // Apps is a list of applications this server is proxying.
    repeated App Apps = 9 [ (gogoproto.jsontag) = "apps,omitempty" ];
    // KubernetesClusters is a list of kubernetes clusters provided by this
    // Proxy or KubeService server.
    //
    // Important: jsontag must not be "kubernetes_clusters", because a
    // different field with that jsontag existed in 4.4:
    // https://github.com/gravitational/teleport/issues/4862
    repeated KubernetesCluster KubernetesClusters = 10
        [ (gogoproto.jsontag) = "kube_clusters,omitempty" ];
}

// App is a specific application that a server proxies.
message App {
    // Name is the name of the application.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // URI is the internal address the application is available at.
    string URI = 2 [ (gogoproto.jsontag) = "uri" ];
    // PublicAddr is the public address the application is accessible at.
    string PublicAddr = 3 [ (gogoproto.jsontag) = "public_addr,omitempty" ];
    // StaticLabels is map of static labels associated with an application.
    // Used for RBAC.
    map<string, string> StaticLabels = 4 [ (gogoproto.jsontag) = "labels,omitempty" ];
    // DynamicLabels is map of dynamic labels associated with an application.
    // Used for RBAC.
    map<string, CommandLabelV2> DynamicLabels = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "commands,omitempty" ];
    // InsecureSkipVerify disables app's TLS certificate verification.
    bool InsecureSkipVerify = 6 [ (gogoproto.jsontag) = "insecure_skip_verify" ];
    // Rewrite is a list of rewriting rules to apply to requests and responses.
    Rewrite Rewrite = 7 [ (gogoproto.jsontag) = "rewrite,omitempty" ];
    // Description is an optional free-form app description.
    string Description = 8 [ (gogoproto.jsontag) = "description,omitempty" ];
}

// Rewrite is a list of rewriting rules to apply to requests and responses.
message Rewrite {
    // Redirect defines a list of hosts which will be rewritten to the public
    // address of the application if they occur in the "Location" header.
    repeated string Redirect = 1 [ (gogoproto.jsontag) = "redirect,omitempty" ];
    // Headers is a list of headers to inject when passing the request over
    // to the application.
    repeated Header Headers = 2 [ (gogoproto.jsontag) = "headers,omitempty" ];
}

// Header represents a single http header passed over to the proxied application.
message Header {
    // Name is the http header name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Value is the http header value.
    string Value = 2 [ (gogoproto.jsontag) = "value" ];
}

// CommandLabelV2 is a label that has a value as a result of the
// output generated by running command, e.g. hostname
message CommandLabelV2 {
    // Period is a time between command runs
    int64 Period = 1 [ (gogoproto.jsontag) = "period", (gogoproto.casttype) = "Duration" ];
    // Command is a command to run
    repeated string Command = 2 [ (gogoproto.jsontag) = "command" ];
    // Result captures standard output
    string Result = 3 [ (gogoproto.jsontag) = "result" ];
}

// TLSKeyPair is a TLS key pair
message TLSKeyPair {
    // Cert is a PEM encoded TLS cert
    bytes Cert = 1 [ (gogoproto.jsontag) = "cert,omitempty" ];
    // Key is a PEM encoded TLS key
    bytes Key = 2 [ (gogoproto.jsontag) = "key,omitempty" ];
}

// JWTKeyPair is a PEM encoded keypair used for signing JWT tokens.
message JWTKeyPair {
    // PublicKey is a PEM encoded public key.
    bytes PublicKey = 1 [ (gogoproto.jsontag) = "public_key,omitempty" ];
    // PrivateKey is a PEM encoded private key.
    bytes PrivateKey = 2 [ (gogoproto.jsontag) = "private_key,omitempty" ];
}

// CertAuthorityV2 is version 2 resource spec for Cert Authority
message CertAuthorityV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;
    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is connector metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec contains cert authority specification
    CertAuthoritySpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// CertAuthoritySpecV2 is a host or user certificate authority that
// can check and if it has private key stored as well, sign it too
message CertAuthoritySpecV2 {
    // Type is either user or host certificate authority
    string Type = 1 [ (gogoproto.jsontag) = "type", (gogoproto.casttype) = "CertAuthType" ];
    // DELETE IN(2.7.0) this field is deprecated,
    // as resource name matches cluster name after migrations.
    // and this property is enforced by the auth server code.
    // ClusterName identifies cluster name this authority serves,
    // for host authorities that means base hostname of all servers,
    // for user authorities that means organization name
    string ClusterName = 2 [ (gogoproto.jsontag) = "cluster_name" ];
    // Checkers is a list of SSH public keys that can be used to check
    // certificate signatures
    repeated bytes CheckingKeys = 3 [ (gogoproto.jsontag) = "checking_keys,omitempty" ];
    // SigningKeys is a list of private keys used for signing
    repeated bytes SigningKeys = 4 [ (gogoproto.jsontag) = "signing_keys,omitempty" ];
    // Roles is a list of roles assumed by users signed by this CA
    repeated string Roles = 5 [ (gogoproto.jsontag) = "roles,omitempty" ];
    // RoleMap specifies role mappings to remote roles
    repeated RoleMapping RoleMap = 6
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "role_map,omitempty" ];
    // TLS is a list of TLS key pairs
    repeated TLSKeyPair TLSKeyPairs = 7
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "tls_key_pairs,omitempty" ];
    // Rotation is a status of the certificate authority rotation
    Rotation Rotation = 8
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "rotation,omitempty" ];
    // SigningAlg is the algorithm used for signing new SSH certificates using
    // SigningKeys.
    enum SigningAlgType {
        UNKNOWN = 0;
        RSA_SHA1 = 1;
        RSA_SHA2_256 = 2;
        RSA_SHA2_512 = 3;
    }
    SigningAlgType SigningAlg = 9 [ (gogoproto.jsontag) = "signing_alg,omitempty" ];
    // JWTKeyPair is a list of JWT key pairs.
    repeated JWTKeyPair JWTKeyPairs = 10
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "jwt_key_pairs,omitempty" ];
}

// RoleMappping provides mapping of remote roles to local roles
// for trusted clusters
message RoleMapping {
    // Remote specifies remote role name to map from
    string Remote = 1 [ (gogoproto.jsontag) = "remote" ];
    // Local specifies local roles to map to
    repeated string Local = 2 [ (gogoproto.jsontag) = "local" ];
}

// ProvisionTokenV1 is a provisioning token V1
message ProvisionTokenV1 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Roles is a list of roles associated with the token,
    // that will be converted to metadata in the SSH and X509
    // certificates issued to the user of the token
    repeated string Roles = 1
        [ (gogoproto.jsontag) = "roles", (gogoproto.casttype) = "SystemRole" ];
    // Expires is a global expiry time header can be set on any resource in the
    // system.
    google.protobuf.Timestamp Expires = 2 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];
    // Token is a token name
    string Token = 3 [ (gogoproto.jsontag) = "token" ];
}

// ProvisionTokenV2 specifies provisioning token
message ProvisionTokenV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a provisioning token V2 spec
    ProvisionTokenSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ProvisionTokenV2List is a list of provisioning tokens.
message ProvisionTokenV2List {
    // ProvisionTokens is a list of provisioning tokens.
    repeated ProvisionTokenV2 ProvisionTokens = 1;
}

// ProvisionTokenSpecV2 is a specification for V2 token
message ProvisionTokenSpecV2 {
    // Roles is a list of roles associated with the token,
    // that will be converted to metadata in the SSH and X509
    // certificates issued to the user of the token
    repeated string Roles = 1
        [ (gogoproto.jsontag) = "roles", (gogoproto.casttype) = "SystemRole" ];
}

// StaticTokensV2 implements the StaticTokens interface.
message StaticTokensV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a provisioning token V2 spec
    StaticTokensSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// StaticTokensSpecV2 is the actual data we care about for StaticTokensSpecV2.
message StaticTokensSpecV2 {
    // StaticTokens is a list of tokens that can be used to add nodes to the
    // cluster.
    repeated ProvisionTokenV1 StaticTokens = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "static_tokens" ];
}

// ClusterNameV2 implements the ClusterName interface.
message ClusterNameV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a cluster name V2 spec
    ClusterNameSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ClusterNameSpecV2 is the actual data we care about for ClusterName.
message ClusterNameSpecV2 {
    // ClusterName is the name of the cluster. Changing this value once the
    // cluster is setup can and will cause catastrophic problems.
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
}

// ClusterConfigV3 implements the ClusterConfig interface.
message ClusterConfigV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a cluster config V3 spec
    ClusterConfigSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ClusterConfigSpecV3 is the actual data we care about for ClusterConfig.
message ClusterConfigSpecV3 {
    reserved 1, 3, 5, 7, 8, 10;

    // ClusterID is the unique cluster ID that is set once during the first auth
    // server startup.
    string ClusterID = 2 [ (gogoproto.jsontag) = "cluster_id" ];

    // Audit is a section with audit config
    AuditConfig Audit = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "audit" ];

    // DisconnectExpiredCert provides disconnect expired certificate setting -
    // if true, connections with expired client certificates will get disconnected
    bool DisconnectExpiredCert = 6
        [ (gogoproto.jsontag) = "disconnect_expired_cert", (gogoproto.casttype) = "Bool" ];

    // LocalAuth is true if local authentication is enabled.
    bool LocalAuth = 9 [ (gogoproto.jsontag) = "local_auth", (gogoproto.casttype) = "Bool" ];

    // DELETE IN 8.0.0
    ClusterNetworkingConfigSpecV2 NetworkingConfig = 11
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "", (gogoproto.embed) = true ];

    // DELETE IN 8.0.0
    LegacySessionRecordingConfigSpec SessionRecordingConfig = 12
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "", (gogoproto.embed) = true ];
}

// AuditConfig represents audit log settings in the cluster
message AuditConfig {
    // Type is audit backend type
    string Type = 1 [ (gogoproto.jsontag) = "type,omitempty" ];
    // Region is a region setting for audit sessions used by cloud providers
    string Region = 2 [ (gogoproto.jsontag) = "region,omitempty" ];
    // AuditSessionsURI is a parameter where to upload sessions
    string AuditSessionsURI = 3 [ (gogoproto.jsontag) = "audit_sessions_uri,omitempty" ];
    // AuditEventsURI is a parameter with all supported outputs
    // for audit events
    wrappers.StringValues AuditEventsURI = 4 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "audit_events_uri,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Strings"
    ];
    // AuditTableName is a DB table name used for audits
    // Deprecated in favor of AuditEventsURI
    // DELETE IN (3.1.0)
    string AuditTableName = 5 [ (gogoproto.jsontag) = "audit_table_name,omitempty" ];

    // EnableContinuousBackups is used to enable (or disable) PITR (Point-In-Time Recovery).
    bool EnableContinuousBackups = 6 [ (gogoproto.jsontag) = "continuous_backups,omitempty" ];

    // EnableAutoScaling is used to enable (or disable) auto scaling policy.
    bool EnableAutoScaling = 7 [ (gogoproto.jsontag) = "auto_scaling,omitempty" ];
    // ReadMaxCapacity is the maximum provisioned read capacity.
    int64 ReadMaxCapacity = 8 [ (gogoproto.jsontag) = "read_max_capacity,omitempty" ];
    // ReadMinCapacity is the minimum provisioned read capacity.
    int64 ReadMinCapacity = 9 [ (gogoproto.jsontag) = "read_min_capacity,omitempty" ];
    // ReadTargetValue is the ratio of consumed read to provisioned capacity.
    double ReadTargetValue = 10 [ (gogoproto.jsontag) = "read_target_value,omitempty" ];
    // WriteMaxCapacity is the maximum provisioned write capacity.
    int64 WriteMaxCapacity = 11 [ (gogoproto.jsontag) = "write_max_capacity,omitempty" ];
    // WriteMinCapacity is the minimum provisioned write capacity.
    int64 WriteMinCapacity = 12 [ (gogoproto.jsontag) = "write_min_capacity,omitempty" ];
    // WriteTargetValue is the ratio of consumed write to provisioned capacity.
    double WriteTargetValue = 13 [ (gogoproto.jsontag) = "write_target_value,omitempty" ];
}

// ClusterNetworkingConfigV2 contains cluster-wide networking configuration.
message ClusterNetworkingConfigV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a ClusterNetworkingConfig specification
    ClusterNetworkingConfigSpecV2 Spec = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ClusterNetworkingConfigSpecV2 is the actual data we care about
// for ClusterNetworkingConfig.
message ClusterNetworkingConfigSpecV2 {
    // ClientIdleTimeout sets global cluster default setting for client idle
    // timeouts.
    int64 ClientIdleTimeout = 1
        [ (gogoproto.jsontag) = "client_idle_timeout", (gogoproto.casttype) = "Duration" ];

    // KeepAliveInterval is the interval at which the server sends keep-alive messsages
    // to the client.
    int64 KeepAliveInterval = 2
        [ (gogoproto.jsontag) = "keep_alive_interval", (gogoproto.casttype) = "Duration" ];

    // KeepAliveCountMax is the number of keep-alive messages that can be
    // missed before the server disconnects the connection to the client.
    int64 KeepAliveCountMax = 3 [ (gogoproto.jsontag) = "keep_alive_count_max" ];

    // SessionControlTimeout is the session control lease expiry and defines
    // the upper limit of how long a node may be out of contact with the auth
    // server before it begins terminating controlled sessions.
    int64 SessionControlTimeout = 4
        [ (gogoproto.jsontag) = "session_control_timeout", (gogoproto.casttype) = "Duration" ];
}

// SessionRecordingConfigV2 contains session recording configuration.
message SessionRecordingConfigV2 {
    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a SessionRecordingConfig specification
    SessionRecordingConfigSpecV2 Spec = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// SessionRecordingConfigSpecV2 is the actual data we care about
// for SessionRecordingConfig.
message SessionRecordingConfigSpecV2 {
    // Mode controls where (or if) the session is recorded.
    string Mode = 1 [ (gogoproto.jsontag) = "mode" ];

    // ProxyChecksHostKeys is used to control if the proxy will check host keys
    // when in recording mode.
    BoolValue ProxyChecksHostKeys = 2 [
        (gogoproto.nullable) = true,
        (gogoproto.jsontag) = "proxy_checks_host_keys",
        (gogoproto.customtype) = "BoolOption"
    ];
}

// LegacySessionRecordingConfigSpec facilitates a backward compatible transition
// from ClusterConfig to standalone SessionRecordingConfig.
// SessionRecordingConfigSpecV2 itself is not usable for this purpose because
// of different jsontags.
// DELETE IN 8.0.0
message LegacySessionRecordingConfigSpec {
    string Mode = 1 [ (gogoproto.jsontag) = "session_recording" ];
    string ProxyChecksHostKeys = 2 [ (gogoproto.jsontag) = "proxy_checks_host_keys" ];
}

// AuthPreferenceV2 implements the AuthPreference interface.
message AuthPreferenceV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an AuthPreference specification
    AuthPreferenceSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// AuthPreferenceSpecV2 is the actual data we care about for AuthPreference.
message AuthPreferenceSpecV2 {
    // Type is the type of authentication.
    string Type = 1 [ (gogoproto.jsontag) = "type" ];

    // SecondFactor is the type of second factor.
    string SecondFactor = 2 [
        (gogoproto.jsontag) = "second_factor,omitempty",
        (gogoproto.casttype) = "github.com/gravitational/teleport/api/constants.SecondFactorType"
    ];

    // ConnectorName is the name of the OIDC or SAML connector. If this value is
    // not set the first connector in the backend will be used.
    string ConnectorName = 3 [ (gogoproto.jsontag) = "connector_name,omitempty" ];

    // U2F are the settings for the U2F device.
    U2F U2F = 4 [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "u2f,omitempty" ];

    // RequireSessionMFA causes all sessions in this cluster to require MFA
    // checks.
    bool RequireSessionMFA = 5 [ (gogoproto.jsontag) = "require_session_mfa,omitempty" ];
}

// U2F defines settings for U2F device.
message U2F {
    // AppID returns the application ID for universal second factor.
    string AppID = 1 [ (gogoproto.jsontag) = "app_id,omitempty" ];

    // Facets returns the facets for universal second factor.
    repeated string Facets = 2 [ (gogoproto.jsontag) = "facets,omitempty" ];

    // DeviceAttestationCAs contains the trusted attestation CAs for U2F
    // devices.
    repeated string DeviceAttestationCAs = 3
        [ (gogoproto.jsontag) = "device_attestation_cas,omitempty" ];
}

// Namespace represents namespace resource specification
message Namespace {
    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a namespace spec
    NamespaceSpec Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// NamespaceSpec is a namespace specificateion
message NamespaceSpec {}

message ResetPasswordTokenV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is ResetPasswordToken metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an ResetPasswordToken specification
    ResetPasswordTokenSpecV3 Spec = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

message ResetPasswordTokenSpecV3 {
    // User is user name associated with this token
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // URL is this token URL
    string URL = 2 [ (gogoproto.jsontag) = "url" ];
    // Created holds information about when the token was created
    google.protobuf.Timestamp Created = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "created,omitempty"
    ];
}

message ResetPasswordTokenSecretsV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is ResetPasswordTokenSecrets metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an ResetPasswordTokenSecrets specification
    ResetPasswordTokenSecretsSpecV3 Spec = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

message ResetPasswordTokenSecretsSpecV3 {
    // OTPKey is is a secret value of one time password secret generator
    string OTPKey = 1 [ (gogoproto.jsontag) = "opt_key" ];
    // OTPKey is is a secret value of one time password secret generator
    string QRCode = 2 [ (gogoproto.jsontag) = "qr_code,omitempty" ];
    // Created holds information about when the token was created
    google.protobuf.Timestamp Created = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "created,omitempty"
    ];
}

// AccessRequest represents an access request resource specification
message AccessRequestV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is AccessRequest metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an AccessRequest specification
    AccessRequestSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// AccessReviewThreshold describes a filter used to match access reviews,
// as well as approval/denial counts which trigger state-transitions.  This type
// can be used to describe policies such as "can be approved by 2 admins"
// or "can be denied by any non-contractor".
message AccessReviewThreshold {
    // Name is the optional human-readable name of the threshold.
    string Name = 1 [ (gogoproto.jsontag) = "name,omitempty" ];
    // Filter is an optional predicate used to determine which reviews
    // count toward this threshold.
    string Filter = 2 [ (gogoproto.jsontag) = "filter,omitempty" ];
    // Approve is the number of matching approvals needed for state-transition.
    uint32 Approve = 3 [ (gogoproto.jsontag) = "approve,omitempty" ];
    // Deny is the number of denials needed for state-transition.
    uint32 Deny = 4 [ (gogoproto.jsontag) = "deny,omitempty" ];
}

// AccessReview is a review to be applied to an access request.
message AccessReview {
    // Author is the teleport username of the review author.
    string Author = 1 [ (gogoproto.jsontag) = "author" ];
    // Roles is a list used for role-subselection (not yet fully supported).
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles,omitempty" ];
    // ProposedState is the proposed state (must be APPROVED or DENIED).
    RequestState ProposedState = 3 [ (gogoproto.jsontag) = "proposed_state,omitempty" ];
    // Reason is an optional human-readable reason for why the above state
    // is being proposed.
    string Reason = 4 [ (gogoproto.jsontag) = "reason,omitempty" ];
    // Created is the time at which the review was created.
    google.protobuf.Timestamp Created = 5 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "created,omitempty"
    ];
    // Annotations is the proposed value of the request's resolve_annotations field.
    wrappers.LabelValues Annotations = 6 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];

    // ThresholdIndexes stores the indexes of thresholds which this review matches
    // (internal use only).
    repeated uint32 ThresholdIndexes = 7 [ (gogoproto.jsontag) = "i,omitempty" ];
}

// AccessReviewSubmission encodes the necessary parameters for submitting
// a new access review.
message AccessReviewSubmission {
    // RequestID is the unique ID of the request to be reviewed.
    string RequestID = 1 [ (gogoproto.jsontag) = "id,omitempty" ];

    // Review is the review to be applied.
    AccessReview Review = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "review,omitempty" ];
}

// RequestState represents the state of a request for escalated privilege.
enum RequestState {
    // NONE variant exists to allow RequestState to be explicitly omitted
    // in certain circumstances (e.g. in an AccessRequestFilter).
    NONE = 0;
    // PENDING variant is the default for newly created requests.
    PENDING = 1;
    // APPROVED variant indicates that a request has been accepted by
    // an administrating party.
    APPROVED = 2;
    // DENIED variant indicates that a request has been rejected by
    // an administrating party.
    DENIED = 3;
}

// ThresholdIndexSet encodes a list of threshold indexes. One of the listed thresholds
// must pass for the set to be considered to have passed (i.e. this is an `or` operator).
message ThresholdIndexSet {
    // Indexes are the indexes of thresholds which relate to the role.
    repeated uint32 Indexes = 1 [ (gogoproto.jsontag) = "i,omitempty" ];
}

// ThresholdIndexSets is a list of threshold index sets.  Each of the individual
// sets must pass (i.e. this is an `and` operator).
message ThresholdIndexSets {
    // Sets are the sets that make up this group.
    repeated ThresholdIndexSet Sets = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "s,omitempty" ];
}

// AccessRequestSpec is the specification for AccessRequest
message AccessRequestSpecV3 {
    // User is the name of the user to whom the roles will be applied.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // Roles is the name of the roles being requested.
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles" ];
    // State is the current state of this access request.
    RequestState State = 3 [ (gogoproto.jsontag) = "state,omitempty" ];
    // Created encodes the time at which the request was registered with the auth
    // server.
    google.protobuf.Timestamp Created = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "created,omitempty"
    ];
    // Expires constrains the maximum lifetime of any login session for which this
    // request is active.
    google.protobuf.Timestamp Expires = 5 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires,omitempty"
    ];

    // RequestReason is an optional message explaining the reason for the request.
    string RequestReason = 6 [ (gogoproto.jsontag) = "request_reason,omitempty" ];

    // ResolveReason is an optional message explaining the reason for the resolution
    // of the request (approval, denail, etc...).
    string ResolveReason = 7 [ (gogoproto.jsontag) = "resolve_reason,omitempty" ];

    // ResolveAnnotations is a set of arbitrary values received from plugins or other
    // resolving parties during approval/denial.  Importantly, these annotations are
    // included in the access_request.update event, allowing plugins to propagate
    // arbitrary structured data to the audit log.
    wrappers.LabelValues ResolveAnnotations = 8 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "resolve_annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];

    // SystemAnnotations is a set of programmatically generated annotations attached
    // to pending access requests by teleport.  These annotations are generated by
    // applying variable interpolation to the RoleConditions.Request.Annotations block
    // of a user's role(s).  These annotations serve as a mechanism for administrators
    // to pass extra information to plugins when they process pending access requests.
    wrappers.LabelValues SystemAnnotations = 9 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "system_annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];

    // Thresholds is a list of review thresholds relevant to this request.  Order must be
    // preserved, as thresholds are referenced by index (internal use only).
    repeated AccessReviewThreshold Thresholds = 10
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "thresholds,omitempty" ];

    // RoleThresholdMapping encodes the relationship between the requested roles and
    // the review threshold requirements for the given role (internal use only).
    // By storing a representation of which thresholds must pass for each requested role, we
    // both eliminate the need to cache the requestor's roles directly, and allow future
    // versions of teleport to become smarter about calculating more granular requirements
    // in a backwards-compatible manner (i.e. calculation can become smarter in minor releases).
    // Storing this relationship on the request is necessary in order to avoid unexpected or
    // inconsistent behavior due to review submission timing.
    map<string, ThresholdIndexSets> RoleThresholdMapping = 11
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "rtm,omitempty" ];

    // Reviews is a list of reviews applied to this request (internal use only).
    repeated AccessReview Reviews = 12
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "reviews,omitempty" ];

    // SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but
    // that is not a requirement.
    repeated string SuggestedReviewers = 13
        [ (gogoproto.jsontag) = "suggested_reviewers,omitempty" ];
}

// AccessRequestFilter encodes filter params for access requests.
message AccessRequestFilter {
    // ID specifies a request ID if set.
    string ID = 1 [ (gogoproto.jsontag) = "id,omitempty" ];
    // User specifies a username if set.
    string User = 2 [ (gogoproto.jsontag) = "user,omitempty" ];
    // RequestState filters for requests in a specific state.
    RequestState State = 3 [ (gogoproto.jsontag) = "state,omitempty" ];
}

// AccessCapabilities is a summary of capabilities that a user
// is granted via their dynamic access privileges which may not be
// calculable by directly examining the user's own static roles.
message AccessCapabilities {
    // RequestableRoles is a list of existent roles which the user is allowed to request.
    repeated string RequestableRoles = 1 [ (gogoproto.jsontag) = "requestable_roles,omitempty" ];
    // SuggestedReviewers is a list of all reviewers which are suggested by the user's roles.
    repeated string SuggestedReviewers = 2
        [ (gogoproto.jsontag) = "suggested_reviewers,omitempty" ];
}

// AccessCapabilitiesRequest encodes parameters for the GetAccessCapabilities method.
message AccessCapabilitiesRequest {
    // User is the name of the user whose capabilities we are interested in (defaults to
    // the caller's own username).
    string User = 1 [ (gogoproto.jsontag) = "user,omitempty" ];
    // RequestableRoles is a flag indicating that we would like to view the list of roles
    // that the user is able to request.
    bool RequestableRoles = 2 [ (gogoproto.jsontag) = "requestable_roles,omitempty" ];
    // SuggestedReviewers is a flag indicating that we would like to view the list of all
    // reviewers which are suggested by the user's roles.
    bool SuggestedReviewers = 3 [ (gogoproto.jsontag) = "suggested_reviewers,omitempty" ];
}

// PluginData stores a collection of values associated with a specific resource.
message PluginDataV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is PluginData metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a PluginData specification
    PluginDataSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// PluginDataEntry wraps a mapping of arbitrary string values used by
// plugins to store per-resource information.
message PluginDataEntry {
    // Data is a mapping of arbitrary string values.
    map<string, string> Data = 1 [ (gogoproto.jsontag) = "data,omitempty" ];
}

// PluginData stores a collection of values associated with a specific resource.
message PluginDataSpecV3 {
    // Entries is a collection of PluginData values organized by plugin name.
    map<string, PluginDataEntry> Entries = 1 [ (gogoproto.jsontag) = "entries" ];
}

// NOTE: PluginDataFilter and PluginDataUpdateParams currently only target AccessRequest resources
// since those are the only resources currently managed via plugin.  Support for additional resource
// kinds may be added in a backwards-compatible manner by adding a `Kind` field which defaults
// to `access_request` if unspecified.

// PluginDataFilter encodes filter params for plugin data.
message PluginDataFilter {
    // Kind is the kind of resource that the target plugin data
    // is associated with.
    string Kind = 1 [ (gogoproto.jsontag) = "kind,omitempty" ];
    // Resource matches a specific resource name if set.
    string Resource = 2 [ (gogoproto.jsontag) = "resource,omitempty" ];
    // Plugin matches a specific plugin name if set.
    string Plugin = 3 [ (gogoproto.jsontag) = "plugin,omitempty" ];
}

// PluginDataUpdateParams encodes paramers for updating a PluginData field.
message PluginDataUpdateParams {
    // Kind is the kind of resource that the target plugin data
    // is associated with.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // Resource indicates the name of the target resource.
    string Resource = 2 [ (gogoproto.jsontag) = "resource" ];
    // Plugin is the name of the plugin that owns the data.
    string Plugin = 3 [ (gogoproto.jsontag) = "plugin" ];
    // Set indicates the fields which should be set by this operation.
    map<string, string> Set = 4 [ (gogoproto.jsontag) = "set,omitempty" ];
    // Expect optionally indicates the expected state of fields prior to this update.
    map<string, string> Expect = 5 [ (gogoproto.jsontag) = "expect,omitempty" ];
}

// RoleV3 represents role resource specification
message RoleV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a role specification
    RoleSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// RoleSpecV3 is role specification for RoleV3.
message RoleSpecV3 {
    // Options is for OpenSSH options like agent forwarding.
    RoleOptions Options = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "options,omitempty" ];
    // Allow is the set of conditions evaluated to grant access.
    RoleConditions Allow = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "allow,omitempty" ];
    // Deny is the set of conditions evaluated to deny access. Deny takes priority
    // over allow.
    RoleConditions Deny = 3
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "deny,omitempty" ];
}

// RoleOptions is a set of role options
message RoleOptions {
    // ForwardAgent is SSH agent forwarding.
    bool ForwardAgent = 1 [ (gogoproto.jsontag) = "forward_agent", (gogoproto.casttype) = "Bool" ];

    // MaxSessionTTL defines how long a SSH session can last for.
    int64 MaxSessionTTL = 2
        [ (gogoproto.jsontag) = "max_session_ttl,omitempty", (gogoproto.casttype) = "Duration" ];

    // PortForwarding defines if the certificate will have
    // "permit-port-forwarding"
    // in the certificate. PortForwarding is "yes" if not set,
    // that's why this is a pointer
    BoolValue PortForwarding = 3 [
        (gogoproto.nullable) = true,
        (gogoproto.jsontag) = "port_forwarding,omitempty",
        (gogoproto.customtype) = "BoolOption"
    ];

    // CertificateFormat defines the format of the user certificate to allow
    // compatibility with older versions of OpenSSH.
    string CertificateFormat = 4 [ (gogoproto.jsontag) = "cert_format" ];

    // ClientIdleTimeout sets disconnect clients on idle timeout behavior,
    // if set to 0 means do not disconnect, otherwise is set to the idle
    // duration.
    int64 ClientIdleTimeout = 5 [
        (gogoproto.jsontag) = "client_idle_timeout,omitempty",
        (gogoproto.casttype) = "Duration"
    ];

    // DisconnectExpiredCert sets disconnect clients on expired certificates.
    bool DisconnectExpiredCert = 6 [
        (gogoproto.nullable) = true,
        (gogoproto.jsontag) = "disconnect_expired_cert,omitempty",
        (gogoproto.casttype) = "Bool"
    ];

    // BPF defines what events to record for the BPF-based session recorder.
    repeated string BPF = 7 [ (gogoproto.jsontag) = "enhanced_recording,omitempty" ];

    // PermitX11Forwarding authorizes use of X11 forwarding.
    bool PermitX11Forwarding = 8 [
        (gogoproto.nullable) = true,
        (gogoproto.jsontag) = "permit_x11_forwarding,omitempty",
        (gogoproto.casttype) = "Bool"
    ];

    // MaxConnections defines the maximum number of
    // concurrent connections a user may hold.
    int64 MaxConnections = 9 [ (gogoproto.jsontag) = "max_connections,omitempty" ];

    // MaxSessions defines the maximum number of
    // concurrent sessions per connection.
    int64 MaxSessions = 10 [ (gogoproto.jsontag) = "max_sessions,omitempty" ];

    // RequestAccess defines the access request stategy (optional|note|always)
    // where optional is the default.
    string RequestAccess = 11 [
        (gogoproto.jsontag) = "request_access,omitempty",
        (gogoproto.casttype) = "RequestStrategy"
    ];

    // RequestPrompt is an optional message which tells users what they aught to
    string RequestPrompt = 12 [ (gogoproto.jsontag) = "request_prompt,omitempty" ];

    // RequireSessionMFA specifies whether a user is required to do an MFA
    // check for every session.
    bool RequireSessionMFA = 13 [ (gogoproto.jsontag) = "require_session_mfa,omitempty" ];
}

// RoleConditions is a set of conditions that must all match to be allowed or
// denied access.
message RoleConditions {
    // Logins is a list of *nix system logins.
    repeated string Logins = 1 [ (gogoproto.jsontag) = "logins,omitempty" ];

    // Namespaces is a list of namespaces (used to partition a cluster). The
    // field should be called "namespaces" when it returns in Teleport 2.4.
    repeated string Namespaces = 2 [ (gogoproto.jsontag) = "-" ];

    // NodeLabels is a map of node labels (used to dynamically grant access to
    // nodes).
    wrappers.LabelValues NodeLabels = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "node_labels,omitempty",
        (gogoproto.customtype) = "Labels"
    ];

    // Rules is a list of rules and their access levels. Rules are a high level
    // construct used for access control.
    repeated Rule Rules = 4
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "rules,omitempty" ];

    // KubeGroups is a list of kubernetes groups
    repeated string KubeGroups = 5 [ (gogoproto.jsontag) = "kubernetes_groups,omitempty" ];

    AccessRequestConditions Request = 6 [ (gogoproto.jsontag) = "request,omitempty" ];

    // KubeUsers is an optional kubernetes users to impersonate
    repeated string KubeUsers = 7 [ (gogoproto.jsontag) = "kubernetes_users,omitempty" ];

    // AppLabels is a map of labels used as part of the RBAC system.
    wrappers.LabelValues AppLabels = 8 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "app_labels,omitempty",
        (gogoproto.customtype) = "Labels"
    ];

    // ClusterLabels is a map of node labels (used to dynamically grant access to
    // clusters).
    wrappers.LabelValues ClusterLabels = 9 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "cluster_labels,omitempty",
        (gogoproto.customtype) = "Labels"
    ];

    // KubernetesLabels is a map of kubernetes cluster labels used for RBAC.
    wrappers.LabelValues KubernetesLabels = 10 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "kubernetes_labels,omitempty",
        (gogoproto.customtype) = "Labels"
    ];

    // DatabaseLabels are used in RBAC system to allow/deny access to databases.
    wrappers.LabelValues DatabaseLabels = 11 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "db_labels,omitempty",
        (gogoproto.customtype) = "Labels"
    ];

    // DatabaseNames is a list of database names this role is allowed to connect to.
    repeated string DatabaseNames = 12 [ (gogoproto.jsontag) = "db_names,omitempty" ];
    // DatabaseUsers is a list of databaes users this role is allowed to connect as.
    repeated string DatabaseUsers = 13 [ (gogoproto.jsontag) = "db_users,omitempty" ];

    // Impersonate specifies what users and roles this role is allowed to impersonate
    // by issuing certificates or other possible means.
    ImpersonateConditions Impersonate = 14 [ (gogoproto.jsontag) = "impersonate,omitempty" ];

    // ReviewRequests defines conditions for submitting access reviews.
    AccessReviewConditions ReviewRequests = 15
        [ (gogoproto.jsontag) = "review_requests,omitempty" ];
}

// AccessRequestConditions is a matcher for allow/deny restrictions on
// access-requests.
message AccessRequestConditions {
    // Roles is the name of roles which will match the request rule.
    repeated string Roles = 1 [ (gogoproto.jsontag) = "roles,omitempty" ];

    // ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    repeated ClaimMapping ClaimsToRoles = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "claims_to_roles,omitempty" ];

    // Annotations is a collection of annotations to be programmatically
    // appended to pending access requests at the time of their creation.
    // These annotations serve as a mechanism to propagate extra information
    // to plugins.  Since these annotations support variable interpolation
    // syntax, they also offer a mechanism for forwarding claims from an
    // external identity provider, to a plugin via `{{external.trait_name}}`
    // style substitutions.
    wrappers.LabelValues Annotations = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "annotations,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];

    // Thresholds is a list of thresholds, one of which must be met in order for reviews
    // to trigger a state-transition.  If no thresholds are provided, a default threshold
    // of 1 for approval and denial is used.
    repeated AccessReviewThreshold Thresholds = 4
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "thresholds,omitempty" ];

    // SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but
    // that is not a requirement.
    repeated string SuggestedReviewers = 5
        [ (gogoproto.jsontag) = "suggested_reviewers,omitempty" ];
}

// AccessReviewConditions is a matcher for allow/deny restrictions on
// access reviews.
message AccessReviewConditions {
    // Roles is the name of roles which may be reviewed.
    repeated string Roles = 1 [ (gogoproto.jsontag) = "roles,omitempty" ];

    // ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
    repeated ClaimMapping ClaimsToRoles = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "claims_to_roles,omitempty" ];

    // Where is an optional predicate which further limits which requests are
    // reviewable.
    string Where = 3 [ (gogoproto.jsontag) = "where,omitempty" ];
}

// ClaimMapping maps a claim to teleport roles.
message ClaimMapping {
    // Claim is a claim name.
    string Claim = 1 [ (gogoproto.jsontag) = "claim" ];
    // Value is a claim value to match.
    string Value = 2 [ (gogoproto.jsontag) = "value" ];
    // Roles is a list of static teleport roles to match.
    repeated string Roles = 3 [ (gogoproto.jsontag) = "roles,omitempty" ];
}

// Rule represents allow or deny rule that is executed to check
// if user or service have access to resource
message Rule {
    // Resources is a list of resources
    repeated string Resources = 1 [ (gogoproto.jsontag) = "resources,omitempty" ];
    // Verbs is a list of verbs
    repeated string Verbs = 2 [ (gogoproto.jsontag) = "verbs,omitempty" ];
    // Where specifies optional advanced matcher
    string Where = 3 [ (gogoproto.jsontag) = "where,omitempty" ];
    // Actions specifies optional actions taken when this rule matches
    repeated string Actions = 4 [ (gogoproto.jsontag) = "actions,omitempty" ];
}

// ImpersonateConditions specifies whether users are allowed
// to issue certificates for other users or groups.
message ImpersonateConditions {
    // Users is a list of resources this role is allowed to impersonate,
    // could be an empty list or a Wildcard pattern
    repeated string Users = 1 [ (gogoproto.jsontag) = "users,omitempty" ];
    // Roles is a list of resources this role is allowed to impersonate
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles,omitempty" ];
    // Where specifies optional advanced matcher
    string Where = 3 [ (gogoproto.jsontag) = "where,omitempty" ];
}

// BoolValue is a wrapper around bool, used in cases
// whenever bool value can have different default value when missing
message BoolValue { bool Value = 1; }

// UserV2 is version 2 resource spec of the user
message UserV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a user specification
    UserSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// UserSpecV2 is a specification for V2 user
message UserSpecV2 {
    // OIDCIdentities lists associated OpenID Connect identities
    // that let user log in using externally verified identity
    repeated ExternalIdentity OIDCIdentities = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "oidc_identities,omitempty" ];

    // SAMLIdentities lists associated SAML identities
    // that let user log in using externally verified identity
    repeated ExternalIdentity SAMLIdentities = 2
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "saml_identities,omitempty" ];

    // GithubIdentities list associated Github OAuth2 identities
    // that let user log in using externally verified identity
    repeated ExternalIdentity GithubIdentities = 3
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "github_identities,omitempty" ];

    // Roles is a list of roles assigned to user
    repeated string Roles = 4 [ (gogoproto.jsontag) = "roles,omitempty" ];

    // Traits are key/value pairs received from an identity provider (through
    // OIDC claims or SAML assertions) or from a system administrator for local
    // accounts. Traits are used to populate role variables.
    wrappers.LabelValues Traits = 5 [
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "traits,omitempty",
        (gogoproto.customtype) = "github.com/gravitational/teleport/api/types/wrappers.Traits"
    ];

    // Status is a login status of the user
    LoginStatus Status = 6
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty" ];

    // Expires if set sets TTL on the user
    google.protobuf.Timestamp Expires = 7 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];

    // CreatedBy holds information about agent or person created this user
    CreatedBy CreatedBy = 8
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "created_by,omitempty" ];

    // LocalAuths hold sensitive data necessary for performing local
    // authentication
    LocalAuthSecrets LocalAuth = 9 [ (gogoproto.jsontag) = "local_auth,omitempty" ];
}

// ExternalIdentity is OpenID Connect/SAML or Github identity that is linked
// to particular user and connector and lets user to log in using external
// credentials, e.g. google
message ExternalIdentity {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'
    string ConnectorID = 1 [ (gogoproto.jsontag) = "connector_id,omitempty" ];

    // Username is username supplied by external identity provider
    string Username = 2 [ (gogoproto.jsontag) = "username,omitempty" ];
}

// LoginStatus is a login status of the user
message LoginStatus {
    // IsLocked tells us if user is locked
    bool IsLocked = 1 [ (gogoproto.jsontag) = "is_locked" ];
    // LockedMessage contains the message in case if user is locked
    string LockedMessage = 2 [ (gogoproto.jsontag) = "locked_message,omitempty" ];
    // LockedTime contains time when user was locked
    google.protobuf.Timestamp LockedTime = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "locked_time,omitempty"
    ];
    // LockExpires contains time when this lock will expire
    google.protobuf.Timestamp LockExpires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "lock_expires,omitempty"
    ];
}

// CreatedBy holds information about the person or agent who created the user
message CreatedBy {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Identity if present means that user was automatically created by identity
    ConnectorRef Connector = 1
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "connector,omitempty" ];
    // Time specifies when user was created
    google.protobuf.Timestamp Time = 2
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "time" ];
    // User holds information about user
    UserRef User = 3 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "user" ];
}

// U2FRegistrationData encodes the universal second factor registration payload.
message U2FRegistrationData {
    // Raw is the serialized registration data as received from the token
    bytes Raw = 1 [ (gogoproto.jsontag) = "raw" ];

    // KeyHandle uniquely identifies a key on a device
    bytes KeyHandle = 2 [ (gogoproto.jsontag) = "key_handle" ];

    // PubKey is an DER encoded ecdsa public key
    bytes PubKey = 3 [ (gogoproto.jsontag) = "pubkey" ];
}

// LocalAuthSecrets holds sensitive data used to authenticate a local user.
message LocalAuthSecrets {
    // PasswordHash encodes a combined salt & hash for password verification.
    bytes PasswordHash = 1 [ (gogoproto.jsontag) = "password_hash,omitempty" ];

    // Deprecated 2nd factor fields, use MFA below instead.
    string TOTPKey = 2 [ (gogoproto.jsontag) = "totp_key,omitempty" ];
    U2FRegistrationData U2FRegistration = 3 [ (gogoproto.jsontag) = "u2f_registration,omitempty" ];
    uint32 U2FCounter = 4 [ (gogoproto.jsontag) = "u2f_counter,omitempty" ];

    repeated MFADevice MFA = 5 [ (gogoproto.jsontag) = "mfa,omitempty" ];
}

// MFADevice is a multi-factor authentication device, such as a security key or
// an OTP app.
message MFADevice {
    // Boilerplate for implementing the Resource interface.
    string kind = 1;
    string sub_kind = 2;
    string version = 3;
    Metadata metadata = 4 [ (gogoproto.nullable) = false ];

    // ID is a UUID of this device.
    string id = 5;

    google.protobuf.Timestamp added_at = 6
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
    google.protobuf.Timestamp last_used = 7
        [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

    oneof device {
        TOTPDevice totp = 8;
        U2FDevice u2f = 9;
    }
}

// TOTPDevice holds the TOTP-specific fields of MFADevice.
message TOTPDevice { string key = 1; }

// U2FDevice holds the U2F-specific fields of MFADevice.
message U2FDevice {
    // KeyHandle uniquely identifies a key on a device
    bytes key_handle = 1;
    // PubKey is an DER encoded ecdsa public key
    bytes pub_key = 2;
    // Counter is the latest seen value of the U2F usage counter.
    uint32 counter = 3;
}

// ConnectorRef holds information about OIDC connector
message ConnectorRef {
    // Type is connector type
    string Type = 1 [ (gogoproto.jsontag) = "type" ];
    // ID is connector ID
    string ID = 2 [ (gogoproto.jsontag) = "id" ];
    // Identity is external identity of the user
    string Identity = 3 [ (gogoproto.jsontag) = "identity" ];
}

// UserRef holds references to user
message UserRef {
    // Name is name of the user
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// ReverseTunnelV2 is version 2 of the resource spec of the reverse tunnel
message ReverseTunnelV2 {
    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is a resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a reverse tunnel specification
    ReverseTunnelSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// ReverseTunnelSpecV2 is a specification for V2 reverse tunnel
message ReverseTunnelSpecV2 {
    // ClusterName is a domain name of remote cluster we are connecting to
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
    // DialAddrs is a list of remote address to establish a connection to
    // it's always SSH over TCP
    repeated string DialAddrs = 2 [ (gogoproto.jsontag) = "dial_addrs,omitempty" ];
    // Type is the type of reverse tunnel, either proxy or node.
    string Type = 3 [ (gogoproto.jsontag) = "type", (gogoproto.casttype) = "TunnelType" ];
}

// TunnelConnectionV2 is version 2 of the resource spec of the tunnel connection
message TunnelConnectionV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is a resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a tunnel specification
    TunnelConnectionSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// TunnelConnectionSpecV2 is a specification for V2 tunnel connection
message TunnelConnectionSpecV2 {
    // ClusterName is a name of the cluster
    string ClusterName = 1 [ (gogoproto.jsontag) = "cluster_name" ];
    // ProxyName is the name of the proxy server
    string ProxyName = 2 [ (gogoproto.jsontag) = "proxy_name" ];
    // LastHeartbeat is a time of the last heartbeat
    google.protobuf.Timestamp LastHeartbeat = 3 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "last_heartbeat,omitempty"
    ];
    // Type is the type of reverse tunnel, either proxy or node.
    string Type = 4 [ (gogoproto.jsontag) = "type", (gogoproto.casttype) = "TunnelType" ];
}

// SemaphoreFilter encodes semaphore filtering params.
// A semaphore filter matches a semaphore if all nonzero fields
// match the corresponding semaphore fileds (e.g. a filter which
// specifies only `kind=foo` would match all semaphores of
// kind `foo`).
message SemaphoreFilter {
    // SemaphoreKind is the kind of the semaphore.
    string SemaphoreKind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SemaphoreName is the name of the semaphore.
    string SemaphoreName = 2 [ (gogoproto.jsontag) = "name" ];
}

// AcquireSemaphoreRequest holds semaphore lease acquisition parameters.
message AcquireSemaphoreRequest {
    // SemaphoreKind is the kind of the semaphore.
    string SemaphoreKind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SemaphoreName is the name of the semaphore.
    string SemaphoreName = 2 [ (gogoproto.jsontag) = "name" ];
    // MaxLeases is the maximum number of concurrent leases.  If acquisition
    // would cause more than MaxLeases to exist, acquisition must fail.
    int64 MaxLeases = 3 [ (gogoproto.jsontag) = "max_resources" ];
    // Expires is the time at which this lease expires.
    google.protobuf.Timestamp Expires = 4 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
    // Holder identifies the entitiy holding the lease.
    string Holder = 5 [ (gogoproto.jsontag) = "holder" ];
}

// SemaphoreLease represents lease acquired for semaphore
message SemaphoreLease {
    // SemaphoreKind is the kind of the semaphore.
    string SemaphoreKind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SemaphoreName is the name of the semaphore.
    string SemaphoreName = 2 [ (gogoproto.jsontag) = "name" ];
    // LeaseID uniquely identifies this lease.
    string LeaseID = 3 [ (gogoproto.jsontag) = "lease_id" ];
    // Expires is the time at which this lease expires.
    google.protobuf.Timestamp Expires = 5 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
}

// SemaphoreLeaseRef identifies an existent lease.
message SemaphoreLeaseRef {
    // LeaseID is the unique ID of the lease.
    string LeaseID = 1 [ (gogoproto.jsontag) = "lease_id" ];
    // Expires is the time at which the lease expires.
    google.protobuf.Timestamp Expires = 2 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
    // Holder identifies the lease holder.
    string Holder = 3 [ (gogoproto.jsontag) = "holder" ];
}

// SemaphoreV3 implements Semaphore interface
message SemaphoreV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is Semaphore metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a lease V3 spec
    SemaphoreSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// SemaphoreSpecV3 contains the data about lease
message SemaphoreSpecV3 {
    // Leases is a list of all currently acquired leases.
    repeated SemaphoreLeaseRef Leases = 1
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "leases" ];
}

// WebSessionV2 represents an application or UI web session.
message WebSessionV2 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is a resource metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a tunnel specification.
    WebSessionSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// WebSessionSpecV2 is a specification for web session.
message WebSessionSpecV2 {
    // User is the identity of the user to which the web session belongs.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // Pub is the SSH certificate for the user.
    bytes Pub = 2 [ (gogoproto.jsontag) = "pub" ];
    // Priv is the SSH private key for the user.
    bytes Priv = 3 [ (gogoproto.jsontag) = "priv,omitempty" ];
    // TLSCert is the TLS certificate for the user.
    bytes TLSCert = 4 [ (gogoproto.jsontag) = "tls_cert,omitempty" ];
    // BearerToken is a token that is paired with the session cookie for
    // authentication. It is periodically rotated so a stolen cookie itself
    // is not enough to steal a session. In addition it is used for CSRF
    // mitigation.
    string BearerToken = 5 [ (gogoproto.jsontag) = "bearer_token" ];
    // BearerTokenExpires is the absolute time when the token expires.
    google.protobuf.Timestamp BearerTokenExpires = 6 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "bearer_token_expires"
    ];
    // Expires is the absolute time when the session expires.
    google.protobuf.Timestamp Expires = 7 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "expires"
    ];
    // LoginTime is the time this user recently logged in.
    google.protobuf.Timestamp LoginTime = 8 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "login_time"
    ];
}

// WebSessionFilter encodes cache watch parameters for filtering web sessions.
message WebSessionFilter {
    // User is the username to filter web sessions for.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
}

// RemoteClusterV3 represents remote cluster resource specification
message RemoteClusterV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is resource API version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];

    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Status is a remote cluster status
    RemoteClusterStatusV3 Status = 5
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "status" ];
}

// RemoteClusterStatusV3 represents status of the remote cluster
message RemoteClusterStatusV3 {
    // Connection represents connection status, online or offline
    string Connection = 1 [ (gogoproto.jsontag) = "connection" ];

    // LastHeartbeat records last heartbeat of the cluster
    google.protobuf.Timestamp LastHeartbeat = 2 [
        (gogoproto.stdtime) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = "last_heartbeat"
    ];
}

// KubernetesCluster is a named kubernetes API endpoint handled by a Server.
message KubernetesCluster {
    // Name is the name of this kubernetes cluster.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];

    // StaticLabels is map of static labels associated with this cluster.
    // Used for RBAC.
    map<string, string> StaticLabels = 2 [ (gogoproto.jsontag) = "static_labels,omitempty" ];
    // DynamicLabels is map of dynamic labels associated with this cluster.
    // Used for RBAC.
    map<string, CommandLabelV2> DynamicLabels = 3
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "dynamic_labels,omitempty" ];
}

// WebTokenV3 describes a web token. Web tokens are used as a transport to relay bearer tokens
// to the client.
// Initially bound to a web session, these have been factored out into a separate resource to
// enable separate lifecycle management.
message WebTokenV3 {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.stringer) = false;

    // Kind is a resource kind
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is the resource version
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata is resource metadata
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec defines the web token
    WebTokenSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// WebTokenSpecV3 is a unique time-limited token bound to a user's web session
message WebTokenSpecV3 {
    // User specifies the user the token is bound to.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // Token specifies the token's value.
    string Token = 2 [ (gogoproto.jsontag) = "token" ];
}

// GetWebSessionRequest describes a request to query a web session
message GetWebSessionRequest {
    // User specifies the user the web session is for.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // SessionID specifies the web session ID.
    string SessionID = 2 [ (gogoproto.jsontag) = "session_id" ];
}

// DeleteWebSessionRequest describes a request to delete a web session
message DeleteWebSessionRequest {
    // User specifies the user the session is bound to
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // SessionID specifies the web session ID to delete.
    string SessionID = 2 [ (gogoproto.jsontag) = "session_id" ];
}

// GetWebTokenRequest describes a request to query a web token
message GetWebTokenRequest {
    // User specifies the user the token is for.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // Token specifies the token to get.
    string Token = 2 [ (gogoproto.jsontag) = "token" ];
}

// DeleteWebTokenRequest describes a request to delete a web token
message DeleteWebTokenRequest {
    // User specifies the user the token is for.
    string User = 1 [ (gogoproto.jsontag) = "user" ];
    // Token specifies the token to delete.
    string Token = 2 [ (gogoproto.jsontag) = "token" ];
}

// ResourceRequest is a request relating to a named resource.
message ResourceRequest {
    // Name is the name of the resource.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
}

// ResourceWithSecretsRequest is a request relating to a named resource with secrets.
message ResourceWithSecretsRequest {
    // Name is the name of the resource.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 2 [ (gogoproto.jsontag) = "with_secrets,omitempty" ];
}

// ResourcesWithSecretsRequest is a request relating to resources with secrets.
message ResourcesWithSecretsRequest {
    // WithSecrets specifies whether to load associated secrets.
    bool WithSecrets = 1 [ (gogoproto.jsontag) = "with_secrets,omitempty" ];
}

// ResourcesInNamespaceRequest is a request relating to a named resource in the given namespace.
message ResourceInNamespaceRequest {
    // Name is the name of the resource.
    string Name = 1;
    // Namespace is the namespace of resources.
    string Namespace = 2;
}

// ResourcesInNamespaceRequest is a request relating to resources in the given namespace.
message ResourcesInNamespaceRequest {
    // Namespace is the namespace of resources.
    string Namespace = 1;
}

// OIDCConnectorV2 represents an OIDC connector.
message OIDCConnectorV2 {
    // Kind is a resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata holds resource metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an OIDC connector specification.
    OIDCConnectorSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// OIDCConnectorV2List is a list of OIDC connectors.
message OIDCConnectorV2List {
    // OIDCConnectors is a list of OIDC connectors.
    repeated OIDCConnectorV2 OIDCConnectors = 1;
}

// OIDCConnectorSpecV2 is an OIDC connector specification.
//
// It specifies configuration for Open ID Connect compatible external
// identity provider: https://openid.net/specs/openid-connect-core-1_0.html
message OIDCConnectorSpecV2 {
    // IssuerURL is the endpoint of the provider, e.g. https://accounts.google.com.
    string IssuerURL = 1 [ (gogoproto.jsontag) = "issuer_url" ];
    // ClientID is the id of the authentication client (Teleport Auth server).
    string ClientID = 2 [ (gogoproto.jsontag) = "client_id" ];
    // ClientSecret is used to authenticate the client.
    string ClientSecret = 3 [ (gogoproto.jsontag) = "client_secret" ];
    // RedirectURL is a URL that will redirect the client's browser
    // back to the identity provider after successful authentication.
    // This should match the URL on the Provider's side.
    string RedirectURL = 4 [ (gogoproto.jsontag) = "redirect_url" ];
    // ACR is an Authentication Context Class Reference value. The meaning of the ACR
    // value is context-specific and varies for identity providers.
    string ACR = 5 [ (gogoproto.jsontag) = "acr_values,omitempty" ];
    // Provider is the external identity provider.
    string Provider = 6 [ (gogoproto.jsontag) = "provider,omitempty" ];
    // Display is the friendly name for this provider.
    string Display = 7 [ (gogoproto.jsontag) = "display,omitempty" ];
    // Scope specifies additional scopes set by provider.
    repeated string Scope = 8 [ (gogoproto.jsontag) = "scope,omitempty" ];
    // Prompt is an optional OIDC prompt. An empty string omits prompt.
    // If not specified, it defaults to select_account for backwards compatibility.
    string Prompt = 9 [ (gogoproto.jsontag) = "prompt,omitempty" ];
    // ClaimsToRoles specifies a dynamic mapping from claims to roles.
    repeated ClaimMapping ClaimsToRoles = 10
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "claims_to_roles,omitempty" ];
    // GoogleServiceAccountURI is a path to a google service account uri.
    string GoogleServiceAccountURI = 11
        [ (gogoproto.jsontag) = "google_service_account_uri,omitempty" ];
    // GoogleServiceAccount is a string containing google service account credentials.
    string GoogleServiceAccount = 12 [ (gogoproto.jsontag) = "google_service_account,omitempty" ];
    // GoogleAdminEmail is the email of a google admin to impersonate.
    string GoogleAdminEmail = 13 [ (gogoproto.jsontag) = "google_admin_email,omitempty" ];
}

// SAMLConnectorV2 represents a SAML connector.
message SAMLConnectorV2 {
    // Kind is a resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata holds resource metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an SAML connector specification.
    SAMLConnectorSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// SAMLConnectorV2List is a list of SAML connectors.
message SAMLConnectorV2List {
    // SAMLConnectors is a list of SAML connectors.
    repeated SAMLConnectorV2 SAMLConnectors = 1;
}

// SAMLConnectorSpecV2 is a SAML connector specification.
message SAMLConnectorSpecV2 {
    // Issuer is the identity provider issuer.
    string Issuer = 1 [ (gogoproto.jsontag) = "issuer" ];
    // SSO is the URL of the identity provider's SSO service.
    string SSO = 2 [ (gogoproto.jsontag) = "sso" ];
    // Cert is the identity provider certificate PEM.
    // IDP signs <Response> responses using this certificate.
    string Cert = 3 [ (gogoproto.jsontag) = "cert" ];
    // Display controls how this connector is displayed.
    string Display = 4 [ (gogoproto.jsontag) = "display" ];
    // AssertionConsumerService is a URL for assertion consumer service
    // on the service provider (Teleport's side).
    string AssertionConsumerService = 5 [ (gogoproto.jsontag) = "acs" ];
    // Audience uniquely identifies our service provider.
    string Audience = 6 [ (gogoproto.jsontag) = "audience" ];
    // ServiceProviderIssuer is the issuer of the service provider (Teleport).
    string ServiceProviderIssuer = 7 [ (gogoproto.jsontag) = "service_provider_issuer" ];
    // EntityDescriptor is XML with descriptor. It can be used to supply configuration
    // parameters in one XML file rather than supplying them in the individual elements.
    string EntityDescriptor = 8 [ (gogoproto.jsontag) = "entity_descriptor" ];
    // EntityDescriptorURL is a URL that supplies a configuration XML.
    string EntityDescriptorURL = 9 [ (gogoproto.jsontag) = "entity_descriptor_url" ];
    // AttributesToRoles is a list of mappings of attribute statements to roles.
    repeated AttributeMapping AttributesToRoles = 10
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "attributes_to_roles" ];
    // SigningKeyPair is an x509 key pair used to sign AuthnRequest.
    AsymmetricKeyPair SigningKeyPair = 11
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "signing_key_pair,omitempty" ];
    // Provider is the external identity provider.
    string Provider = 12 [ (gogoproto.jsontag) = "provider,omitempty" ];
    // EncryptionKeyPair is a key pair used for decrypting SAML assertions.
    AsymmetricKeyPair EncryptionKeyPair = 13
        [ (gogoproto.nullable) = true, (gogoproto.jsontag) = "assertion_key_pair,omitempty" ];
}

// AttributeMapping maps a SAML attribute statement to teleport roles.
message AttributeMapping {
    // Name is an attribute statement name.
    string Name = 1 [ (gogoproto.jsontag) = "name" ];
    // Value is an attribute statement value to match.
    string Value = 2 [ (gogoproto.jsontag) = "value" ];
    // Roles is a list of static teleport roles to map to.
    repeated string Roles = 3 [ (gogoproto.jsontag) = "roles,omitempty" ];
}

// AsymmetricKeyPair is a combination of a public certificate and
// private key that can be used for encryption and signing.
message AsymmetricKeyPair {
    // PrivateKey is a PEM encoded x509 private key.
    string PrivateKey = 1 [ (gogoproto.jsontag) = "private_key" ];
    // Cert is a PEM-encoded x509 certificate.
    string Cert = 2 [ (gogoproto.jsontag) = "cert" ];
}

// GithubConnectorV3 represents a Github connector.
message GithubConnectorV3 {
    // Kind is a resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata holds resource metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is an Github connector specification.
    GithubConnectorSpecV3 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// GithubConnectorV3List is a list of Github connectors.
message GithubConnectorV3List {
    // GithubConnectors is a list of Github connectors.
    repeated GithubConnectorV3 GithubConnectors = 1;
}

// GithubConnectorSpecV3 is a Github connector specification.
message GithubConnectorSpecV3 {
    // ClientID is the Github OAuth app client ID.
    string ClientID = 1 [ (gogoproto.jsontag) = "client_id" ];
    // ClientSecret is the Github OAuth app client secret.
    string ClientSecret = 2 [ (gogoproto.jsontag) = "client_secret" ];
    // RedirectURL is the authorization callback URL.
    string RedirectURL = 3 [ (gogoproto.jsontag) = "redirect_url" ];
    // TeamsToLogins maps Github team memberships onto allowed logins/roles.
    repeated TeamMapping TeamsToLogins = 4
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "teams_to_logins" ];
    // Display is the connector display name.
    string Display = 5 [ (gogoproto.jsontag) = "display" ];
}

// TeamMapping represents a single team membership mapping.
message TeamMapping {
    // Organization is a Github organization a user belongs to.
    string Organization = 1 [ (gogoproto.jsontag) = "organization" ];
    // Team is a team within the organization a user belongs to.
    string Team = 2 [ (gogoproto.jsontag) = "team" ];
    // Logins is a list of allowed logins for this org/team.
    repeated string Logins = 3 [ (gogoproto.jsontag) = "logins,omitempty" ];
    // KubeGroups is a list of allowed kubernetes groups for this org/team.
    repeated string KubeGroups = 4 [ (gogoproto.jsontag) = "kubernetes_groups,omitempty" ];
    // KubeUsers is a list of allowed kubernetes users to impersonate for this org/team.
    repeated string KubeUsers = 5 [ (gogoproto.jsontag) = "kubernetes_users,omitempty" ];
}

// TrustedClusterV2 represents a Trusted Cluster.
message TrustedClusterV2 {
    option (gogoproto.goproto_stringer) = false;
    // Kind is a resource kind.
    string Kind = 1 [ (gogoproto.jsontag) = "kind" ];
    // SubKind is an optional resource sub kind, used in some resources.
    string SubKind = 2 [ (gogoproto.jsontag) = "sub_kind,omitempty" ];
    // Version is a resource version.
    string Version = 3 [ (gogoproto.jsontag) = "version" ];
    // Metadata holds resource metadata.
    Metadata Metadata = 4 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "metadata" ];
    // Spec is a Trusted Cluster specification.
    TrustedClusterSpecV2 Spec = 5 [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "spec" ];
}

// TrustedClusterV2List is a list of trusted cluster.
message TrustedClusterV2List {
    // TrustedClusters is a list of trusted cluster.
    repeated TrustedClusterV2 TrustedClusters = 1;
}

// TrustedClusterSpecV2 is a Trusted Cluster specification.
message TrustedClusterSpecV2 {
    // Enabled is a bool that indicates if the TrustedCluster is enabled or disabled.
    // Setting Enabled to false has a side effect of deleting the user and host certificate
    // authority (CA).
    bool Enabled = 1 [ (gogoproto.jsontag) = "enabled" ];
    // Roles is a list of roles that users will be assuming when connecting to this cluster.
    repeated string Roles = 2 [ (gogoproto.jsontag) = "roles,omitempty" ];
    // Token is the authorization token provided by another cluster needed by this cluster to join.
    string Token = 3 [ (gogoproto.jsontag) = "token" ];
    // ProxyAddress is the address of the web proxy server of the cluster to join. If not set,
    // it is derived from <metadata.name>:<default web proxy server port>.
    string ProxyAddress = 4 [ (gogoproto.jsontag) = "web_proxy_addr" ];
    // ReverseTunnelAddress is the address of the SSH proxy server of the cluster to join. If
    // not set, it is derived from <metadata.name>:<default reverse tunnel port>.
    string ReverseTunnelAddress = 5 [ (gogoproto.jsontag) = "tunnel_addr" ];
    // RoleMap specifies role mappings to remote roles.
    repeated RoleMapping RoleMap = 6
        [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "role_map,omitempty" ];
}
