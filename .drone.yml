---
kind: pipeline
type: kubernetes
name: test-linux

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Run linter
    image: golangci/golangci-lint:v1.54.2
    commands:
      - make lint

  - name: Run tests
    image: golang:1.21.2
    environment:
      RUNNER_TEMP: /tmp
      TELEPORT_ENTERPRISE_LICENSE:
        from_secret: TELEPORT_ENTERPRISE_LICENSE
      TERRAFORM_VERSION: 1.5.6-1
      TELEPORT_VERSION: 14.0.0
    commands:
      - echo Testing plugins against Teleport $TELEPORT_VERSION
      - apt update && apt install -y gnupg software-properties-common
      - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
      - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list

      - curl -fsSL https://apt.releases.teleport.dev/gpg -o /usr/share/keyrings/teleport-archive-keyring.asc
      - bash -c 'source /etc/os-release; echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/$ID $VERSION_CODENAME stable/v14" | tee /etc/apt/sources.list.d/teleport.list > /dev/null'
      - apt update && apt install -y terraform=$TERRAFORM_VERSION teleport-ent=$TELEPORT_VERSION
      - make test

---
kind: pipeline
type: kubernetes
name: build-on-push-linux

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

depends_on:
  - test-linux

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.21.2
    commands:
      - make build-all

---
kind: pipeline
type: kubernetes
name: tag-build-plugins-linux

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-gitlab-v*
      - refs/tags/teleport-discord-v*
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-msteams-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

depends_on:
  - test-linux

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.21.2
    commands:
      - mkdir -p build/
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - make release/access-$PLUGIN_TYPE
      - find access/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
    - name: awsconfig
      path: /root/.aws

  - name: Upload to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_REGION: us-west-2
    commands:
      - aws sts get-caller-identity
      - cd build
      - aws s3 sync . s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/
    volumes:
    - name: awsconfig
      path: /root/.aws

volumes:
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-plugins-docker

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-gitlab-v*
      - refs/tags/teleport-discord-v*
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-msteams-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

depends_on:
  - test-linux

steps:
  - name: fetch tags
    image: docker:git
    commands:
      - git fetch --tags

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
      - name: awsconfig
        path: /root/.aws

  - name: Build and push to ECR
    image: docker:git
    environment:
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
      - name: awsconfig
        path: /root/.aws
    commands:
      - apk add --no-cache make aws-cli
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - make docker-push-access-$PLUGIN_TYPE

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-plugins-helm

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/v*

steps:
  - name: Package charts
    image: alpine/helm:latest
    commands:
      - apk add --no-cache make
      - make helm-package-charts

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
    - name: awsconfig
      path: /root/.aws

  - name: Publish charts to staging S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_STAGING_BUCKET
      AWS_REGION: us-west-2
    commands:
    - cd packages
    - aws s3 sync . s3://$AWS_S3_BUCKET/
    volumes:
    - name: awsconfig
      path: /root/.aws

volumes:
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-terraform

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.21.2
    commands:
      - mkdir -p build/
      - go install github.com/konoui/lipo@latest
      - make OS=linux ARCH=amd64 release/terraform
      - make OS=linux ARCH=arm64 release/terraform
      - make OS=darwin ARCH=amd64 release/terraform
      - make OS=darwin ARCH=arm64 release/terraform
      - make OS=darwin ARCH=universal release/terraform
      - find terraform/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
    - name: awsconfig
      path: /root/.aws

  - name: Upload to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_REGION: us-west-2
    commands:
    - cd build
    - aws s3 sync . s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/
    volumes:
    - name: awsconfig
      path: /root/.aws

volumes:
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-event-handler

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.21.2
    commands:
      - mkdir -p build/
      - make OS=linux ARCH=amd64 release/event-handler
      - make OS=darwin ARCH=amd64 release/event-handler
      - find event-handler/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity
    volumes:
    - name: awsconfig
      path: /root/.aws

  - name: Upload to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_REGION: us-west-2
    commands:
    - cd build
    - aws s3 sync . s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/
    volumes:
    - name: awsconfig
      path: /root/.aws

volumes:
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-event-handler-docker

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: fetch tags
    image: docker:git
    commands:
      - git fetch --tags

  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Build and push to ECR
    image: docker:git
    environment:
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
      - name: awsconfig
        path: /root/.aws
    commands:
      - apk add --no-cache make aws-cli
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - make docker-push-event-handler

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: promote-artifact

trigger:
  event:
    - promote
  target:
    - production

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

clone:
  disable: true

steps:
  - name: Assume Staging AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Download artifact from S3 artifact publishing bucket
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_REGION: us-west-2
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - aws s3 sync s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/ .

  - name: Assume Production AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_AWS_SECRET_ACCESS_KEY
      AWS_ROLE:
        from_secret: PRODUCTION_AWS_ROLE
    commands:
    - rm /root/.aws/credentials
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

    volumes:
    - name: awsconfig
      path: /root/.aws

  - name: Upload artifact to production S3 bucket with public read access
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: PRODUCTION_AWS_S3_BUCKET
      AWS_REGION: us-east-1
    commands:
      - aws s3 sync --acl public-read .  s3://$AWS_S3_BUCKET/teleport-plugins/${DRONE_TAG##*-v}/
    volumes:
    - name: awsconfig
      path: /root/.aws

volumes:
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish-access-images

trigger:
  event:
    - promote
  target:
    - production
    - publish-images
    - publish-access-images
  ref:
    include:
      - refs/tags/teleport-discord-v*
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-msteams-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

steps:
  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Promote image
    image: docker:git
    environment:
      QUAYIO_DOCKER_USERNAME:
        from_secret: PRODUCTION_QUAYIO_DOCKER_USERNAME
      QUAYIO_DOCKER_PASSWORD:
        from_secret: PRODUCTION_QUAYIO_DOCKER_PASSWORD
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
      - name: awsconfig
        path: /root/.aws
    commands:
      - apk add --no-cache make aws-cli
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - aws ecr-public get-login-password --region us-east-1 | docker login -u="AWS" --password-stdin public.ecr.aws
      - docker login -u="$QUAYIO_DOCKER_USERNAME" -p="$QUAYIO_DOCKER_PASSWORD" quay.io
      - make docker-promote-access-$PLUGIN_TYPE

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish-event-handler-image

trigger:
  event:
    - promote
  target:
    - production
    - publish-images
    - publish-event-handler-image
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

steps:
  - name: Assume AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Promote image
    image: docker:git
    environment:
      QUAYIO_DOCKER_USERNAME:
        from_secret: PRODUCTION_QUAYIO_DOCKER_USERNAME
      QUAYIO_DOCKER_PASSWORD:
        from_secret: PRODUCTION_QUAYIO_DOCKER_PASSWORD
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
      - name: awsconfig
        path: /root/.aws
    commands:
      - apk add --no-cache make aws-cli
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - aws ecr-public get-login-password --region us-east-1 | docker login -u="AWS" --password-stdin public.ecr.aws
      - docker login -u="$QUAYIO_DOCKER_USERNAME" -p="$QUAYIO_DOCKER_PASSWORD" quay.io
      - make docker-promote-event-handler

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
  - name: awsconfig
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish-helm-charts

trigger:
  event:
    - promote
  target:
    - production
    - publish-helm-charts

steps:
  - name: Assume Production AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_SECRET
      AWS_ROLE:
        from_secret: HELM_CHART_PRODUCTION_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Download production chart repositories
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_PRODUCTION_BUCKET
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - mkdir -p packages
      - aws s3 sync s3://$AWS_S3_BUCKET/ packages/

  - name: Assume Staging AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_ROLE:
        from_secret: PLUGIN_BUILD_STAGING_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - rm /root/.aws/credentials
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Download staging chart repositories
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_STAGING_BUCKET
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - aws s3 sync s3://$AWS_S3_BUCKET/ packages/

  - name: Generate index file
    image: alpine/helm:latest
    commands:
      - helm repo index packages/

  - name: Reassume Production AWS Role
    image: amazon/aws-cli
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_SECRET
      AWS_ROLE:
        from_secret: HELM_CHART_PRODUCTION_AWS_ROLE
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
    - rm /root/.aws/credentials
    - aws sts get-caller-identity
    - |-
        printf "[default]\naws_access_key_id = %s\naws_secret_access_key = %s\naws_session_token = %s" \
          $(aws sts assume-role \
            --role-arn "$AWS_ROLE" \
            --role-session-name $(echo "drone-${DRONE_REPO}/${DRONE_BUILD_NUMBER}" | sed "s|/|-|g") \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text) \
            > /root/.aws/credentials
    - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - aws sts get-caller-identity

  - name: Publish chart repository to S3
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_PRODUCTION_BUCKET
      REGION: us-east-2
    volumes:
      - name: awsconfig
        path: /root/.aws
    commands:
      - cd packages
      - aws s3 sync . s3://$AWS_S3_BUCKET/

volumes:
  - name: awsconfig
    temp: {}

---
# NOTE: Any changes here need to be reflected in the emergency deployment
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: tag-stage-terraform-provider

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

depends_on:
  - tag-build-terraform

concurrency:
  limit: 1

steps:
  - name: Upload terraform provider to staging registry
    image: golang:1.21.2
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                         \
          --tag ${DRONE_TAG}                                                   \
          -p 6                                                                 \
          --registry-url https://terraform-staging.releases.teleport.dev/      \
          --namespace gravitational                                            \
          --name teleport                                                      \
          --deployment-role $DEPLOYMENT_ROLE                                   \
          --staging-role $STAGING_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      STAGING_ROLE:
        from_secret: AWS_ROLE

      PROD_REGION:
        from_secret: STAGING_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: STAGING_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: STAGING_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: STAGING_TERRAFORM_AWS_SECRET_ACCESS_KEY
      DEPLOYMENT_ROLE:
        from_secret: STAGING_TERRAFORM_AWS_DEPLOYMENT_ROLE
      SIGNING_KEY:
        from_secret: STAGING_TERRAFORM_REGISTRY_SIGNING_KEY
---
# NOTE: Any changes here need to be reflected in the emergency deployment
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: promote-staging-terraform-provider

trigger:
  event:
  - promote
  target:
  - staging
  - staging-terraform
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

concurrency:
  limit: 1

steps:
  - name: Upload terraform provider to staging registry
    image: golang:1.21.2
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                         \
          --tag ${DRONE_TAG}                                                   \
          -p 6                                                                 \
          --registry-url https://terraform-staging.releases.teleport.dev/      \
          --namespace gravitational                                            \
          --name teleport                                                      \
          --deployment-role $DEPLOYMENT_ROLE                                   \
          --staging-role $STAGING_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      STAGING_ROLE:
        from_secret: AWS_ROLE

      PROD_REGION:
        from_secret: STAGING_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: STAGING_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: STAGING_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: STAGING_TERRAFORM_AWS_SECRET_ACCESS_KEY
      DEPLOYMENT_ROLE:
        from_secret: STAGING_TERRAFORM_AWS_DEPLOYMENT_ROLE
      SIGNING_KEY:
        from_secret: STAGING_TERRAFORM_REGISTRY_SIGNING_KEY
---
# NOTE: Any changes here need to be reflected in the emergency deployment
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: promote-terraform-provider

trigger:
  event:
  - promote
  target:
  - production
  - production-terraform
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

concurrency:
  limit: 1

steps:
  - name: Promote terraform provider to public registry
    image: golang:1.21.2
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                 \
          --tag ${DRONE_TAG}                                           \
          -p 6                                                         \
          --registry-url https://terraform.releases.teleport.dev/      \
          --namespace gravitational                                    \
          --name teleport                                              \
          --deployment-role $DEPLOYMENT_ROLE                           \
          --staging-role $STAGING_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      STAGING_ROLE:
        from_secret: AWS_ROLE

      PROD_REGION:
        from_secret: PRODUCTION_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: PRODUCTION_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: PRODUCTION_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_TERRAFORM_AWS_SECRET_ACCESS_KEY
      DEPLOYMENT_ROLE:
        from_secret: PRODUCTION_TERRAFORM_AWS_DEPLOYMENT_ROLE
      SIGNING_KEY:
        from_secret: PRODUCTION_TERRAFORM_REGISTRY_SIGNING_KEY
---
kind: signature
hmac: 00f66e92faf100b63e28b7a6465b3a1668bc4a1143017c060fb6e20c4007554d

...
