---
kind: pipeline
type: kubernetes
name: test-linux

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Run linter
    image: golangci/golangci-lint:v1.39.0
    commands:
      - make lint

  - name: Run tests
    image: golang:1.17.11
    environment:
      TELEPORT_ENTERPRISE_LICENSE:
        from_secret: TELEPORT_ENTERPRISE_LICENSE
      TELEPORT_GET_VERSION: v9.3.0
    commands:
      - echo Testing plugins against Teleport $TELEPORT_GET_VERSION
      - curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
      - apt update && apt install -y software-properties-common
      - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      - apt update && apt install -y terraform=1.2.2
      - make test

---
kind: pipeline
type: exec
name: test-darwin

concurrency:
  limit: 1

platform:
  os: darwin
  arch: amd64

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

workspace:
  path: /tmp/teleport-plugins/test-darwin

steps:
  - name: Install Go Toolchain
    environment:
      GO_VERSION: go1.17.11
      TOOLCHAIN_DIR: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/toolchains
    commands:
      - set -u
      - mkdir -p $TOOLCHAIN_DIR
      - curl --silent -O https://dl.google.com/go/$GO_VERSION.darwin-amd64.tar.gz
      - tar -C  $TOOLCHAIN_DIR -xzf $GO_VERSION.darwin-amd64.tar.gz
      - rm -rf $GO_VERSION.darwin-amd64.tar.gz

  - name: Run tests
    environment:
      TELEPORT_ENTERPRISE_LICENSE:
        from_secret: TELEPORT_ENTERPRISE_LICENSE
      TELEPORT_GET_VERSION: v9.3.0
      GOPATH: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/go
      GOCACHE: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/go/cache
      TOOLCHAIN_DIR: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/toolchains
    commands:
      - export PATH=$TOOLCHAIN_DIR/go/bin:$PATH
      - go version
      - go clean
      - make test

  - name: Clean up toolchains (post)
    when:
      status:
      - success
      - failure
    commands:
      - set -u
      - chmod -R u+rw /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}
      - rm -rf /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}

---
kind: pipeline
type: kubernetes
name: build-on-push-linux

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

depends_on:
  - test-linux

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.17.11
    commands:
      - make build-all

---
kind: pipeline
type: exec
name: build-on-push-darwin

concurrency:
  limit: 1

platform:
  os: darwin
  arch: amd64

trigger:
  branch:
    - master
    - branch/*
  event:
    include:
      - push
  repo:
    include:
      - gravitational/*

depends_on:
  - test-darwin

workspace:
  path: /tmp/teleport-plugins/build-darwin

steps:
  - name: Install Go Toolchain
    environment:
      GO_VERSION: go1.17.11
      TOOLCHAIN_DIR: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/toolchains
    commands:
      - set -u
      - mkdir -p $TOOLCHAIN_DIR
      - curl --silent -O https://dl.google.com/go/$GO_VERSION.darwin-amd64.tar.gz
      - tar -C  $TOOLCHAIN_DIR -xzf $GO_VERSION.darwin-amd64.tar.gz
      - rm -rf $GO_VERSION.darwin-amd64.tar.gz

  - name: Build artifacts (darwin)
    environment:
      GOPATH: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/go
      GOCACHE: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/go/cache
      TOOLCHAIN_DIR: /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}/toolchains 
    commands:
      - export PATH=$TOOLCHAIN_DIR/go/bin:$PATH
      - go version
      - go clean
      - make build-all

  - name: Clean up toolchains (post)
    when:
      status:
      - success
      - failure
    commands:
      - set -u
      - chmod -R u+rw /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}
      - rm -rf /tmp/teleport-plugins/${DRONE_BUILD_NUMBER}-${DRONE_BUILD_CREATED}
---
kind: pipeline
type: kubernetes
name: tag-build-plugins-linux

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-gitlab-v*
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

depends_on:
  - test-linux

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.17.11
    commands:
      - mkdir -p build/
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - make release/access-$PLUGIN_TYPE
      - find access/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Upload to S3
    image: plugins/s3
    settings:
      bucket:
        from_secret: AWS_S3_BUCKET
      access_key:
        from_secret: AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: AWS_SECRET_ACCESS_KEY
      region: us-west-2
      source: /go/src/github.com/gravitational/teleport-plugins/build/*
      target: teleport-plugins/tag/${DRONE_TAG}
      strip_prefix: /go/src/github.com/gravitational/teleport-plugins/build

---
kind: pipeline
type: kubernetes
name: tag-build-plugins-docker

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-gitlab-v*
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

depends_on:
  - test-linux

steps:
  - name: fetch tags
    image: docker:git
    commands: 
      - git fetch --tags

  - name: Build and push to ECR
    image: docker:git
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make aws-cli
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - make docker-push-access-$PLUGIN_TYPE

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: kubernetes
name: tag-build-plugins-helm

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/v*

steps:
  - name: "Helm: Package charts"
    image: alpine/helm:latest
    commands: 
      - apk add --no-cache make
      - make helm-package-charts

  - name: "Helm: Publish charts to staging S3"
    image: plugins/s3
    settings:
      bucket:
        from_secret: HELM_CHART_STAGING_BUCKET
      access_key:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      secret_key:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      region: us-west-2
      source: packages/*
      target: /
      strip_prefix: packages

---
kind: pipeline
type: kubernetes
name: tag-build-terraform-linux

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.17.11
    commands:
      - mkdir -p build/
      - make release/terraform
      - find terraform/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Upload to S3
    image: plugins/s3
    settings:
      bucket:
        from_secret: AWS_S3_BUCKET
      access_key:
        from_secret: AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: AWS_SECRET_ACCESS_KEY
      region: us-west-2
      source: /go/src/github.com/gravitational/teleport-plugins/build/*
      target: teleport-plugins/tag/${DRONE_TAG}
      strip_prefix: /go/src/github.com/gravitational/teleport-plugins/build

---
kind: pipeline
type: exec
name: tag-build-terraform-darwin

concurrency:
  limit: 1

platform:
  os: darwin
  arch: amd64

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

steps:
  - name: Build artifacts
    commands:
      - mkdir -p build/
      - make release/terraform
      - find terraform/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do shasum -a 256 $FILE > $FILE.sha256; done
      - ls -l .

  - name: Upload to S3
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_REGION: us-west-2
    commands:
      - cd build
      - aws s3 sync . s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/

---
kind: pipeline
type: kubernetes
name: tag-build-event-handler-linux

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: Build artifacts
    image: golang:1.17.11
    commands:
      - mkdir -p build/
      - make release/event-handler
      - find event-handler/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do sha256sum $FILE > $FILE.sha256; done
      - ls -l .

  - name: Upload to S3
    image: plugins/s3
    settings:
      bucket:
        from_secret: AWS_S3_BUCKET
      access_key:
        from_secret: AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: AWS_SECRET_ACCESS_KEY
      region: us-west-2
      source: /go/src/github.com/gravitational/teleport-plugins/build/*
      target: teleport-plugins/tag/${DRONE_TAG}
      strip_prefix: /go/src/github.com/gravitational/teleport-plugins/build

---
kind: pipeline
type: kubernetes
name: tag-build-event-handler-docker

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

steps:
  - name: fetch tags
    image: docker:git
    commands: 
      - git fetch --tags

  - name: Build and push to ECR
    image: docker:git
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make aws-cli
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - make docker-push-event-handler

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: exec
name: tag-build-event-handler-darwin

concurrency:
  limit: 1

platform:
  os: darwin
  arch: amd64

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

steps:
  - name: Build artifacts
    commands:
      - mkdir -p build/
      - make release/event-handler
      - find event-handler/ -iname "*.tar.gz" -print -exec cp {} build/ \;
      - cd build
      - for FILE in *.tar.gz; do shasum -a 256 $FILE > $FILE.sha256; done
      - ls -l .

  - name: Upload to S3
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_REGION: us-west-2
    commands:
      - cd build
      - aws s3 sync . s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/

---
kind: pipeline
type: kubernetes
name: promote-artifact

trigger:
  event:
    - promote
  target:
    - production

workspace:
  path: /go/src/github.com/gravitational/teleport-plugins

clone:
  disable: true

steps:
  - name: Download artifact from S3 artifact publishing bucket
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: AWS_S3_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      AWS_REGION: us-west-2
    commands:
      - aws s3 sync s3://$AWS_S3_BUCKET/teleport-plugins/tag/${DRONE_TAG}/ .

  - name: Upload artifact to production S3 bucket with public read access
    image: plugins/s3
    settings:
      bucket:
        from_secret: PRODUCTION_AWS_S3_BUCKET
      access_key:
        from_secret: PRODUCTION_AWS_ACCESS_KEY_ID
      secret_key:
        from_secret: PRODUCTION_AWS_SECRET_ACCESS_KEY
      region: us-east-1
      acl: public-read
      source: /go/src/github.com/gravitational/teleport-plugins/*
      target: teleport-plugins/${DRONE_TAG##*-v}/
      strip_prefix: /go/src/github.com/gravitational/teleport-plugins/

---
kind: pipeline
type: kubernetes
name: publish-access-images

trigger:
  event:
    - promote
  target:
    - production
    - publish-images
    - publish-access-images
  ref:
    include:
      - refs/tags/teleport-jira-v*
      - refs/tags/teleport-mattermost-v*
      - refs/tags/teleport-pagerduty-v*
      - refs/tags/teleport-slack-v*
      - refs/tags/teleport-email-v*

steps:
  - name: Promote image
    image: docker:git
    environment:
      QUAYIO_DOCKER_USERNAME:
        from_secret: PRODUCTION_QUAYIO_DOCKER_USERNAME
      QUAYIO_DOCKER_PASSWORD:
        from_secret: PRODUCTION_QUAYIO_DOCKER_PASSWORD
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make aws-cli
      - export PLUGIN_TYPE=$(echo ${DRONE_TAG} | cut -d- -f2)
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - docker login -u="$QUAYIO_DOCKER_USERNAME" -p="$QUAYIO_DOCKER_PASSWORD" quay.io
      - make docker-promote-access-$PLUGIN_TYPE

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish-event-handler-image

trigger:
  event:
    - promote
  target:
    - production
    - publish-images
    - publish-event-handler-image
  ref:
    include:
      - refs/tags/teleport-event-handler-v*

steps:
  - name: Promote image
    image: docker:git
    environment:
      QUAYIO_DOCKER_USERNAME:
        from_secret: PRODUCTION_QUAYIO_DOCKER_USERNAME
      QUAYIO_DOCKER_PASSWORD:
        from_secret: PRODUCTION_QUAYIO_DOCKER_PASSWORD
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
      AWS_DEFAULT_REGION: us-west-2
      DOCKER_BUILDKIT: 1
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make aws-cli
      - aws ecr get-login-password | docker login -u="AWS" --password-stdin 146628656107.dkr.ecr.us-west-2.amazonaws.com
      - docker login -u="$QUAYIO_DOCKER_USERNAME" -p="$QUAYIO_DOCKER_PASSWORD" quay.io
      - make docker-promote-event-handler

services:
  - name: start docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: kubernetes
name: publish-helm-charts

trigger:
  event:
    - promote
  target:
    - production
    - publish-helm-charts

steps:
  - name: "Helm: Download production chart repositories"
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_PRODUCTION_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_SECRET
    commands:
      - mkdir -p packages
      - aws s3 sync s3://$AWS_S3_BUCKET/ packages/

  - name: "Helm: Download staging chart repositories"
    image: amazon/aws-cli
    environment:
      AWS_S3_BUCKET:
        from_secret: HELM_CHART_STAGING_BUCKET
      AWS_ACCESS_KEY_ID:
        from_secret: PLUGIN_BUILD_USER_STAGING_KEY
      AWS_SECRET_ACCESS_KEY:
        from_secret: PLUGIN_BUILD_USER_STAGING_SECRET
    commands:
      - aws s3 sync s3://$AWS_S3_BUCKET/ packages/

  - name: "Helm: Generate index file"
    image: alpine/helm:latest
    commands:
      - helm repo index packages/

  - name: "Helm: Publish chart repository to S3"
    image: plugins/s3 
    settings:
      bucket:
        from_secret: HELM_CHART_PRODUCTION_BUCKET
      access_key:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_KEY
      secret_key:
        from_secret: HELM_CHART_PRODUCTION_BUCKET_SECRET
      region: us-east-2
      source: packages/*
      strip_prefix: packages
    
---
# NOTE: Any changes here need to be reflected in the emergency deployment 
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: tag-stage-terraform-provider

trigger:
  event:
    - tag
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

depends_on:
  - tag-build-terraform-linux
  - tag-build-terraform-darwin

concurrency:
  limit: 1

steps:
  - name: Upload terraform provider to staging registry
    image: golang:1.17.11
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                         \
          --tag ${DRONE_TAG}                                                   \
          -p 6                                                                 \
          --registry-url https://terraform-staging.releases.teleport.dev/      \
          --namespace gravitational                                            \
          --name teleport                                                      \
          --deployment-role $DEPLOYMENT_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      
      PROD_REGION:
        from_secret: STAGING_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: STAGING_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: STAGING_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: STAGING_TERRAFORM_AWS_SECRET_ACCESS_KEY
      DEPLOYMENT_ROLE:
        from_secret: STAGING_TERRAFORM_AWS_DEPLOYMENT_ROLE
      SIGNING_KEY:
        from_secret: STAGING_TERRAFORM_REGISTRY_SIGNING_KEY
---
# NOTE: Any changes here need to be reflected in the emergency deployment 
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: promote-staging-terraform-provider

trigger:
  event:
  - promote
  target:
  - staging
  - staging-terraform
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*

concurrency:
  limit: 1

steps:
  - name: Upload terraform provider to staging registry
    image: golang:1.17.11
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                         \
          --tag ${DRONE_TAG}                                                   \
          -p 6                                                                 \
          --registry-url https://terraform-staging.releases.teleport.dev/      \
          --namespace gravitational                                            \
          --name teleport                                                      \
          --deployment-role $DEPLOYMENT_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      
      PROD_REGION:
        from_secret: STAGING_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: STAGING_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: STAGING_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: STAGING_TERRAFORM_AWS_SECRET_ACCESS_KEY
      DEPLOYMENT_ROLE:
        from_secret: STAGING_TERRAFORM_AWS_DEPLOYMENT_ROLE
      SIGNING_KEY:
        from_secret: STAGING_TERRAFORM_REGISTRY_SIGNING_KEY
---
# NOTE: Any changes here need to be reflected in the emergency deployment 
#       scripts in tooling/bin
kind: pipeline
type: kubernetes
name: promote-terraform-provider

trigger:
  event:
  - promote
  target:
  - production
  - production-terraform
  ref:
    include:
      - refs/tags/terraform-provider-teleport-v*
      
concurrency:
  limit: 1

steps:
  - name: Promote terraform provider to public registry
    image: golang:1.17.11
    commands:
      - cd tooling
      - |
        go run ./cmd/promote-terraform                                 \
          --tag ${DRONE_TAG}                                           \
          -p 6                                                         \
          --registry-url https://terraform.releases.teleport.dev/      \
          --namespace gravitational                                    \
          --name teleport                                              \
          --deployment-role $DEPLOYMENT_ROLE

    environment:
      STAGING_REGION: us-west-2
      STAGING_BUCKET:
        from_secret: AWS_S3_BUCKET
      STAGING_ACCESS_KEY_ID:
        from_secret: AWS_ACCESS_KEY_ID
      STAGING_SECRET_ACCESS_KEY:
        from_secret: AWS_SECRET_ACCESS_KEY
      
      PROD_REGION:
        from_secret: PRODUCTION_TERRAFORM_AWS_REGION
      PROD_BUCKET:
        from_secret: PRODUCTION_TERRAFORM_AWS_BUCKET
      PROD_ACCESS_KEY_ID:
        from_secret: PRODUCTION_TERRAFORM_AWS_ACCESS_KEY_ID
      PROD_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_TERRAFORM_AWS_SECRET_ACCESS_KEY 
      DEPLOYMENT_ROLE:
        from_secret: PRODUCTION_TERRAFORM_AWS_DEPLOYMENT_ROLE 
      SIGNING_KEY:
        from_secret: PRODUCTION_TERRAFORM_REGISTRY_SIGNING_KEY 
---
kind: signature
hmac: 754bd960e9a78fdb5398f2cd9f16dd3c3242442e529e1a8db48bf427fdc5f2ac

...
